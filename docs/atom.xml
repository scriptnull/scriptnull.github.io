<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vishnu Bharathi</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vishnubharathi.codes/"/>
  <updated>2020-08-16T18:42:20.310Z</updated>
  <id>https://vishnubharathi.codes/</id>
  
  <author>
    <name>Vishnu Bharathi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Learning to sort</title>
    <link href="https://vishnubharathi.codes/blog/learning-to-sort/"/>
    <id>https://vishnubharathi.codes/blog/learning-to-sort/</id>
    <published>2020-08-16T18:37:42.000Z</published>
    <updated>2020-08-16T18:42:20.310Z</updated>
    
    <content type="html"><![CDATA[<p>I kind of procrastinate over starting to learn about sorting whenever I am preparing for interviews. Mainly because we need to memorize the working of various sorting algorithms. But over time, I have realized that each sorting algorithm is based on some intuition and if we can understand those intuitions, then it becomes easy to remember how they work.</p><p>A fair-warning: This blog post doesn’t contain many images, animations, etc. Just a bunch of text, math, and code - the minimum things just enough for me to get ideas about sorting whenever I feel like!</p><p>One of my earliest attempts at learning about sorting algorithms is by writing <a href="http://node-machine.org/machinepack-sort" target="_blank" rel="noopener">machinepack-sort</a></p><p>I am going to do a similar effort here, but this time I am planning to do these steps.</p><ol><li>Understand and visualize how a sorting algorithm works. (by reading blogs, seeing video tutorials and lectures)</li><li>Come up with the time and space complexity for each of them.</li><li>Write code and test the implementation using <a href="https://leetcode.com/problems/sort-an-array/" target="_blank" rel="noopener">this leetcode puzzle</a></li><li>Try to find practical use cases for each algorithm. (in the retrospect, wasn’t able to concentrate on this much. Maybe I will update this post, as I discover a usage in a practical use case)</li></ol><p>There are just a lot of different sorting algorithms. This blog contains the most common ones at first and is open to get updated with some more sorting algorithms as I learn/discover them.</p><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>I will try to collect information that might clarify details for understanding the sorting algorithms in this section.</p><h3 id="Trade-off"><a href="#Trade-off" class="headerlink" title="Trade-off"></a>Trade-off</h3><p>I heavily recommend taking a look at <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Comparison_sorts" target="_blank" rel="noopener">this comparison table</a> to understand the trade-offs of different kinds of sorting algorithms.</p><p>Pasting a screenshot of the table here. One could use this table to compare and contrast different algorithms and reason about which one to use!</p><p><img src="/images/sorting.png" alt="sorting"></p><h3 id="0-1"><a href="#0-1" class="headerlink" title="0,1"></a>0,1</h3><p>I think it is good to think about the very basic cases first and handle them at first. The very basic case is</p><p>When the list to be sorted has only one or zero elements, we just have to return the list itself (because it is already sorted)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// implement sorting for n elements here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I think that some implementations try to embed this logic in the core logic itself, but anyway I would just like to make things simple and take one thing off from our table right away!</p><h3 id="Stable-Sorting"><a href="#Stable-Sorting" class="headerlink" title="Stable Sorting"></a>Stable Sorting</h3><p>When sorting a collection, what if two items with the same value exist.</p><p>[5 2 1 1 6]</p><p>Notice how 1 is repeated. While sorting, should we leave their relative order the same or should we shift them?</p><p>Well, it is up to you. If your sorting implementation maintains the relative order of equal elements, then it is said to be stable sorting.</p><p>Here is a more practical example. Consider an array of JSON objects that need to be sorted based on marks of students.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personA"</span>, <span class="attr">"mark"</span>: <span class="number">50</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personB"</span>, <span class="attr">"mark"</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personC"</span>, <span class="attr">"mark"</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personD"</span>, <span class="attr">"mark"</span>: <span class="number">80</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>If the above array is to be sorted using stable sorting, we would get</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personB"</span>, <span class="attr">"mark"</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personC"</span>, <span class="attr">"mark"</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personA"</span>, <span class="attr">"mark"</span>: <span class="number">50</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personD"</span>, <span class="attr">"mark"</span>: <span class="number">80</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>In case of an unstable sort, we might get</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personC"</span>, <span class="attr">"mark"</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personB"</span>, <span class="attr">"mark"</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personA"</span>, <span class="attr">"mark"</span>: <span class="number">50</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personD"</span>, <span class="attr">"mark"</span>: <span class="number">80</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Notice how the relative order of two persons with the same mark is disrupted for an unstable sort.</p><p>Further reading: <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Sorting_algorithm#Stability</a></p><h3 id="Comparison-and-non-comparison-sorts"><a href="#Comparison-and-non-comparison-sorts" class="headerlink" title="Comparison and non-comparison sorts"></a>Comparison and non-comparison sorts</h3><p>Woah, just discovered this type of categorization of sorting algorithms: <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Comparison_of_algorithms" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Sorting_algorithm#Comparison_of_algorithms</a></p><p>I think for most of the post here we will focus on Comparison sorts but would like to explore this topic as we explore various algorithms.</p><h2 id="Sorting-Algorithms"><a href="#Sorting-Algorithms" class="headerlink" title="Sorting Algorithms"></a>Sorting Algorithms</h2><h3 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h3><p>A very simple sorting technique. The reason it is called a selection sort is that we will <strong>select</strong> the lowest/highest element at a time and place it in a sorted manner.</p><p>I think this example from <a href="https://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="noopener">Wikipedia</a> makes it clear</p><table><thead><tr><th>Sorted sublist</th><th>Unsorted sublist</th><th>Least element in unsorted list</th></tr></thead><tbody><tr><td>()</td><td>(11, 25, 12, 22, 64)</td><td>11</td></tr><tr><td>(11)</td><td>(25, 12, 22, 64)</td><td>12</td></tr><tr><td>(11, 12)</td><td>(25, 22, 64)</td><td>22</td></tr><tr><td>(11, 12, 22)</td><td>(25, 64)</td><td>25</td></tr><tr><td>(11, 12, 22, 25)</td><td>(64)</td><td>64</td></tr><tr><td>(11, 12, 22, 25, 64)</td><td>()    </td></tr></tbody></table><h4 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h4><p>So the intuition here is to <strong>select</strong> the lowest/highest number from the unsorted sublist and move it to sorted sublist.</p><h4 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h4><p>Finding the the lowest/highest element takes O(n). This search needs to be done n times in-order to get the final answer.</p><p>The number of items to be searched decreases by one each time. First we search n items, then (n-1) items:</p><p>n + (n-1) + (n-2) + …. + 1 </p><p>Now it boils to simple math, “Sum of first n natural numbers” = (n*(n+1))/2 = (n<sup>2</sup> + n) / 2</p><p>Now omitting the constants and lower degree, we arrive at the time complexity.</p><p><strong>O(n<sup>2</sup>)</strong></p><h4 id="Space-complexity"><a href="#Space-complexity" class="headerlink" title="Space complexity"></a>Space complexity</h4><p>We move the lowest/highest element each time to a sorted sublist. The space complexity really depends on the way we allocate this sorted sublist.</p><p>If we create a new list and append the lowest/highest each time, then we will end up with n allocations. So <strong>O(n)</strong>.</p><p>But if we implement our code in a way to just swap the (n-1)<sup>th</sup> index for the n<sup>th</sup> lowest/highest element, we would end up doing everything in-place. So <strong>O(1)</strong>.</p><h4 id="Step-by-step-code"><a href="#Step-by-step-code" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>First we try to write down the logic for finding the lowest number (assume we need to do ascending order sort).</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findSmallest</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    smallest := nums[<span class="number">0</span>]</span><br><span class="line">    smallestIdx := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &lt; smallest &#123;</span><br><span class="line">            smallest = nums[i]</span><br><span class="line">            smallestIdx = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> smallestIdx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we execute this n times, we will get back the same index. Our idea here is to reduce the length of the unsorted sublist being passed into the array, so that we get back the index of n<sup>th</sup> lowest item. So building up on that.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findSmallest</span><span class="params">(nums []<span class="keyword">int</span>, start <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    smallest := nums[start]</span><br><span class="line">    smallestIdx := start</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := start; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &lt; smallest &#123;</span><br><span class="line">            smallest = nums[i]</span><br><span class="line">            smallestIdx = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> smallestIdx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, we just call the <code>findSmallest</code> procedure n times and do a swap everytime to construct the sorted sublist.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;    </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        smallestIdx := findSmallest(nums, i)</span><br><span class="line">        nums[i], nums[smallestIdx] = nums[smallestIdx], nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Full-code"><a href="#Full-code" class="headerlink" title="Full code"></a>Full code</h4><p>Now, we have a Space = O(1) and Time = O(n<sup>2</sup>) implementation here!</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;    </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        smallestIdx := findSmallest(nums, i)</span><br><span class="line">        nums[i], nums[smallestIdx] = nums[smallestIdx], nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findSmallest</span><span class="params">(nums []<span class="keyword">int</span>, start <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    smallest := nums[start]</span><br><span class="line">    smallestIdx := start</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := start; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &lt; smallest &#123;</span><br><span class="line">            smallest = nums[i]</span><br><span class="line">            smallestIdx = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> smallestIdx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><ul><li><a href="https://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="noopener">Wikipedia</a></li><li><a href="https://learning.oreilly.com/library/view/grokking-algorithms-an/9781617292231/kindle_split_008.html" target="_blank" rel="noopener">Book: Grokking Algorithms: An illustrated guide for programmers and other curious people</a></li></ul><h3 id="Bubble-Sort"><a href="#Bubble-Sort" class="headerlink" title="Bubble Sort"></a>Bubble Sort</h3><p>Values are bubbled up while sorting using Bubble sort. Lets see what we mean by “bubbling up”.</p><p>The way bubble sort works is, we compare i and i+1 elements and swap them if i<sup>th</sup> element is greater than (i+1)<sup>th</sup> element. If we do this repeatedly for ~n times, the greater elements would start bubbling up at the end of the list and the list will be sorted at the end.</p><p>Consider the example of sorting: [5, 4, 6, 2, 1] (into an ascending order list)</p><p><code>i=0</code>; First we compare 5 and 4. Since <code>5 &gt; 4</code>, we swap.</p><p>4 5 6 2 1</p><p><code>i=1</code>; We compare 5 and 6. Since <code>5 &lt; 6</code>, no swap.</p><p>4 5 6 2 1</p><p><code>i=2</code>; We compare 6 and 2. Since <code>6 &gt; 2</code>, we swap.</p><p>4 5 2 6 1</p><p><code>i=3</code>; We compare 6 and 1. Since <code>6 &gt; 1</code>, we swap.</p><p>4 5 2 1 6</p><p>That’s it! Notice how 6 (the highest number) got <strong>bubbled up</strong> at the end of the list.</p><p>If we perform the same procedure n times, we will end up bubbling all the n highest numbers, thus resulting in sorted order.</p><h4 id="Intuition-1"><a href="#Intuition-1" class="headerlink" title="Intuition"></a>Intuition</h4><p>Bubble up the highest number to the last and build up the sorted list from backwards.</p><h4 id="Time-Complexity-1"><a href="#Time-Complexity-1" class="headerlink" title="Time Complexity"></a>Time Complexity</h4><p>We are performing in-memory swaps upto the n-1<sup>th</sup> index in the first iteration. At this point, the highest number is bubbled up at the <code>n-1</code><sup>th</sup> index.</p><p>In the second iteration, we perform swapping upto the n-2<sup>th</sup> index. At this point, the highest number is bubbled up at the <code>n-2</code><sup>th</sup> index.</p><p>This iteration happens n times and for each iteration the length of the unsorted list goes down by one.</p><p>n + (n-1) + (n-2) + …. + 1 </p><p>Again it boils to simple math, “Sum of first n natural numbers” = (n*(n+1))/2 = (n<sup>2</sup> + n) / 2</p><p>Now omitting the constants and lower degree, we arrive at the time complexity.</p><p><strong>O(n<sup>2</sup>)</strong></p><h4 id="Space-Complexity"><a href="#Space-Complexity" class="headerlink" title="Space Complexity"></a>Space Complexity</h4><p>This is easy to figure out because we are not allocating any new structures during the process. We are just doing a bunch of in-memory swaps.</p><p>So, <strong>O(1)</strong></p><h4 id="Step-by-step-code-1"><a href="#Step-by-step-code-1" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>First, we will handle for the case where array is of size 0 or 1. In that case, we just need to return back the same array.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, we will try to get the “bubble up” code done. This part of the code will just bubble the highest element. Once we have this logic, we just perform the logic for n times to bubble up all the elements.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= (<span class="built_in">len</span>(nums)<span class="number">-2</span>); i++ &#123;</span><br><span class="line">    <span class="keyword">if</span> nums[i] &gt; nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">        nums[i], nums[i+<span class="number">1</span>] = nums[i+<span class="number">1</span>], nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cool, we will wrap up the bubble up code with a loop running n times.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; <span class="built_in">len</span>(nums); n++ &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= (<span class="built_in">len</span>(nums)<span class="number">-2</span>); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &gt; nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">            nums[i], nums[i+<span class="number">1</span>] = nums[i+<span class="number">1</span>], nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That’s it, we should now have nums sorted in-memory. We can try to do one optimisation here. Since we bubble up the highest element, we can avoid trying the swapping logic on already bubbled up values. So, instead of iterating up to <code>len(nums)-2</code> index, we will iterate up to <code>(len(nums)-2)-n)</code> index, so that we avoid the index of already bubbled up values.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; <span class="built_in">len</span>(nums); n++ &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= ((<span class="built_in">len</span>(nums)<span class="number">-2</span>)-n) ; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &gt; nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">            nums[i], nums[i+<span class="number">1</span>] = nums[i+<span class="number">1</span>], nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Full-code-1"><a href="#Full-code-1" class="headerlink" title="Full code"></a>Full code</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; <span class="built_in">len</span>(nums); n++ &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= ((<span class="built_in">len</span>(nums)<span class="number">-2</span>)-n) ; i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">                nums[i], nums[i+<span class="number">1</span>] = nums[i+<span class="number">1</span>], nums[i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources-1"><a href="#Resources-1" class="headerlink" title="Resources"></a>Resources</h4><ul><li><a href="https://www.youtube.com/watch?v=6Gv8vg0kcHc" target="_blank" rel="noopener">Hackerrank Youtube</a></li></ul><h3 id="Insertion-sort"><a href="#Insertion-sort" class="headerlink" title="Insertion sort"></a>Insertion sort</h3><p>At first, it felt similar to selection sort and made me wonder what actually is the difference between them.</p><p>I would say that insertion sort is little bit intelligent than both of the above algorithms: selection sort and bubble sort. This is because when we feed an already sorted array or an <em>almost</em> sorted array to those algorithms, they don’t understand that it is an already/almost sorted array and run for O(n<sup>2</sup>) time, no matter what.</p><p>But in that case, insertion sort seem to run just for O(n) time. <a href="https://www.youtube.com/watch?v=eTvQIbB-AuE" target="_blank" rel="noopener">This video</a> gave an example of where we might get an already/almost sorted database: think of a database where keys are already sorted.</p><h4 id="Intuition-2"><a href="#Intuition-2" class="headerlink" title="Intuition"></a>Intuition</h4><p>Given an array, consider the first element to be sorted already. Start from the next element and <em>insert</em> it at the right position in the sorted array. If the element is already in the right position of the sorted array, we just move to the next position.</p><p>(I recommend you to watch the video resources below to get more idea about this technique)</p><h4 id="Time-complexity"><a href="#Time-complexity" class="headerlink" title="Time complexity"></a>Time complexity</h4><p>Worst and Average case: O(n<sup>2</sup>) because it would take (n(n+1))/2 swaps in these cases.</p><p>Best case: When the array is already sorted, insertion sort just takes O(n) times. If you compare this with selection sort and bubble sort, they both take O(n<sup>2</sup>). Hence insertion sort is a better choice.</p><h4 id="Space-complexity-1"><a href="#Space-complexity-1" class="headerlink" title="Space complexity"></a>Space complexity</h4><p>Swaps are done in-place.</p><p>So <strong>O(n)</strong></p><h4 id="Step-by-step-code-2"><a href="#Step-by-step-code-2" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>First we start with the second item in the array.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">1</span> ; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">    <span class="comment">// take i-th element and insert it in the right position of the sorted sub-array</span></span><br><span class="line">    <span class="comment">// and index in sorted sub-array obeys 0 &lt;= idx &lt; i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, we just insert the i-th element at the right place of the array.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">1</span> ; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">    <span class="keyword">for</span> j := i; (j &gt; <span class="number">0</span>) &amp;&amp; (nums[j] &lt; nums[j<span class="number">-1</span>]); j-- &#123;</span><br><span class="line">        nums[j], nums[j<span class="number">-1</span>] = nums[j<span class="number">-1</span>], nums[j]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Full-code-2"><a href="#Full-code-2" class="headerlink" title="Full code"></a>Full code</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span> ; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := i; (j &gt; <span class="number">0</span>) &amp;&amp; (nums[j] &lt; nums[j<span class="number">-1</span>]); j-- &#123;</span><br><span class="line">            nums[j], nums[j<span class="number">-1</span>] = nums[j<span class="number">-1</span>], nums[j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources-2"><a href="#Resources-2" class="headerlink" title="Resources"></a>Resources</h4><ul><li><a href="https://www.youtube.com/watch?v=O0VbBkUvriI" target="_blank" rel="noopener">CS50 Insertion sort</a></li><li>:star: <a href="https://www.youtube.com/watch?v=eTvQIbB-AuE" target="_blank" rel="noopener">San Diego State University - Rob Edwards - Insertion Sort</a></li><li><a href="https://en.wikipedia.org/wiki/Insertion_sort" target="_blank" rel="noopener">Insertion Sort Wikipedia</a></li></ul><h3 id="Merge-sort"><a href="#Merge-sort" class="headerlink" title="Merge sort"></a>Merge sort</h3><p>Merge sort is a good example for divide and conquer algorithm. It is easy to solve this problem by thinking in recursion. To give a mental model of what a merge sort looks like, I am going to use a nice picture that I found in <a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">Wikipedia</a></p><p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e6/Merge_sort_algorithm_diagram.svg" alt="mergesort"></p><p>Found this insight in <a href="http://www.algorist.com/" target="_blank" rel="noopener">The Algorithm Design Manual book</a>,</p><blockquote><p>Mergesort is a great algorithm for sorting linked lists, because it does not rely on random access to elements as does heapsort or quicksort.</p></blockquote><h4 id="Intution"><a href="#Intution" class="headerlink" title="Intution"></a>Intution</h4><p>Split the array to be sorted into two, sort those individually, and merge them back together. Repeatedly apply this on the divided arrays. When the divided array has only one element, it is already sorted. (That’s the point where we stop splitting and merging back starts!)</p><h4 id="Time-complexity-1"><a href="#Time-complexity-1" class="headerlink" title="Time complexity"></a>Time complexity</h4><p>Recommending the <a href="https://youtu.be/Kg4bqzAqRBM?t=1487" target="_blank" rel="noopener">MIT 6.006 Merge Sort video</a> to figure out how this is done.</p><p>At each level of splitted arrays, we access <code>n</code> items and we would have a total of <code>log n</code> levels. Hence, time complexity is <strong>O(n log n)</strong></p><h4 id="Space-complexity-2"><a href="#Space-complexity-2" class="headerlink" title="Space complexity"></a>Space complexity</h4><p>I tried implementing merge sort with the help of “Top Down Split Merge” + “Two queues” like mentioned in <a href="http://www.algorist.com/" target="_blank" rel="noopener">The Algorithm Design Manual book</a>. I think the space for this method is also <strong>O(n log n)</strong>.</p><p>But if we follow the algorithm where we use a temporary array instead of allocating two queues everytime , we can get an <strong>O(n)</strong> space complexity.</p><h4 id="Step-by-step-code-3"><a href="#Step-by-step-code-3" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>We will try to code the temp array method here! Two queue method is relatively easy. You should try doing the two queue method first if you are not sure. (I have provided the two queue technique in the full code section below.</p><p>Prepare for a recursive ride! haha. Merge sort has two parts: Split and Merge (remember the diagram).</p><p>first, we make a temporary array (which we use to merge) and call merge sort procedure from index <code>0</code> to <code>n-1</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    temp := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">    ms(nums, temp, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>ms</code> call does the split. then we call a merge function to perform the merge.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ms</span><span class="params">(nums, temp []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">        mid := (low + high) / <span class="number">2</span></span><br><span class="line">        ms(nums, temp, low, mid)</span><br><span class="line">        ms(nums, temp, mid+<span class="number">1</span>, high)</span><br><span class="line">        merge(nums, temp, low, mid, high)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now the merge part:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(nums, temp []<span class="keyword">int</span>, low, mid, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    i1 := low</span><br><span class="line">    i2 := mid+<span class="number">1</span></span><br><span class="line">    i := low</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i1 &lt;= mid) &amp;&amp; (i2 &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i1] &lt;= nums[i2] &#123;</span><br><span class="line">            temp[i] = nums[i1]</span><br><span class="line">            i1++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[i] = nums[i2]</span><br><span class="line">            i2++</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i1 &lt;= mid &#123;</span><br><span class="line">        temp[i] = nums[i1]</span><br><span class="line">        i++</span><br><span class="line">        i1++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i2 &lt;= high &#123;</span><br><span class="line">        temp[i] = nums[i2]</span><br><span class="line">        i++</span><br><span class="line">        i2++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := low; i &lt;= high; i++ &#123;</span><br><span class="line">        nums[i] = temp[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The thing that I miss out is the last section of the merge where we copy the temp array to the source array.</p><h4 id="Full-code-3"><a href="#Full-code-3" class="headerlink" title="Full code"></a>Full code</h4><h5 id="Two-queues"><a href="#Two-queues" class="headerlink" title="Two queues"></a>Two queues</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    ms(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ms</span><span class="params">(nums []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">        mid := (low + high) / <span class="number">2</span></span><br><span class="line">        ms(nums, low, mid)</span><br><span class="line">        ms(nums, mid+<span class="number">1</span>, high)</span><br><span class="line">        merge(nums, low, mid, high)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Queue <span class="keyword">struct</span> &#123;</span><br><span class="line">    qList *list.List</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewQueue</span><span class="params">()</span> *<span class="title">Queue</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Queue&#123;</span><br><span class="line">        qList: list.New(),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Enqueue</span><span class="params">(item <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    q.qList.PushBack(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Dequeue</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> q.qList.Remove(q.qList.Front()).(<span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Empty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> q.qList.Len() == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Top</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> q.qList.Front().Value.(<span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(nums []<span class="keyword">int</span>, low, mid, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> q1 = NewQueue()</span><br><span class="line">    <span class="keyword">var</span> q2 = NewQueue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := low; i &lt;= mid; i++ &#123;</span><br><span class="line">        q1.Enqueue(nums[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := mid+<span class="number">1</span>; i &lt;= high; i++ &#123;</span><br><span class="line">        q2.Enqueue(nums[i])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    i := low</span><br><span class="line">    <span class="keyword">for</span> !q1.Empty() &amp;&amp; !q2.Empty() &#123;</span><br><span class="line">        <span class="keyword">if</span> q1.Top() &lt; q2.Top() &#123;</span><br><span class="line">            nums[i] = q1.Dequeue()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums[i] = q2.Dequeue()</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> !q1.Empty() &#123;</span><br><span class="line">        nums[i] = q1.Dequeue()</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> !q2.Empty() &#123;</span><br><span class="line">        nums[i] = q2.Dequeue()</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Temporary-array"><a href="#Temporary-array" class="headerlink" title="Temporary array"></a>Temporary array</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    temp := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">    ms(nums, temp, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ms</span><span class="params">(nums, temp []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">        mid := (low + high) / <span class="number">2</span></span><br><span class="line">        ms(nums, temp, low, mid)</span><br><span class="line">        ms(nums, temp, mid+<span class="number">1</span>, high)</span><br><span class="line">        merge(nums, temp, low, mid, high)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(nums, temp []<span class="keyword">int</span>, low, mid, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    i1 := low</span><br><span class="line">    i2 := mid+<span class="number">1</span></span><br><span class="line">    i := low</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i1 &lt;= mid) &amp;&amp; (i2 &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i1] &lt;= nums[i2] &#123;</span><br><span class="line">            temp[i] = nums[i1]</span><br><span class="line">            i1++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[i] = nums[i2]</span><br><span class="line">            i2++</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i1 &lt;= mid &#123;</span><br><span class="line">        temp[i] = nums[i1]</span><br><span class="line">        i++</span><br><span class="line">        i1++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i2 &lt;= high &#123;</span><br><span class="line">        temp[i] = nums[i2]</span><br><span class="line">        i++</span><br><span class="line">        i2++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := low; i &lt;= high; i++ &#123;</span><br><span class="line">        nums[i] = temp[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources-3"><a href="#Resources-3" class="headerlink" title="Resources"></a>Resources</h4><ul><li><a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">Merge Sort Wikipedia</a></li><li><a href="https://youtu.be/Kg4bqzAqRBM?t=1487" target="_blank" rel="noopener">MIT 6.006 Merge Sort</a></li><li><a href="http://www.algorist.com/" target="_blank" rel="noopener">The Algorithm Design Manual Book</a></li><li>:star: <a href="https://www.youtube.com/watch?v=jr10xrAFSEg" target="_blank" rel="noopener">San Diego State University - Rob Edwards - Merge Sort</a> (Despite the black screen problem in the video, I still think the video did a good job of explaining the merge part)</li></ul><h3 id="Quick-sort"><a href="#Quick-sort" class="headerlink" title="Quick sort"></a>Quick sort</h3><p>Quicksort is one of the sorting algorithms that I have noticed in practice often. For example, I remember noticing <code>QSORT</code> while reading <a href="https://github.com/git/git/search?q=QSORT&amp;unscoped_q=QSORT" target="_blank" rel="noopener">git’s source code</a> on how git suggests commands when we make a mistake while typing a git command.</p><p>Also, I have read that quick sort seems to be a choice for standard library implementation of sorting in some programming languages. Example: <a href="https://golang.org/src/sort/sort.go?s=8174:8200#L183" target="_blank" rel="noopener">Go’s sort package</a></p><p>There are different flavors of qsort and one needs to consider the tradeoffs to choose the one that suits their needs. For example, <a href="https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme" target="_blank" rel="noopener">Lomuto Partition Scheme</a> chooses the pivot point as the last element of the array and performs qsort, whereas </p><h4 id="Intuition-3"><a href="#Intuition-3" class="headerlink" title="Intuition"></a>Intuition</h4><p>Choose a pivot point (probably the last element of the array) and partition lesser and higher elements based on the pivot. Perform the pivot and partition logic recursively for the partitions.</p><h4 id="Time-complexity-2"><a href="#Time-complexity-2" class="headerlink" title="Time complexity"></a>Time complexity</h4><p>If the pivot point we choose is approximately the middle of the sorted list, then the list is divided equally (like merge sort). So quick sort has a time complexity of <strong>O(n log n)</strong> for the best and average case.</p><p>For the worst case, (where we choose the pivot point as the first or last element of the sorted array as the first pivot), the algorithm performs O(n<sup>2</sup>).</p><h4 id="Space-complexity-3"><a href="#Space-complexity-3" class="headerlink" title="Space complexity"></a>Space complexity</h4><p>For the best and average case, the space complexity would be <strong>(log n)</strong> (because of the call stack used for recursion). In the worst case, that would become <strong>O(n)</strong></p><h4 id="Step-by-step-code-4"><a href="#Step-by-step-code-4" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>First, we write the recursive logic of partition and qsort.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qsort</span><span class="params">(nums []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">        p := part(nums, low, high)</span><br><span class="line">        qsort(nums, low, p<span class="number">-1</span>)</span><br><span class="line">        qsort(nums, p+<span class="number">1</span>, high)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, we implement the partitioning logic. I am using the <a href="https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme" target="_blank" rel="noopener">Lomuto Partition Scheme</a> here.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">part</span><span class="params">(nums []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    pivot := nums[high]</span><br><span class="line">    i := low</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j := low; j &lt;= high; j++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[j] &lt; pivot &#123;</span><br><span class="line">            nums[j], nums[i] = nums[i], nums[j]</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nums[i], nums[high] = nums[high], nums[i]</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Full-code-4"><a href="#Full-code-4" class="headerlink" title="Full code"></a>Full code</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    qsort(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qsort</span><span class="params">(nums []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">        p := part(nums, low, high)</span><br><span class="line">        qsort(nums, low, p<span class="number">-1</span>)</span><br><span class="line">        qsort(nums, p+<span class="number">1</span>, high)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">part</span><span class="params">(nums []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    pivot := nums[high]</span><br><span class="line">    i := low</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j := low; j &lt;= high; j++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[j] &lt; pivot &#123;</span><br><span class="line">            nums[j], nums[i] = nums[i], nums[j]</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nums[i], nums[high] = nums[high], nums[i]</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources-4"><a href="#Resources-4" class="headerlink" title="Resources"></a>Resources</h4><ul><li>:star: <a href="https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme" target="_blank" rel="noopener">Quick sort Wikipedia</a></li><li><a href="https://www.youtube.com/watch?v=ZHVk2blR45Q" target="_blank" rel="noopener">San Diego State University - Rob Edwards - Quick sort</a></li><li><a href="https://www.youtube.com/watch?v=auclbmnm4iA" target="_blank" rel="noopener">San Diego State University - Rob Edwards - Quick sort worst case</a></li><li><a href="https://www.youtube.com/watch?v=4IE3wIXFVPc" target="_blank" rel="noopener">San Diego State University - Rob Edwards - Quicksort code</a></li></ul><h3 id="Heap-sort"><a href="#Heap-sort" class="headerlink" title="Heap sort"></a>Heap sort</h3><p>The most important idea behind heap sort is to first build a heap out of the given array. A heap is just a common way of implementing a priority queue. A priority queue is just a data-structure, where we could request for an element with either the largest or smallest priority at a given point of time.</p><p>With that Intuition, the implementation could be pretty simple. Consider a language with a priority queue implementation built into the standard library like C++. In this case, we could write something like,</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sortArray(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="comment">// build a min-heap</span></span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, <span class="built_in">std</span>::greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">            q.push(n);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            result.push_back(q.top());</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>We just create a min-heap and extract the minimum element each time and append it to a list. While this approach involves allocating space, there is a way to achieve this in-memory if the input is an array.</p><h4 id="Intuition-4"><a href="#Intuition-4" class="headerlink" title="Intuition"></a>Intuition</h4><p>Construct a max-heap and pick the largest element using it, one at a time to fill it at the end of the sorted list.</p><h4 id="Time-complexity-3"><a href="#Time-complexity-3" class="headerlink" title="Time complexity"></a>Time complexity</h4><p>I recommend watching the <a href="https://www.youtube.com/watch?v=B7hVxCmfPtM" target="_blank" rel="noopener">MIT 6.006 Heaps and Heap sort</a> lecture for deriving the time complexity. It seems like building a heap from scratch is O(n) and extracting a min/max element seems to be O(log n) since we extract the min/max n times, the time complexity would be <strong>O(n log n)</strong></p><h4 id="Space-complexity-4"><a href="#Space-complexity-4" class="headerlink" title="Space complexity"></a>Space complexity</h4><p>A naive implementation of constructing a priority queue from scratch (like with standard library code or any other library) might lead to O(n).</p><p>But we will be using a binary heap (just represented in-place in the given array), there is no extra space allocated. So the space complexity would be <strong>O(1)</strong>.</p><p>This might seem to be the best algorithm so far, but there should be something that we are losing, right? It is the stableness. Seems like heap sort is not stable.</p><h4 id="Step-by-step-code-5"><a href="#Step-by-step-code-5" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>We need to learn and remember about a few array-tree math before trying to code it. First binary heaps are array representation of a binary tree.</p><p>[0 1 2 3 4]</p><p>Value at 0 is the root node. values at 1 and 2 are children of the root node (0). The children of 1 would be 3 and 4.</p><p>This leads to arriving at the following formulae.</p><p>the left child of a node at index i is given by <code>(2 * i) + 1</code> and right child of a node at index i is given by <code>(2 * i) + 2</code>.</p><p>If there are n nodes, <code>(n/2) - 1</code>th index will give the node whose children will all be leaf nodes. This is a very useful insight that I got from <a href="https://www.youtube.com/watch?v=B7hVxCmfPtM" target="_blank" rel="noopener">MIT 6.006 Heaps and Heap sort</a>. This means that, since its children are leaf nodes, they already satisfy the heap property and it might be the right place to start recursion procedure for building up the heap from bottom up.</p><p>Ok, let’s start writing this! First, we call the <code>heapify</code> procedure from <code>(n/2)-1</code>th index to <code>0</code>th index</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := (<span class="built_in">len</span>(nums)/<span class="number">2</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">    heapify(nums, <span class="built_in">len</span>(nums), i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With this, the root node is guaranteed to have the largest element. So, we start filling up the array from back by extracting the max element. Every time we extract the max element, the heap becomes dirty. So we could just call heapify for only the unsorted sub-array at the beginning.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="built_in">len</span>(nums)<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">    nums[i], nums[<span class="number">0</span>] = nums[<span class="number">0</span>], nums[i]</span><br><span class="line">    heapify(nums, i, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ok, now we start implementing the heapify function.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">heapify</span><span class="params">(nums []<span class="keyword">int</span>, n, idx <span class="keyword">int</span>)</span></span> &#123;    </span><br><span class="line">    largest := idx</span><br><span class="line">    left := (<span class="number">2</span> * idx) + <span class="number">1</span></span><br><span class="line">    right := (<span class="number">2</span> * idx) + <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> left &lt; n &amp;&amp; nums[largest] &lt; nums[left] &#123;</span><br><span class="line">        largest = left</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> right &lt; n &amp;&amp; nums[largest] &lt; nums[right] &#123;</span><br><span class="line">        largest = right</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> largest != idx &#123;</span><br><span class="line">        nums[idx], nums[largest] = nums[largest], nums[idx]</span><br><span class="line">        </span><br><span class="line">        heapify(nums, n, largest)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Full-code-5"><a href="#Full-code-5" class="headerlink" title="Full code"></a>Full code</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := (<span class="built_in">len</span>(nums)/<span class="number">2</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        heapify(nums, <span class="built_in">len</span>(nums), i)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(nums)<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        nums[i], nums[<span class="number">0</span>] = nums[<span class="number">0</span>], nums[i]</span><br><span class="line">        heapify(nums, i, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">heapify</span><span class="params">(nums []<span class="keyword">int</span>, n, idx <span class="keyword">int</span>)</span></span> &#123;    </span><br><span class="line">    largest := idx</span><br><span class="line">    left := (<span class="number">2</span> * idx) + <span class="number">1</span></span><br><span class="line">    right := (<span class="number">2</span> * idx) + <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> left &lt; n &amp;&amp; nums[largest] &lt; nums[left] &#123;</span><br><span class="line">        largest = left</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> right &lt; n &amp;&amp; nums[largest] &lt; nums[right] &#123;</span><br><span class="line">        largest = right</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> largest != idx &#123;</span><br><span class="line">        nums[idx], nums[largest] = nums[largest], nums[idx]</span><br><span class="line">        </span><br><span class="line">        heapify(nums, n, largest)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources-5"><a href="#Resources-5" class="headerlink" title="Resources"></a>Resources</h4><ul><li><a href="https://www.youtube.com/watch?v=B7hVxCmfPtM" target="_blank" rel="noopener">MIT 6.006 Heaps and Heap sort</a></li><li><a href="https://www.geeksforgeeks.org/heap-sort/" target="_blank" rel="noopener">GeeksForGeeks solution</a> (this closely follows the ideas behind the MIT 6.006 lecture)</li></ul><h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p>Leaving the space for this blog post to get updated. Some interesting sorting algorithms to watch out for are</p><ul><li>BST sort</li><li>AVL sort</li><li>Shell sort</li><li>Counting sort</li><li>Radix sort</li></ul><p>( you <a href="https://twitter.com/scriptnull" target="_blank" rel="noopener">tell me</a> )</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I kind of procrastinate over starting to learn about sorting whenever I am preparing for interviews. Mainly because we need to memorize t
      
    
    </summary>
    
    
      <category term="programming" scheme="https://vishnubharathi.codes/tags/programming/"/>
    
      <category term="data structures" scheme="https://vishnubharathi.codes/tags/data-structures/"/>
    
      <category term="algorithms" scheme="https://vishnubharathi.codes/tags/algorithms/"/>
    
      <category term="tech interviews" scheme="https://vishnubharathi.codes/tags/tech-interviews/"/>
    
      <category term="go" scheme="https://vishnubharathi.codes/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Paper notes: Key-Value Storage Engines</title>
    <link href="https://vishnubharathi.codes/blog/paper-notes-key-value-storage-engines/"/>
    <id>https://vishnubharathi.codes/blog/paper-notes-key-value-storage-engines/</id>
    <published>2020-08-11T03:18:16.000Z</published>
    <updated>2020-08-16T18:42:20.314Z</updated>
    
    <content type="html"><![CDATA[<p>These are my notes and thoughts that came up while reading this research paper called <a href="https://stratos.seas.harvard.edu/files/stratos/files/keyvaluestorageengines.pdf" target="_blank" rel="noopener">Key-Value Storage Engines</a>.</p><p>I first came across this paper in <a href="https://tikv-wg.slack.com/archives/CGQ6VFATU/p1589836557016600" target="_blank" rel="noopener">TiKV’s slack</a>. I have been wanting to read it ever since! (and pulled it off early morning yesterday). I think the paper is a short one compared to any of the papers that I have read. It was published recently and so it contains notes about the latest key-value stores.</p><blockquote><p>we survey the state-of-the-art approaches on how the core storage engine of a key-value store system is designed.</p></blockquote><p>On the side: I was wondering how to discover new research papers to read about in topics of interest. My current interest is in databases (more specifically key-value stores and hybrid stores). Seems like one efficient way is to take on an introductory paper (like the one we are going to discuss here), read it, and see how it aligns with the goals. If you got what you want, go and check the other works of the author(s) of the paper. I did the same for this and ended up amazed by the work <a href="https://stratos.seas.harvard.edu/" target="_blank" rel="noopener">the authors</a> of this paper.</p><p>Speaking of authors, let me put up the ACM reference format here to give credit to the authors and the paper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stratos Idreos and Mark Callaghan. 2020. Key-Value Storage En-</span><br><span class="line">gines. In Proceedings of the 2020 ACM SIGMOD International Con-</span><br><span class="line">ference on Management of Data (SIGMOD’20), June 14–19, 2020,</span><br><span class="line">Portland, OR, USA. ACM, New York, NY, USA, 6 pages. https://doi.</span><br><span class="line">org/10.1145/3318464.3383133</span><br></pre></td></tr></table></figure><h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><p>The main contents of the paper are divided into three parts</p><ol><li>Key-value storage engines and applications</li><li>State of art engine design</li><li>Self-Designing NoSQL storage</li></ol><h2 id="Key-value-storage-engines-and-applications"><a href="#Key-value-storage-engines-and-applications" class="headerlink" title="Key-value storage engines and applications"></a>Key-value storage engines and applications</h2><p>Key-value stores could be used in a lot of places.</p><blockquote><p>graph processing in social media [9, 14], to event log processing in cybersecurity [15], application data caching [51], NoSQL stores [57], flash translation layer design [21], time-series management [42, 43], and online transaction processing [26].</p></blockquote><p>One interesting take in this section: <strong>Key Value Stores are used in SQL systems</strong></p><p>I have mostly viewed tables in SQL systems as “tables” (you get me!). This paper lays the base work of thinking about SQL tables in terms of key-value stores.</p><blockquote><p>FoundationDB is a core part of Snowflake, while My-Rocks integrates RockDB in MySQL as its back-end storage.</p></blockquote><p>It seems like modern databases seem to use a distributed key-value store as a building block. I have noticed this pattern recently in “TiKV being used as the underlying store as TiDB”.</p><p>Apart from the applications, the section introduces properties like read, update, and memory amplification. Each key-value store has different properties and it is up to the users to choose a store based on their workloads.</p><p>By reading this section, I mostly understood this:</p><blockquote><p>There is no Perfect Design.</p></blockquote><p>If we are trying to build a key-value store from scratch, we must first understand and accept the trade-offs. Ask questions and arrive at answers like</p><p>Q: What kind of workload will be suited the most for the store?</p><p>A: It suits the most for frequent reads and in-frequent bulk inserts.</p><p>An example mentioned in this paper is <a href="https://github.com/spotify/sparkey" target="_blank" rel="noopener">sparkey</a>, a key-value storage library from Spotify which does that tradeoff.</p><h2 id="State-of-art-engine-design"><a href="#State-of-art-engine-design" class="headerlink" title="State of art engine design"></a>State of art engine design</h2><p>Before this paper, I usually took the time to think about the outer-most layers of key-value stores like the communication protocols, how are we going to store data in-memory. This paper jumps right into the core - how data is stored on the disk? How data is first stored in memory and moved to disk afterward?</p><h3 id="Big-three"><a href="#Big-three" class="headerlink" title="Big three"></a>Big three</h3><p>The paper introduces about three data-structures to be at the core of the state of art storage designs.</p><ol><li>B+ tree</li><li>Log-structures merge-tree (LSM tree)</li><li>Log and Index (LSH table)</li></ol><p>That’s it! If I just learn about them, then I should have a basic idea about what’s going on in most databases.</p><h4 id="B-tree"><a href="#B-tree" class="headerlink" title="B+ tree"></a>B+ tree</h4><blockquote><p>B+ tree is the backbone design of the BerkeleyDB key-value store [53], now owned by Oracle, and the backbone of the WiredTiger key-value store [66], now used as the primary storage engine in MongoDB [52]. FoundationDB [8] also relies on a B+ tree.</p></blockquote><h4 id="LSM-tree"><a href="#LSM-tree" class="headerlink" title="LSM tree"></a>LSM tree</h4><p>This is usually augmented with some-other things like:</p><blockquote><p>In-memory structures such as Bloom filters, fence pointers and Tries help filter queries to avoid disk I/O [19, 67].</p></blockquote><p>In practice: </p><blockquote><p> This design has been adopted in numerous industrial settings including LevelDB [30] and BigTable [17] at Google, RocksDB [27] at Facebook, Cassandra [45], HBase [33] and Accumulo [7] at Apache, Voldemort [47] at LinkedIn, Dynamo [24] at Amazon, WiredTiger [66] at MongoDB, and bLSM [61] and cLSM [29] at Yahoo, and more designs in research such as SlimDB [58], WiscKey [49], Monkey [19, 20], Dostoevsky [22], and LSM-bush [23].</p></blockquote><h4 id="Log-and-index"><a href="#Log-and-index" class="headerlink" title="Log and index"></a>Log and index</h4><blockquote><p>This Log and Index design is employed by BitCask [62] at Riak, Sparkey [64] at Spotify, FASTER [16] at Microsoft, and many more systems in research [2, 46, 59].</p></blockquote><p>I guess that the concrete implementation of this technique is called Log-Structured Hash tables.</p><blockquote><p>Most systems use a hash table as the index over the log.</p></blockquote><h3 id="Design-Descisions"><a href="#Design-Descisions" class="headerlink" title="Design Descisions"></a>Design Descisions</h3><p>The remainder of this section deals with various design considerations that we need to be aware of while building a key-value store. </p><ol><li>Memory management</li><li>Compactions and Splits</li><li>Concurrency control</li><li>Time travel queries</li><li>CPU vs I/O Cost</li><li>Adaptive Indexing and layouts</li></ol><h4 id="Memory-management"><a href="#Memory-management" class="headerlink" title="Memory management"></a>Memory management</h4><blockquote><p>One of the most critical decisions in key-value stores is how to distribute the available bits across the various in-memory components. For example, in an LSM-tree like design, it is common to have numerous Bloom-filters in memory and other helper structures to help skip disk reads.</p></blockquote><h4 id="Compaction-and-Splits"><a href="#Compaction-and-Splits" class="headerlink" title="Compaction and Splits"></a>Compaction and Splits</h4><blockquote><p>Depending on the exact design a NoSQL engine will need to frequently reorganize data such as to maintain certain performance invariants. For example, an LSM-tree like design needs to perform compactions as new data arrives such as to maintain order and remove past invalid values that have been updated out of place.</p></blockquote><p>Compactions can happen in two ways: in-place and out-of-place compactions. Out-of-place compaction allows queries to be served while the compaction is happening. The way it does it is by having a duplicated in-memory copy from which the query could be served while the actual data is undergoing compaction. For in-place compactions, the query will block.</p><p>So, we know one new thing about LSM trees from this section: They don’t block queries while undergoing compactions.</p><h4 id="Concurrency-control"><a href="#Concurrency-control" class="headerlink" title="Concurrency control"></a>Concurrency control</h4><blockquote><p>LSM-trees are inherently more able to process concurrent requests compared to a typical B-tree design because they update data out of place. Similarly, a log-structured hash table design goes a step further by performing much fewer compactions and thus creating fewer conflicts for reads and writes (at the expense of read cost). B-tree designs can also adopt an out of place approach by stacking updates in leaf nodes like BW-tree or across any node like Bε tree.)</p></blockquote><h4 id="Time-travel-queries"><a href="#Time-travel-queries" class="headerlink" title="Time travel queries"></a>Time travel queries</h4><p>Key-value stores might be designed to store timestamps along with key-value pairs. This choice opens up the possibility for implementation of features like</p><ol><li>Multiple versions of the same key could be stored</li><li>TTL (Ability to automatically remove the key-value pair after certain amount of time)</li></ol><blockquote><p>if timestamps are stored inline with the base date, then this can lead to significant overheads for all queries (since timestamps will need to be read along with the base data).</p></blockquote><h4 id="CPU-vs-I-O-Cost"><a href="#CPU-vs-I-O-Cost" class="headerlink" title="CPU vs I/O Cost"></a>CPU vs I/O Cost</h4><blockquote><p>using compression leads to increased CPU costs and the exact form of compression used defines the balance of I/O saved versus CPU sacrificed.</p></blockquote><p>So if we are trying to build a database, we need to decide whether if we are going to support compression of data and have to get an idea about various types of compression.</p><h4 id="Adaptive-Indexing-and-Layouts"><a href="#Adaptive-Indexing-and-Layouts" class="headerlink" title="Adaptive Indexing and Layouts"></a>Adaptive Indexing and Layouts</h4><blockquote><p>Adaptive indexing [36] is a lightweight approach in self-tuning databases. Adaptive indexing addresses the limitations of offline and online indexing for dynamic workloads; it reacts to workload changes by building or refining indices partially and incrementally as part of query processing.</p></blockquote><p>Before going on to adaptive indexing, we need to think about just “indexing”. How are we going to store the index of keys in-memory? What if there are a lot of keys? Is it possible to index only a partial set of keys and swap out the partial to load the parts that we need? Things like these!</p><p>Now we are allowed to get excited about newer research on adaptive indexing - what if the key-value store automatically figures out what to index based on the access patterns of the workload? - exciting, huh?</p><h2 id="Self-Designing-NoSQL-storage"><a href="#Self-Designing-NoSQL-storage" class="headerlink" title="Self-Designing NoSQL storage"></a>Self-Designing NoSQL storage</h2><p>This section of the paper mostly deals with the special interest of the authors - Self-tuning databases. You can read up this section of the paper if you are interested. I didn’t understand much, but in simple terms, they are trying to describe data systems that self-tune it’s configuration <em>near instantly</em> (ah, interesting!) on live workloads.</p><p>That leads me to a project written by one of the authors of this paper called CrimsonDB - <a href="https://demosubmitter.github.io/" target="_blank" rel="noopener">https://demosubmitter.github.io/</a></p><p>If this sounds exciting, the next step for this is exploring the <a href="https://stratos.seas.harvard.edu/files/stratos/files/datacalculator.pdf" target="_blank" rel="noopener">Data Calculator</a> paper which gives an idea about “how we can synthesize more data structures than stars on the sky to pick the right one for a given problem”.</p><h2 id="Questions-to-work-on"><a href="#Questions-to-work-on" class="headerlink" title="Questions to work on"></a>Questions to work on</h2><p>Arrived at a list of questions by reading this paper: </p><p>(I believe each one has the potential to become a blog post on its own)</p><ol><li>What is a B+ tree?</li><li>What is an LSM tree?</li><li>What is an LSH table?</li><li>What is a B<sup>ε</sup> tree?</li><li>What is a BW-tree?</li><li>What is a Bloom filter? (probabilistic data structure)</li><li>What is a fence pointer? (I think it is something that supports an LSM tree)</li><li>What other ways of storing timestamps for KV pairs are there? (apart from storing it inline with the kv-pair itself)</li><li>What kind of compression techniques are employed by various key-value stores?</li></ol><p>~ ~ ~</p><p>If you want to discuss about any of the above things, feel free to <a href="https://twitter.com/scriptnull" target="_blank" rel="noopener">say hi</a> to me!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;These are my notes and thoughts that came up while reading this research paper called &lt;a href=&quot;https://stratos.seas.harvard.edu/files/str
      
    
    </summary>
    
    
      <category term="research papers" scheme="https://vishnubharathi.codes/tags/research-papers/"/>
    
      <category term="recurse center" scheme="https://vishnubharathi.codes/tags/recurse-center/"/>
    
      <category term="databases" scheme="https://vishnubharathi.codes/tags/databases/"/>
    
  </entry>
  
  <entry>
    <title>Recurse</title>
    <link href="https://vishnubharathi.codes/blog/recurse/"/>
    <id>https://vishnubharathi.codes/blog/recurse/</id>
    <published>2020-08-08T23:09:39.000Z</published>
    <updated>2020-08-16T18:42:20.314Z</updated>
    
    <content type="html"><![CDATA[<p>I am happy to announce that I got accepted into <a href="https://www.recurse.com/" target="_blank" rel="noopener">The Recurse Center</a> center for the Fall 1 ‘20 batch. It’s quite a life event because attending RC was one of my dreams for about a year and a half now.</p><p>Trying to share a few things about my journey.</p><h2 id="What-is-RC"><a href="#What-is-RC" class="headerlink" title="What is RC?"></a>What is RC?</h2><p>For those who haven’t heard of it yet:</p><blockquote><p>The Recurse Center is a self-directed, community-driven educational retreat for programmers based in New York City and currently operating online.</p></blockquote><p>Retreats happen in batches and the batches run for varying length: Full (12 weeks), Half (6 weeks) and Mini (1 week). It is self-directed, so we pick what to learn during that time. We will be working along-side a <a href="https://www.recurse.com/diversity" target="_blank" rel="noopener">diverse</a> group of people, so there is much to learn from them.</p><p>I won’t steal the fun of knowing about RC for the first time from you! haha, When I heard of RC for the first time - I spent like an hour reading all their contents at <a href="https://www.recurse.com" target="_blank" rel="noopener">https://www.recurse.com</a> - so go ahead and enjoy the link!</p><h2 id="Why-is-it-a-dream"><a href="#Why-is-it-a-dream" class="headerlink" title="Why is it a dream?"></a>Why is it a dream?</h2><p>I mentioned earlier that it has been a dream of mine to attend the RC. Why so?</p><p>RC has a nice application/interview process (you should apply if you are in doubt). Even though I cleared the interviews, there were still uncertainties lurking in, and the odds of me getting a chance to attend it was very low. I will tell you why!</p><p>The first one is financial situations: Had been a software engineer for the past 5 years and always committed to going to work! With the <a href="https://en.wikipedia.org/wiki/Coronavirus_disease_2019" target="_blank" rel="noopener">current pandemic situation</a>, I lost my job 2 months back and got moratorium for EMIs of loan repayment. So the stress about “have to go to work to pay loans” is not there for months. Which means I can do whatever I like to do right now! Just have to make sure that I figure out a way to make money before I spend all the money I have.</p><p>Apart from that, I have very little chances of affording travel + accommodation in the USA. Flight tickets, cost of living there for 12 weeks. Probably I would have to get a loan or sponsorship to be able to afford it or at least have to save up for year(s) to be able to do it! (Just see the conversion rate of INR to USD). Now that the batches are online, it is totally affordable!</p><p>The next uncertainty is a travel visa - I don’t know much about it, because I haven’t traveled much! (know what I have never visited North India itself, haha). In one of my previous jobs, most of my team people flew from Bangalore to Delhi for getting a travel visa to a place for attending the annual meetup of the company, guess what - not a single person got the visa (except the ones who had already visited some countries). I remember reading that Daniel (the creator of curl) has a live timer counting the time since he applied for a visa; if you are wondering, the timer <a href="https://daniel.haxx.se/us-visa.html" target="_blank" rel="noopener">is still running</a>. Since we have people already attend RC from India before, so it is not a complete impossibility but I guess it could still be a roadblock. Now that RC is running online, the visa I need is here - my internet connection, haha.</p><p>Clearing the interview and overcoming all these uncertainties should happen in an aligned timeline. (not trying to scare you off from applying, but these are just some things that I thought might be a problem for me personally. Despite that, I was hoping to attend RC somehow even when they were running only physical batches. Hope is a beautiful thing - have it!)</p><p>So that makes it seem like attending RC is almost a dream for me and as <a href="https://twitter.com/riturajcse" target="_blank" rel="noopener">my friend</a> said over a Whatsapp text</p><blockquote><p>Dreams do come true</p></blockquote><h2 id="First-attempt"><a href="#First-attempt" class="headerlink" title="First attempt"></a>First attempt</h2><p>My first attempt to apply to RC dates back to the end of 2018. I got so excited to apply for it that I started writing a lisp parse ( <a href="https://github.com/scriptnull/yali" target="_blank" rel="noopener">https://github.com/scriptnull/yali</a> ) inspired by a task in their <a href="https://www.recurse.com/pairing-tasks" target="_blank" rel="noopener">pair programming tasks</a>. I had started filling <a href="https://www.recurse.com/apply/retreat" target="_blank" rel="noopener">the written application for RC</a> a couple of times and I would stop right after “Code CracklePop”. When I want to get back to it, life happened - like one of my employers getting acquired by another company and there is no way to take a sabbatical right after it.</p><h2 id="Inspiration"><a href="#Inspiration" class="headerlink" title="Inspiration"></a>Inspiration</h2><p>I should say that two people inspired me a lot to attend the Recurse Center.</p><ul><li><a href="https://jvns.ca/" target="_blank" rel="noopener">Julia Evans</a> : I often end up reading her amazing blog posts and it kind of fostered me to blog more.</li><li><a href="https://andrewkelley.me/" target="_blank" rel="noopener">Andrew Kelley</a> : Reason is these three little letters “Zig”. It was super interesting to see his presentation in RC’s <a href="https://www.recurse.com/events/localhost-andrew-kelley" target="_blank" rel="noopener">localhost</a></li></ul><p>Both of them are alums of RC who have done cool stuff! Apart from that, there is a lot of cool stuff that people (who have attended and are attending) seem to do. I follow those updates usually on twitter and <a href="https://joy.recurse.com/" target="_blank" rel="noopener">Joy of Computing</a>.</p><h2 id="How-I-applied-now"><a href="#How-I-applied-now" class="headerlink" title="How I applied now?"></a>How I applied now?</h2><p>hmm, well after losing my job I was taking that long-needed break and preparing for my next adventure. I was learning and learning most of the time - with the fear of not passing interviews, etc. These are uncertain times and it has been a little rough. I was slowly starting to get out of the fear zone and become productive.</p><p>The thing with me is I don’t usually apply for a lot of jobs. I apply selectively to the jobs that I really like to have because even if it is a rejection it has to mean something and I don’t want to waste the time of the people who are giving an interview chance to me! In these two months, I just applied and attended only one interview. Earlier I blogged about the interview and the <a href="/blog/first-feedback/">feedback</a> I got out of it. I was gradually making my steps to get better by acting on the feedback.</p><p>At the same time, I was trying to explore the latest trends that I haven’t been able to catch up like paying a little visit to the frontend ecosystem - React &amp; Redux. During one such day, <a href="https://twitter.com/theonlynabarun" target="_blank" rel="noopener">Nabarun</a> (we used to work together) messaged me on twitter asking what I am up to these days. I said that I was mostly learning and experimenting with things to figure out if I should be trying out for backend or full-stack roles. Then he said,</p><blockquote><p>It is nice to experiment and identify what one really likes. If you want to experiment more for some time, try Recurse Center. They are doing all cohorts online this year.</p></blockquote><p>It was good to hear it! I was actually thinking of applying to Recurse Center in these 2 months and as usual, wrote CracklePop one more time and never made it to the end, haha. I went on to think about what he told over the next few days and worked on the pair programming task (Database server) over a weekend. Then there I was writing my application for one full Sunday. The next day, I reviewed and submitted my application.</p><h2 id="The-interviews"><a href="#The-interviews" class="headerlink" title="The interviews"></a>The interviews</h2><p>The entire process took up to 2 weeks. The interviewers were super helpful in having a good conversation. The conversational interview was more of a technical chat with a friend. I watched a <a href="https://www.ted.com/playlists/352/talks_to_watch_before_a_job_in" target="_blank" rel="noopener">few TED talks</a> earlier that day to kind of get me into the zone. Because the last time I had a technical interview before that interview, I completely panicked in the middle. So I wanted to improve myself by just talking with new people without any fear or stress. Those videos did help me and I recommend them if you are trying to overcome interview fears.</p><p>For the pair programming interview, I have never pair programmed in a formal setup. It seems like there shouldn’t be a formal setup after all, haha. In my previous workplaces, I have paired with engineers, in a way that we don’t even know that we were pairing - just two people sitting together and discussing and coding a part of microservice. So, with less formal knowledge on pair programming, I decided to just understand what it is about. So the first preparation I did was just reading through this <a href="https://martinfowler.com/articles/on-pair-programming.html" target="_blank" rel="noopener">article on pair programming</a>. During the pair programming interview, the interviewer followed me through the coding and gave helpful feedback at the right spots.</p><p>Overall, the interview experience is smooth and I encourage anyone wanting to apply for it to give it a go!</p><h2 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h2><p>Now that I am attending the RC, you might ask what am I planning to do there? So, I will try to answer that here.</p><p>Get better with distributed systems and databases in general. Trying to read up the internals of databases and build a distributed key-value store from scratch. I would like to read research papers, books, and source code. Write blogs to solidify my understanding and write code to improve my coding skills. Example: What is the difference between a B+ tree and an LSM tree? How does Postgres do row-level locking? What are the different protocols used by different datastores for communication between server and client?</p><p>I am building the project in the hope that it might become production-ready someday! There are already a lot of innovations going on in this space and it would be great if we end up building something in the sweet spot!</p><p>Apart from that, I plan on just having more conversations with people in the RC community. Being a non-native speaker of English, it would greatly help me in just getting my thought and speech up to speed. Also, it is fun getting to know people.</p><p>Next one: prepare for my interviews. This involves data-structure and algorithm stuff + system design.</p><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>I hope this post gave you an idea about my journey to the Recurse Center. You can follow up on the rest of my journey here in this blog and on <a href="https://twitter.com/scriptnull" target="_blank" rel="noopener">my twitter</a>. If you are thinking to attend it, I encourage you to apply!</p><p>By the way, my batch starts tomorrow. (yay! excited!) </p><p>Looking forward to recursing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I am happy to announce that I got accepted into &lt;a href=&quot;https://www.recurse.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Recurse Center&lt;/a&gt; 
      
    
    </summary>
    
    
      <category term="life" scheme="https://vishnubharathi.codes/tags/life/"/>
    
      <category term="recurse center" scheme="https://vishnubharathi.codes/tags/recurse-center/"/>
    
  </entry>
  
  <entry>
    <title>No more zero days</title>
    <link href="https://vishnubharathi.codes/blog/no-more-zero-days/"/>
    <id>https://vishnubharathi.codes/blog/no-more-zero-days/</id>
    <published>2020-07-23T03:48:09.000Z</published>
    <updated>2020-08-16T18:42:20.314Z</updated>
    
    <content type="html"><![CDATA[<p>When I was feeling down and less productive towards the end of 2018, I used to search the web for motivation. In that process I happened to discover one of the golds of the internet. </p><p>It is this amazing comment on redit by <a href="https://www.reddit.com/user/ryans01/" target="_blank" rel="noopener">u/ryans01</a>. (A million thanks to this human)</p><p><a class="embedly-card" href="https://www.reddit.com/r/getdisciplined/comments/1q96b5/i_just_dont_care_about_myself/cdah4af" target="_blank" rel="noopener">Card</a></p><script async src="//embed.redditmedia.com/widgets/platform.js" charset="UTF-8"></script><p>A little graphic that is linked in that comment to summarize the idea of zero days.</p><p><img src="https://i.imgur.com/7xsp7hJ.png" alt=""></p><p>It gave a great momentum - I read books followed by books everynight, practiced a lot of coding, and even got very active on this blog at that time only. The last 2 months of 2018 were very productive. At that time, I was able to crack the interview of one of my dream companies and wrote a very successful blog post that went on to the top of Hackernews (which completely proved the point that people really find some of my writings useful).</p><p>After that, I just went on to being normal. In short, a lot happened. A lot of zero days.</p><p>After losing my job, these days I am trying to be productive everyday. But even then, I am hitting zero days. That’s weird! No work, but how did the day turn zero? I am feeling anxious all the time with questions like “Will I get a job that I love?”, “What if I fail an interview at a dream company after applying?” (this is totally making me to not apply in the first place), “What do I learn now?”….</p><p>hmmmm, after being stuck like this, I re-opened ryan’s comment once again today morning, just before writing this blog post and re-read it!</p><p>Well, it seems like, I just have to forgive my past self and concentrate on having a non-zero day! (a gift for future from the present)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When I was feeling down and less productive towards the end of 2018, I used to search the web for motivation. In that process I happened 
      
    
    </summary>
    
    
      <category term="career advice" scheme="https://vishnubharathi.codes/tags/career-advice/"/>
    
  </entry>
  
  <entry>
    <title>First feedback</title>
    <link href="https://vishnubharathi.codes/blog/first-feedback/"/>
    <id>https://vishnubharathi.codes/blog/first-feedback/</id>
    <published>2020-07-20T07:57:19.000Z</published>
    <updated>2020-08-16T18:42:20.310Z</updated>
    
    <content type="html"><![CDATA[<p>I just got off from a call where I gathered feedback about my interview with a company. I didn’t pass the interview, but the feedback of why I failed is making have an immense smile in my face for the past hour.</p><p>This is the first company that I applied after I lost my job a few days back. So, this is the <em>first feedback</em> that I got in that sense. I think writing it down here would give me a solid place to refer to on a regular basis to up my game!</p><p>The feedback call was between me and the CTO of the company. Whenever I find myself talking to CEOs, CTOs and VPs (and some Engineers), I seem to get immense amount of “You are playing a different game, so game on!” level of energy from the conversation. This is nonetheless different. The way things were put infront of me is actually something helpful that I could act upon.</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>To give background, here is how the interview process went. It is an early-stage startup, recently funded, super-interesting to me (as it is in the Reliability, Observability space). I saw their CTO’s tweet that they are hiring.</p><p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">We (<a href="https://twitter.com/last9inc?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@last9inc</a>) are looking for a Software Engineer who can <em>own</em> our Reliability + Customer Integration pipeline. <br><br>Key requisites are: Strong *nix skills, and being able to think ahead and automate mundane / repetitive work.<br><br>If that&#39;s not you, help spread the word 🙏</p>&mdash; Piyush Verma (@realmeson10) <a href="https://twitter.com/realmeson10/status/1273551418448740352?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">June 18, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p><p>After doing my homework on what they are trying to do, I arrived at one of their interesting projects which is open source - <a href="https://github.com/last9/k8stream" target="_blank" rel="noopener">https://github.com/last9/k8stream</a></p><p>Now I am fully convinced that I should definitely apply to them! <code>k8stream</code> was written in Go, which I am currently focusing on. So I thought it might be good to contribute a feature to the project, that way I get a little bit better in Go programming and also it would help me break the ice with them while applying!</p><p>It is a project that uploads various kuberenetes events to AWS S3. It had this notion of Sink, which lets you store the data. For example, there was file sink and AWS sink. You can choose the sink in which your events should get stored. My initial idea was to add a GCS sink, which would enable storing events in Google Cloud storage. During the “exploring by reading the code” phase, I happened to notice a <code>TODO</code> comment in the code base and I felt it would be more valuable to address it rather than sending code for feature that I wasn’t sure if they are interested in having in the software. So, here it is: <a href="https://github.com/last9/k8stream/pull/38" target="_blank" rel="noopener">https://github.com/last9/k8stream/pull/38</a> - a PR to validate input in file sink!</p><p>One of the other reasons for not going with GCS feature is that I didn’t have clear idea about how to use <code>context</code> package in Go (this package was used extensively by the google cloud Go library). So, I did spin off understanding it parallely during the process and ended up <a href="/blog/go-contexts/">digging deep into the source code of context package and writing a blog post about it</a></p><p>After sending in a hello email with a pointer to my PR, I was able to get an interview from them. It involved a introduction/get-to-know-each-other call followed by a take home assignment.</p><p>The call went well. Then I wrote and submitted the take-home assignment in a week. I chose Go as my programming language (as I was learning it and I thought it would be a fun exercise).</p><p>I learnt that I was rejected in some days after the assignment and after a week, I was able to get the CTO on call for a feedback session. </p><h2 id="Good-things"><a href="#Good-things" class="headerlink" title="Good things"></a>Good things</h2><p>Always start with the good things! A few things that they thought I was good at.</p><ul><li>Good hands on coding skills</li><li>Willing to accept feedback and act on it.</li><li>Passionate and enthusiastic.</li></ul><h2 id="Things-that-went-wrong"><a href="#Things-that-went-wrong" class="headerlink" title="Things that went wrong"></a>Things that went wrong</h2><p>The following were somethings that went wrong. </p><ul><li>Overly engineered solution.</li><li>Lagging in design principles.</li><li>Parts of the solution was lacking in testability.</li></ul><h2 id="To-be-Improved"><a href="#To-be-Improved" class="headerlink" title="To be Improved"></a>To be Improved</h2><p>So, from the feedback, I understood that the following things need to be improved.</p><ul><li>Sense and knowledge of design patterns. (Totally agree with this!)</li><li>Knowledge on basic functional programming constructs like Pure function, idompotence etc.</li><li>Knowledge on system design and architecture.</li></ul><h2 id="But-how"><a href="#But-how" class="headerlink" title="But, how?"></a>But, how?</h2><p>Now that I know what needs to be improved. I am laying down what can I do to start seeing the results.</p><p>I also asked questions to the CTO like “If I were to apply back again, what are some action items that I can take to improve myself?” hoping that I could get some suggestions on improving.</p><p>First thing was,</p><blockquote><p>Code more, a lot more.</p></blockquote><p>Woah! that’s super straight forward. I love this. I just have to write a lot more code everyday. I had been missing it for a while. When I was in college, I could dump these mountains of code everyday that would teach me things I never knew of. So I want to get back on “that level of coding more”.</p><p>Next was my very favorite part in the entire of the conversation. It was about how to get good at design patterns. I find it very practical advice.</p><blockquote><p>Build something with some assumptions and maintain it till you see your assumptions fail</p></blockquote><p>This case naturally leads to refactoring of code and helps you understand why your code didn’t scale. In other words, it will get us started with thinking what kind of design pattern might have saved us from having to refactor.</p><h2 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it"></a>That’s it</h2><p>That’s pretty much of what happened. In the end, I also got the suggestion of what kind of companies I should be applying for (got 3 names). They encouraged me in a manner that convinced me that I should definitely go (prepare and) apply at those “3 names” after this. The entire feedback session gave me a moral boost - “I got this!” attitude++.</p><p>With high hopes of working towards improving myself, I am signing this off with this wonder statement: “I really wonder how the tech interview process has evolved in the industry. From not getting any answer back in case of rejection to requesting and getting feedback in case of a rejection.” - I am really glad to see more companies adopt this style of interviewing.</p><p>~ ~ ~ ~ </p><p>Also if you have some suggestions on how I can level up, do let me know. It would be great if you could point me to opportunities that you find interesting these days!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I just got off from a call where I gathered feedback about my interview with a company. I didn’t pass the interview, but the feedback of 
      
    
    </summary>
    
    
      <category term="interviewing" scheme="https://vishnubharathi.codes/tags/interviewing/"/>
    
      <category term="tech interviews" scheme="https://vishnubharathi.codes/tags/tech-interviews/"/>
    
  </entry>
  
</feed>
