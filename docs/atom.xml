<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vishnu Bharathi</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vishnubharathi.codes/"/>
  <updated>2020-12-25T11:33:40.246Z</updated>
  <id>https://vishnubharathi.codes/</id>
  
  <author>
    <name>Vishnu Bharathi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jio</title>
    <link href="https://vishnubharathi.codes/blog/jio/"/>
    <id>https://vishnubharathi.codes/blog/jio/</id>
    <published>2020-11-01T18:28:00.000Z</published>
    <updated>2020-12-25T11:33:40.246Z</updated>
    
    <content type="html"><![CDATA[<p>This might be a silly and short blog post :D I am writing this to let the world know that I got a new “Jio” SIM card today. I was struggling with poor internet speeds and network problems on Airtel. So, I finally took the plunge to get on the Jio network. I should have done this ages ago.</p><p>I was planning to get a <a href="https://www.jio.com/shop/en-in/router-m2-black/p/491193575">Router M2 Black JioFI</a>, but it is out of stock everywhere. So, just got the SIM card and using via mobile.</p><p>For people who don’t have context about what Jio is: It is a popular mobile network that changed a lot of things in India. I totally love what Jio is doing to India.</p><p>It is one of the first networks to charge only for the mobile data and give calls for free. It is the network that is helping a lot of people in India to get access to the internet. The internet speeds used to crawl and still crawls in many other networks. But Jio is super-fast and very very decent.</p><p>When Jio came out first, I didn’t take it much seriously. I wasn’t even as excited as when Videocon introduced a mobile network. In fact, they seemed sketchy for me just after my experience with Videocon (introduce unbelievable plans and charge high after sometime and eventually cease operation - that’s Videocon’s story in short.)</p><p>Super speed at dirt cheap prices; not many brands give these. Jio does this awesomely and at scale. How do I know? Almost all the people in my family have Jio ( except for me - not true anymore :D ) I have used their mobile networks via wifi hotspots because my network gave problems and everything it solves problems for me.</p><p>Anyways, I felt quiet here and I thought I will just share away this update :D With an upgrade in my internet speed, I just feel like half of my problems are gone :D</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This might be a silly and short blog post :D I am writing this to let the world know that I got a new “Jio” SIM card today. I was struggl
      
    
    </summary>
    
    
      <category term="life" scheme="https://vishnubharathi.codes/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Rejections</title>
    <link href="https://vishnubharathi.codes/blog/rejections/"/>
    <id>https://vishnubharathi.codes/blog/rejections/</id>
    <published>2020-10-09T19:32:18.000Z</published>
    <updated>2020-12-25T11:33:40.250Z</updated>
    
    <content type="html"><![CDATA[<p>This post is inspired by <a href="https://blog.jabid.in/2016/11/30/rejections.html">Jaseem Abid’s original post</a> (Thanks to him). I found it helpful and motivating. Hence I am doing my version of it. Alright, so here is the idea.</p><blockquote><p>Why do we not talk about our failures?</p></blockquote><p>Jaseem’s original post was about a few companies that rejected him outright without even an interview. But my version would be slightly different. It will include outright rejections, ghosted rejections, and rejection after interviewing.</p><p>Also, quoting Jaseem one more time to state the purpose of this blog post:</p><blockquote><p>This might be the motivation someone needs to keep trying and hence I believe is worth sharing</p></blockquote><p>I hope that reading this helps you a little bit in your job search! I want you to know that job search might be stressful (at times), but you got this! Prepare yourself and go out there; Don’t get hurt by rejection.</p><blockquote><p>No challenges are roadblocks. They are just speed bumps.</p><p>– Devin’s mom (The Kicks S1E01)</p></blockquote><p>Ok, let me start the show!</p><h2 id="Paytm"><a href="#Paytm" class="headerlink" title="Paytm"></a>Paytm</h2><p>The year was 2015. I was fresh out of college! Never applied/attended an interview before because I was not allowed to attend the campus interviews happening in college due to low marks.</p><p>So, there I was browsing through <a href="https://hasjob.co/">Hasjob</a> (one of my favorite job portals) every day. I then noticed this job listing saying that <a href="https://paytm.com/">Paytm</a> is hiring for software engineers who do node.js.</p><p>I got very excited. I had started using Paytm (a digital money wallet) sometime back and was amazed by this new way of handling money.</p><p>So, I went on and just applied for it. I think this was my first ever job application.</p><p>Luckily, I got back a response. They wanted to do a phone call. I didn’t even think about what they would ask on the phone. I was so happy that I was even considered for a phone call. haha :D</p><p>Then the phone call came. It was so fast - we said hi and maybe a very little intro. Then this happened</p><p>interviewer: do you have a paper and pen right now?</p><p>me: no</p><p>interviewer: Ok, take those and get ready?</p><p>me: (running around to get a paper and pen) ok, got it.</p><p>interviewer: which language are you comfortable in?</p><p>me: JavaScript</p><p>interviewer: Ok, write a program to reverse a linked list.</p><p>me: (stunned, because the last time I wrote a linked list was years ago for data structure exam) ummmm, (tried so hard to think of a solution)</p><p>(after a few mins)</p><p>interviewer: Did you write it?</p><p>me: I just wrote the linked list structure and function signature</p><p>interviewer: never mind, just read out what you had written in the paper.</p><p>(me, reading in breaking voice)</p><p>interviewer: Kbye</p><p>[Ghosted &amp;&amp; Rejected]</p><p>Short while, I called my friend who had been preparing for interviews and he introduced me to the fact that asking data structure questions is normal. That’s when I got the taste of how the interviewing world is :D </p><h2 id="DoSelect"><a href="#DoSelect" class="headerlink" title="DoSelect"></a>DoSelect</h2><p>It was the same year and just after the Paytm rejection, I came across <a href="https://doselect.com/">DoSelect</a>. It is a coding assessment platform like <a href="https://www.hackerrank.com/">Hackerrank</a>. Those kind of sites were gaining a lot of traction at that time. Remotely executing your code and evaluating solutions from a website is pretty cool.</p><p>Earlier as a student, I released one of my successful projects called <a href="https://github.com/scriptnull/compilex">compilex</a> which is a library useful for building such kind of sites. So I was so much interested in working on such a product. Hence I applied.</p><p>The first round was using the DoSelect platform itself. Simple algorithm and data structure style questions (I think I answered 2 out of 3 correctly; the other one partially accepting solution). They asked for a Google hangout video chat. But I had a very poor internet connection at that time and openly mailed them about it and asked if it is ok to do an in-person interview instead.</p><p>They said ok! At that time, they were based out of <a href="https://www.inmobi.com/">InMobi</a> office. I took a “500D” BMTC to arrive at their office (used google map to track the right bus stop, but got down early in the previous bus stop. haha). Thankfully, there are a lot of 500D buses and so I hopped on the next one and arrived at the right spot. This was the first time I entered a tech park and a big office. I was WOWed!</p><p>I was nervous and thinking about what they will be asking me. There was a technical discussion. The thing that went wrong there was “I wasn’t confident while telling my answer”. They asked me something like “how to get realtime updates in the browser?”, I knew that WebSockets are used for them but I didn’ confidently put that in front of them. I said about long polling and was a bit reluctant about starting the conversation about web sockets. Because I wasn’t sure if WebSockets were a proper standard. So the conversation went a little bit weird.</p><p>After that, I spoke with the founders. I was so naive throughout the entire conversation both in-person and mail. I was so new to a lot of things - tech, speaking with people, etc. I am sure that I looked like a fool at some point in time. haha. The conversation ended in a good note. I very much appreciate their time.</p><p>Got back home. I was very happy and even naively told my grand-mother that I might be getting an offer anytime soon. We waited for their email (lol, she still keeps a check on me whenever I start a job search - even after 5 years). Waited and waited…. haha. Even mailed them back 10 days after to follow up. (I read through that mail to get the feel of nostalgia and how naive I was - it felt like I was so desperate for the job)</p><p>[Ghosted &amp;&amp; Rejected]</p><p>At this point, I already learned a couple of things about job search</p><ol><li>Don’t be desperate. Just accept who you are and try to find people who are willing to accept who you are and help you improve.</li><li>Never say that you are getting an offer to others before receiving the actual offer letter. That way we avoid embarrassment in front of family and friends. hahahaha.</li></ol><h2 id="Mozilla"><a href="#Mozilla" class="headerlink" title="Mozilla"></a>Mozilla</h2><p>I think this was 2 years after that. I was so interested in open source communities, side projects, etc. Mozilla was doing cool stuff like rust. Also, it’s presence in India was increasing more and more.</p><p>I think I loved Mozilla as a company because of these reasons:</p><p>Firefox was one of the coolest browsers back when I was in school. It was amazing to notice all the improvements Mozilla bring in after every new update. Those days Opera and Firefox were two of my favorite browsers (until Chrome came along).</p><p>The second reason is MDN Web Docs - Mozilla Developer Network documentation for JavaScript. I love these docs and these have huge respect from me even now.</p><p>I saw a really different role on their career page. It wasn’t particular about any tech stack, but it was more like a research/prototyping engineer. I also think that it was a remote role. I just applied away to see if they would even consider me for such a role.</p><p>Then I received this nicely written rejection email. I am copying and pasting the full email because I love the way they used the word “Web” in there!</p><p>~ ~ ~ ~ </p><p>Hi Vishnu,</p><p>Thank you for your time and interest in Mozilla and our Staff Experiments Integration Full Stack Developer position. We have looked at your resume and, although we appreciate your background and experience, we are choosing not to move forward at this time.</p><p>This isn’t necessarily the end! We know that people are always learning and growing and we have new jobs opening all the time. We do keep you in mind and will contact you if we think we have an opening here that you would be well-suited to.  Also, every position we open is posted to our twitter feed, so follow us at @mozilla to keep an eye out for other positions that would be a good fit for you!</p><p>We’re sorry that we were unable to make it work this time, but we hope that we see you around the Web.</p><p>Thank you!</p><p>The Mozilla Recruiting Team</p><p>~ ~ ~ ~</p><p>I wrote back happily saying,</p><p>~ ~ ~ ~</p><p>Thanks for taking the time to look into my application and giving notification on the status of it. I hope to see you around!</p><p>~ ~ ~ ~</p><p>[Rejected]</p><h2 id="Cohesity"><a href="#Cohesity" class="headerlink" title="Cohesity"></a>Cohesity</h2><p>These were the times when I was having questions like “What do I want to focus and specialize on? Do I want to concentrate on frontend, backend, or DevOps?” - kind of like adolescence. I think a recruiter from Cohesity reached out to me. They said that there was a position open for Frontend engineer. I thought of trying out for it (just to know if people trust me for a frontend role) - I had been mostly doing full-stack stuff for a while.</p><p>There was an on-site interview. I went in super-delayed for that - who knew there will be that much traffic on outer ring road of Bangalore and also I was the first rider for the Uber driver that I had got that day (I mean like the first-ever rider in his uber driver career). Spend quite some time helping him out with Google maps, Uber driver-partner app, and what not, android and phones in general!</p><p>When I arrived, I was introduced to the interviewers. I think there were 2 technical rounds - needed to write JavaScript in both of them. Questions like implement a debounce function were asked. I think I did it well. But I might have troubled a bit while speaking with one of the interviewers.</p><p>Then in the afternoon, one of the interviewers took me to their team lunch and introduced me to a bunch of team members. I had lunch with them. For the most part, they were all speaking in Hindi (a language that I don’t know). Then I said that I am sorry and I don’t understand Hindi. Then they also said it’s ok (and sorry).</p><p>I was notified that the recruiter would contact me for the results. The recruiter reached out to me over the phone and said, “we were looking for people who are already very specialized in frontend and you are more aligned towards the backend. So it didn’t work out, but we will let you know once those positions open up.”</p><p>[Rejected]</p><p>When discussing this interview experience with one of my friends, he said that the part where I went in for lunch with the team was also part of the interview to evaluate culture fit. haha :D</p><h2 id="Amazon"><a href="#Amazon" class="headerlink" title="Amazon"></a>Amazon</h2><p>This was one of the turning points for me. I never interviewed with big co. at that point and this was the first time. A recruiter reached out to me via LinkedIn and I sent my resume back showing interest.</p><p>Why was I interested? AWS was the main reason. After that is Kindle, haha :D Apart from those, I felt good about Amazon’s growth inside India. I was interested in how these big co. operate (spent most of the time working at startups at that point in time). I was in the hiring drive for their newly established Amazon Pay team. After a few rounds, I met with someone who said that I might be part of an internal team. Not sure, if those two were the same roles :D</p><p>The interview experience was so much energy-consuming. I first took a few weeks preparing Data Structure and Algorithms. I think I just went through <a href="https://en.wikipedia.org/wiki/List_of_data_structures">the list of data structures</a>. At this point, I didn’t do much puzzle questions and my point of view was if I am just good at knowing these data structures and coding basic operations in them, I might be able to answer whatever was thrown at me!</p><p>The first day was fully data structure and algorithm puzzle questions. There was a written round. After that, there were two more rounds with Amazon Engineers. I enjoyed the conversation I had with both of the engineers.</p><p>The next rounds were about system design. This is where things went wrong with me. I think I was over-confident and didn’t prepare well. The over-confidence is mostly due to me thinking like “system design, right? I already do a good job at work while designing stuff. So it should be easy peasy.”</p><p>They asked me some pretty common design questions in multiple rounds - I was told to draw the class diagram and stuff. They were checking on the Object-oriented design skills. They probably expected me to be writing Singletons and Abstract Factories there, haha. At that time, I was working with JavaScript at work and wasn’t ready for it!</p><p>Also one of the rounds was about testing knowledge on concurrent programming. I was expected to write code involving 2 threads etc. I tried answering that thing in Go but it didn’t go well. I should have just told them upfront that I work mostly with Node.js and it is single-threaded.</p><p>[Rejected]</p><p>The HR called me over the phone and shared that I wasn’t strong enough in my system design skills and apply back in 6 months. Some good things here: they didn’t ghost. They shared the feedback and encouraged to reapply. Also, I didn’t have to pay for cabs and food during these interviews :D haha.</p><p>Jokes apart, I think I learned a few things in here:</p><ul><li>If you don’t know something, accept that you don’t know and come clean with the interviewer.</li><li>Don’t be over-confident.</li><li>Go in prepared!</li><li>Choose the right tech while preparing for interviews. If not choose the interview where they ask you about the tech you know of. For example: probably choosing some Object-Oriented Language like Java or C++ might have been more suitable for answering the design part of the interview here or I should have tried out for roles like Web developer or something that deals with JavaScript.</li></ul><h2 id="IBM"><a href="#IBM" class="headerlink" title="IBM"></a>IBM</h2><p>A recruiter reached out via LinkedIn and I sent back the resume showing interest. They called for a hiring fair - 100s of people were there.</p><p>We were asked to dress formally I think (I went in wearing a white shirt, black pants, and formal shoes). First-round was written (write programs on a paper). Followed by an in-person round.</p><p>interviewer: Are you experienced in python?</p><p>me: No. I am experienced in JavaScript and Node.js</p><p>interviewer: (looking confused) but the role we are interviewing for is for someone who is experienced in python</p><p>me: oh, ok.</p><p>interviewer: asked a question just for the sake of it (but hugely confused about how they allowed me in there)</p><p>me: (answered the question)</p><p>It was so short. Then I was asked to wait and the HR spoke to me asking “did you tell that you were in for node.js to the interviewer?”. I said yes. Then they were like “oops, sorry, we are looking for python and the node.js role might open up afterward”</p><p>hmmmmm, ok!</p><p>I regret most part of doing this. But there is a good thing. I discovered a good milkshake shop near their office. The milkshake that I had there was so awesome and I made it a habit to drop by that shop whenever I was nearby. haha, sweet!</p><p>[Rejected]</p><h2 id="Schneider-Electric"><a href="#Schneider-Electric" class="headerlink" title="Schneider Electric"></a>Schneider Electric</h2><p>Felt very similar to IBM type interview. Both of these were optimized for filtering out from a large number of people.</p><p>First-round was written MCQ or fill in the blanks style questions. Forgot exactly. But I had noted down that I got 23 out of 30 in that. haha!</p><p>Two rounds with engineers.</p><p>One round was a discussion regarding previous work experience.</p><p>In another round, I was asked a puzzle SQL question - couldn’t answer it.</p><p>[Rejected]</p><p>Preparation and a little luck of getting asked what you know in play here!</p><h2 id="Grab"><a href="#Grab" class="headerlink" title="Grab"></a>Grab</h2><p>Got a referral for this! (thanks to the friend who referred me)</p><p>Initially there was a small phone call with the HR and showed up on-site.</p><p>Two rounds:</p><ol><li>Whiteboard an algorithm question</li><li>Design question - picked up from an actual work problem that they had solved.</li></ol><p>I wrote a sub-optimal solution for the coding question. Also didn’t do the design round well.</p><p>[Rejected]</p><p>But I got the chance to meet up with the friend who referred me at the end of the interviews and felt encouraged in the job search process :)</p><h2 id="Uber"><a href="#Uber" class="headerlink" title="Uber"></a>Uber</h2><p>I was using Uber almost every day around that time. This was when ride-sharing apps were booming!</p><p>Also, I like reading through their engineering blog etc. So I was excited to apply for a position there.</p><p>I applied via their careers portal on a weekend and received this mail first thing on a Monday morning!</p><p>~ ~ ~ ~ </p><p>Hi Vishnu, </p><p>Thank you so much for giving us the opportunity to consider you for the Software Engineer II role. We know it takes a lot to submit an application, and we want you to know how much we truly appreciate your interest in Uber! We’ve carefully reviewed your application, and unfortunately it isn’t a match for what we’re looking for this time around.</p><p>Please do not hesitate to keep in touch and reach out if we have another role you think could be a fit in the future. We wish you all the best. </p><p>Regards,</p><p>The Uber Recruiting Team</p><p>~ ~ ~ ~</p><p>[Rejected]</p><h2 id="Donut"><a href="#Donut" class="headerlink" title="Donut"></a>Donut</h2><p>I was interested in building a slack bot and read through the entire of slack’s documentation. I was amazed by all the slack bots out there.</p><p>One such slack bot is Donut. So I applied to them.</p><p>~ ~ ~ ~</p><p>Hi Vishnu,</p><p>Thank you for your application to Donut. We recently filled the role you applied for and are no longer actively recruiting for this position. That being said, we’d love to keep your resume on file as our team continues to grow and stay in touch about future opportunities that may be a good fit.</p><p>We appreciate your interest in Donut and wish you success in your job search.</p><p>Best,<br>The Donut Team</p><p>~ ~ ~ </p><p>[Rejected]</p><h2 id="Last9"><a href="#Last9" class="headerlink" title="Last9"></a>Last9</h2><p>Startup in initial stages. The small team focused on an interesting problem space (observability) - also remote first.</p><p>Almost got ghosted, but I messaged them asking if I was still being considered; if not at least a simple feedback.</p><p>They were generous enough to spend some time over a call to give me feedback. I wrote an <a href="/blog/first-feedback/">entire blog post about this</a>.</p><p>[Rejected]</p><h2 id="Juspay"><a href="#Juspay" class="headerlink" title="Juspay"></a>Juspay</h2><p>I love <a href="https://juspay.in/">Juspay</a> while making payments on mobile. I spoke with their founders back in 2015 in a JavaScript conference.</p><p>The founder started an email conversation with someone in the company CCing me and their careers email - asking to co-ordinate a coding test. That person never got back and ghosted.</p><p>While that was in 2015, I happened to apply back again after 5 years. They posted in “Ask HN: Who is hiring?” thread.</p><p>HR spoke with me and told me that they will send a coding test.</p><p>Never got the coding test.</p><p>[ (Ghosted &amp;&amp; Rejected) x2 ]</p><h2 id="PhonePe"><a href="#PhonePe" class="headerlink" title="PhonePe"></a>PhonePe</h2><p>I tried reaching out to a recruiter on LinkedIn (after seeing their LinkedIn posts), but they never responded back with a message.</p><p>It felt like writing to /dev/null.</p><p>[Ghosted &amp;&amp; Rejected]</p><h2 id="epiFi"><a href="#epiFi" class="headerlink" title="epiFi"></a>epiFi</h2><p>Already missed the UPI wave and didn’t want to miss out on the Neo bank wave in India.</p><p>Applied via their careers page. Got back this email.</p><p>~ ~ ~ ~ </p><p>Hi Vishnu,</p><p>Thank you for your interest in epiFI Technologies! We wanted to let you know we received your application for DevOps Engineer, and we are delighted that you would consider joining our team.</p><p>Our team will review your application and will be in touch if your qualifications match our needs for the role. If you are not selected for this position, keep an eye on our jobs page as we’re growing and adding openings.</p><p>Best,<br>The epiFI Technologies Team</p><p>~ ~ ~ ~</p><p>Never got back a review.</p><p>[Ghosted &amp;&amp; Rejected]</p><h2 id="Raksul"><a href="#Raksul" class="headerlink" title="Raksul"></a>Raksul</h2><p><a href="https://corp.raksul.com/en/about/">Raksul</a> is a Japanese company that was trying to hire for building a fresh development center in India. A recruiter reached out to me regarding the opportunity. First was a general webinar kind of session where the CTO spoke about the culture etc. They seemed cool. The idea of building a fresh team from scratch kind of attracted me. So, I decided to interview further. Also, they were hiring for Go Engineers - so it kind of aligned with me.</p><p>The first round was 1 day take-home assignment. It went well. Next was a 1hr chat with leadership. It went good as well. Then there was a coding assignment for which 7 days time was given. I was busy with other commitments around that time and couldn’t complete it properly - barely spent 2 days on the assignment.</p><p>I enjoyed the conversation and coding assignments. They helped me in honing my Go skills. I even got a thorough code-review on the assignments. Thanks for that! But unfortunately, I never received an official mail intimation from them about the rejection. So I will have to consider this ghosting.</p><p>[Ghosted &amp;&amp; Rejected]</p><h2 id="Walmart-labs"><a href="#Walmart-labs" class="headerlink" title="Walmart labs"></a>Walmart labs</h2><p>Received a call from HR saying that they are interested in the profile. They said the first round will be data structure and algorithms. They asked if I am prepared for it. I should have just said yes, but I said “prepared but not sure if I am at the level to crack Walmart labs”. lol, rookie mistake!</p><p>They said that they will send the ds and algo online round to email. But never received one.</p><p>[Ghosted &amp;&amp; Rejected]</p><h2 id="Zoom"><a href="#Zoom" class="headerlink" title="Zoom"></a>Zoom</h2><p>Applied via their job portal. Received an email:</p><p>~ ~ ~ ~ </p><p>Hi Vishnu Bharathi P,</p><p>Thank you for your application to our Web DevOps Engineer position. We appreciate the time you took to consider opportunities at Zoom Video Communications. At this time, we are not seeing exact alignment with the current team needs.</p><p>……………………..</p><p>~ ~ ~ ~</p><p>[Rejected]</p><h2 id="Rejections"><a href="#Rejections" class="headerlink" title="Rejections"></a>Rejections</h2><p>I hope that this post helped you a little bit or at least served as relaxation in your job search :D Sometimes you get a job and sometimes you get an adventure - like in my case of discovering a good milkshake shop in the worst possible interview experience.</p><p>Focus on preparation and getting better! That’s probably something in our control.</p><p>Also, note how common ghosting is! I wish that we get better at not ghosting people as an Industry.</p><p>Just in case if you are searching for a job: Stay cool, search strong!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This post is inspired by &lt;a href=&quot;https://blog.jabid.in/2016/11/30/rejections.html&quot;&gt;Jaseem Abid’s original post&lt;/a&gt; (Thanks to him). I fo
      
    
    </summary>
    
    
      <category term="interviewing" scheme="https://vishnubharathi.codes/tags/interviewing/"/>
    
      <category term=" tech interviews" scheme="https://vishnubharathi.codes/tags/tech-interviews/"/>
    
  </entry>
  
  <entry>
    <title>The Levenshtein distance in production</title>
    <link href="https://vishnubharathi.codes/blog/levenshtein-distance/"/>
    <id>https://vishnubharathi.codes/blog/levenshtein-distance/</id>
    <published>2020-08-22T17:41:29.000Z</published>
    <updated>2020-12-25T11:33:40.246Z</updated>
    
    <content type="html"><![CDATA[<p>You might have heard about the <a href="https://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein distance</a> while in college or while preparing for tech interviews. It is the famous <a href="https://leetcode.com/problems/edit-distance/">edit distance problem</a>. It is one of those must-try <a href="https://en.wikipedia.org/wiki/Dynamic_programming">Dynamic Programming</a> challenges.</p><p>You still there? even after I said the words “Dynamic Programming”? haha. Good! Because unlike you, I am good at running away from it; most of the time. But I am kind of sitting down to learn + practice this stuff now.</p><p><a href="https://www.manning.com/books/grokking-algorithms">This amazing book</a> played a major role in making this topic a little less scary for me. What intrigued me the most is the spot where the author tries to explain some practical applications for dynamic programming.</p><p>Among all the applications I read there, two of them were practical and in-fact something that I use almost every day. One is in diff tools like <code>git diff</code> to compare text and another one is in spell checkers to figure out the closest matching words to the spelling we typed.</p><p>That’s great! Those are some “open up and read the source code” kind of things. Guess what, I love those kinds of things. Instead of sinking into interview prep materials one after another, I might take this as a fun chance to learn some code that is used in the wild!</p><p><img src="https://media.giphy.com/media/xT1R9YSHqTHAuD9FyU/giphy.gif" alt="missed hi5"></p><p>So let us learn about the problem, the way it is implemented in some open-source software (which are used by a lot of people - like a really really big number).</p><h2 id="Problem-statement"><a href="#Problem-statement" class="headerlink" title="Problem statement"></a>Problem statement</h2><p>I am going to copy-paste from Wikipedia to help me here.</p><blockquote><p> the Levenshtein distance is a string metric for measuring the difference between two sequences</p></blockquote><p>Basically, it is a way of comparing two strings.</p><blockquote><p>Informally, the Levenshtein distance between two words is the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one word into the other.</p></blockquote><p>Consider spell checkers. When you type something, the spell checking software should suggest you which is often a valid English word with a minimal Levenshtein distance.</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>Here is the cool thing: <a href="https://github.com/git/git">Git</a> uses dynamic programming. Apart from the mention in that book regarding <code>git diff</code>, I found an elegant use-case of Levenshtein distance in some other part of git.</p><p>Here is how I found this out. I usually end up typing the git sub-commands wrongly at least once per day. Git would intelligently understand what I am trying to type and output a suggestion like this</p><p><img src="/images/git-status.png" alt="git-status"></p><p>So, what is git doing here? It is just spell-checking the sub-command I typed in by comparing it against all the valid git sub-commands. Cool, at that point in time I was like “I think git might be using the Levenshtein distance to do this”.</p><p>Then I started <a href="https://github.com/git/git/search?q=The+most+similar+commands+are&amp;unscoped_q=The+most+similar+commands+are">greping “The most similar commands are”</a> in the git source code to dig deep into the source code.</p><p>Bingo! Of course it uses the Levenshtein distance :)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">levenshtein</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *string1, <span class="keyword">const</span> <span class="keyword">char</span> *string2,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> swap_penalty, <span class="keyword">int</span> substitution_penalty,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> insertion_penalty, <span class="keyword">int</span> deletion_penalty)</span></span>;</span><br></pre></td></tr></table></figure><p>Here is the <a href="https://github.com/git/git/blob/53f9a3e157dbbc901a02ac2c73346d375e24978c/levenshtein.h">header file</a> that declares the function and the <a href="https://github.com/git/git/blob/53f9a3e157dbbc901a02ac2c73346d375e24978c/levenshtein.c">c implementation of the logic</a>.</p><p>It gets called in <a href="https://github.com/git/git/blob/4f0a8be78499454eac3985b6e7e144b8376ab0a5/help.c#L514-L623">help.c</a>, the source file responsible for showing help message in git.</p><p>The function first loads all the valid sub-commands of git (including the aliases we have - just knew this fact while digging the source).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">load_command_list(<span class="string">&quot;git-&quot;</span>, &amp;main_cmds, &amp;other_cmds);</span><br><span class="line"></span><br><span class="line">add_cmd_list(&amp;main_cmds, &amp;aliases);</span><br><span class="line">add_cmd_list(&amp;main_cmds, &amp;other_cmds);</span><br><span class="line">QSORT(main_cmds.names, main_cmds.cnt, cmdname_compare);</span><br><span class="line">uniq(&amp;main_cmds);</span><br></pre></td></tr></table></figure><p>After that, it computes the Levenshtein distance and decides which command to suggest.</p><p>One interesting thing that I noted is how <em>practical</em> the code is. If we just see it as an interview prep thing, we might just write a recursive implementation and be done with it (which is usually simpler than writing an iterative approach). But in real-world a recursive approach might result in a stack overflow. Hence, an iterative approach to solving this problem is much more desirable.</p><p>Also, see the level of optimization, they do! A comment from the source below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* The idea is to build a distance matrix for the substrings of both</span><br><span class="line">* strings.  To avoid a large space complexity, only the last three rows</span><br><span class="line">* are kept in memory (if swaps had the same or higher cost as one deletion</span><br><span class="line">* plus one insertion, only two rows would be needed).</span><br></pre></td></tr></table></figure><p> At any given point of time, they are just using 3 rows of the memo table to figure out the answer, instead of keeping the entire memo table in memory.</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">levenshtein</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *string1, <span class="keyword">const</span> <span class="keyword">char</span> *string2,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> w, <span class="keyword">int</span> s, <span class="keyword">int</span> a, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(string1), len2 = <span class="built_in">strlen</span>(string2);</span><br><span class="line"><span class="keyword">int</span> *row0, *row1, *row2;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">ALLOC_ARRAY(row0, len2 + <span class="number">1</span>);</span><br><span class="line">ALLOC_ARRAY(row1, len2 + <span class="number">1</span>);</span><br><span class="line">ALLOC_ARRAY(row2, len2 + <span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...........</span></span><br><span class="line"><span class="comment">//...........</span></span><br><span class="line"></span><br><span class="line">i = row1[len2];</span><br><span class="line"><span class="built_in">free</span>(row0);</span><br><span class="line"><span class="built_in">free</span>(row1);</span><br><span class="line"><span class="built_in">free</span>(row2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Where-else"><a href="#Where-else" class="headerlink" title="Where else?"></a>Where else?</h2><p>After a while of staring at git source code today with a little bit of struggle reading C and getting into all the details of the solution, I wanted to read the implementation in some other programs as well. There are lot of command-line tools and I have noticed a lot of the good ones support this spell check feature.</p><p>In fact this kind of functionality should typically be provided by the sub-command parsing cli library so that it is available more easily to cli writers. I was right again! Since I am into Go recently, I tried searching through a famous command line parser library for Go called <a href="https://github.com/spf13/cobra">Cobra</a>.</p><blockquote><p>Cobra is used in many Go projects such as Kubernetes, Hugo, and Github CLI to name a few</p></blockquote><h2 id="Cobra"><a href="#Cobra" class="headerlink" title="Cobra"></a>Cobra</h2><p><a href="https://github.com/spf13/cobra">Cobra</a> contains a reference to Levenshtein distance in the <a href="https://github.com/spf13/cobra#suggestions-when-unknown-command-happens">README file</a>.</p><p><img src="/images/edit-distance-readme.png" alt="edit-distance-readme"></p><p>Cool, it even has the configuration to choose the distance based on which the suggestions should be picked.</p><p>Now, on to the source code. It is written as <a href="https://github.com/spf13/cobra/blob/993cc5372a05240dfd59e3ba952748b36b2cd117/cobra.go#L164">a simple function</a>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ld compares two strings and returns the levenshtein distance between them.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ld</span><span class="params">(s, t <span class="keyword">string</span>, ignoreCase <span class="keyword">bool</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> ignoreCase &#123;</span><br><span class="line">s = strings.ToLower(s)</span><br><span class="line">t = strings.ToLower(t)</span><br><span class="line">&#125;</span><br><span class="line">d := <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="built_in">len</span>(s)+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> d &#123;</span><br><span class="line">d[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(t)+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> d &#123;</span><br><span class="line">d[i][<span class="number">0</span>] = i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> d[<span class="number">0</span>] &#123;</span><br><span class="line">d[<span class="number">0</span>][j] = j</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="built_in">len</span>(t); j++ &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> s[i<span class="number">-1</span>] == t[j<span class="number">-1</span>] &#123;</span><br><span class="line">d[i][j] = d[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">min := d[i<span class="number">-1</span>][j]</span><br><span class="line"><span class="keyword">if</span> d[i][j<span class="number">-1</span>] &lt; min &#123;</span><br><span class="line">min = d[i][j<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> d[i<span class="number">-1</span>][j<span class="number">-1</span>] &lt; min &#123;</span><br><span class="line">min = d[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">d[i][j] = min + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d[<span class="built_in">len</span>(s)][<span class="built_in">len</span>(t)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is an iterative solution. To understand it better, I copy-pasted the function onto the <a href="https://play.golang.org/">Go playground</a> and started playing around with it.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Edit distance = %d&quot;</span>, ld(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;ac&quot;</span>, <span class="literal">true</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The answer correctly came up as 1. (just 1 deletion operation of b)</p><p>Now let me try to go line by line and try to figure out what is happening.</p><p>We accept two input strings <code>s</code> and <code>t</code>. We ignore the cases if the flag is set.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ignoreCase &#123;</span><br><span class="line">s = strings.ToLower(s)</span><br><span class="line">t = strings.ToLower(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After that, we create a two-dimensional array called <code>d</code> to act as the memo table.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d := <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="built_in">len</span>(s)+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> d &#123;</span><br><span class="line">d[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(t)+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now to visualize things, I am adding a little function that prints the memo table.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &quot;  a  c </span><br><span class="line">&quot;  0  0  0 </span><br><span class="line">a  0  0  0 </span><br><span class="line">b  0  0  0 </span><br><span class="line">c  0  0  0 </span><br></pre></td></tr></table></figure><p> Next, we initialize the first column of every row with the value of the row index.</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> d &#123;</span><br><span class="line">d[i][<span class="number">0</span>] = i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now the table becomes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &quot;  a  c </span><br><span class="line">&quot;  0  0  0 </span><br><span class="line">a  1  0  0 </span><br><span class="line">b  2  0  0 </span><br><span class="line">c  3  0  0 </span><br></pre></td></tr></table></figure><p>After that, we initialize the first row of every column to the value of the column index.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> d[<span class="number">0</span>] &#123;</span><br><span class="line">d[<span class="number">0</span>][j] = j</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That yields</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &quot;  a  c </span><br><span class="line">&quot;  0  1  2 </span><br><span class="line">a  1  0  0 </span><br><span class="line">b  2  0  0 </span><br><span class="line">c  3  0  0</span><br></pre></td></tr></table></figure><p>That completes the base case: “When you start with an empty string and start building the strings, the operation count would just increase by one as it involves only one insertion operation.</p><p>Now, we start filling the inner parts of the table.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="built_in">len</span>(t); j++ &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line"><span class="comment">// logic</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ah nice, that felt so easy. If the row and column alphabet value are the same, then we don’t need to perform any operation and hence we get to use the last counted operation value by looking at the diagonal.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> s[i<span class="number">-1</span>] == t[j<span class="number">-1</span>] &#123;</span><br><span class="line">d[i][j] = d[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For example: Here is the final table. Notice how <code>(a,a)</code> is filled up with looking at the diagonal <code>(&quot;,&quot;)</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &quot;  a  c That is because, when the resulting string is already &#96;a&#96; there is no need to perform any </span><br><span class="line">&quot;  0  1  2 </span><br><span class="line">a  1  0  1 </span><br><span class="line">b  2  1  1 </span><br><span class="line">c  3  2  1 </span><br></pre></td></tr></table></figure><p>If the alphabets differ, then we need to perform one of the operations (insert, remove, replace) to arrive at the desired alphabet. It seems like the way we figure out this is by finding the minimum of the adjacent cells (that are already filled) and adding 1 to it (to effectively say that we need to perform one more operation)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">min := d[i<span class="number">-1</span>][j]</span><br><span class="line"><span class="keyword">if</span> d[i][j<span class="number">-1</span>] &lt; min &#123;</span><br><span class="line">min = d[i][j<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> d[i<span class="number">-1</span>][j<span class="number">-1</span>] &lt; min &#123;</span><br><span class="line">min = d[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">d[i][j] = min + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>So, at last, we return the last cell of the matrix.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> d[<span class="built_in">len</span>(s)][<span class="built_in">len</span>(t)]</span><br></pre></td></tr></table></figure><p>It may not be obvious of what is going on especially in the last part of the code explanation above (apologies for not trying to explain that here). The recommendation for it is to watch/read some tutorial on how the memo table is filled up like this. The point of this explanation is to share how cleanly those ideas behind filling up the memo table is implemented in the library code.</p><h2 id="Closing"><a href="#Closing" class="headerlink" title="Closing"></a>Closing</h2><p>The main difficulty I feel here is the arrival of the idea behind the memo table. What should be the columns and rows? What should be the values that should be filled up in the cells? How do we compute the value of each cell?</p><p>Apart from the interview prep point of view, knowing these techniques (just knowing that these kinds of techniques exist in the world) can be a nice addition to one’s problem-solving toolbox. The next time you are working on a cli app or some other app that needs spell check like suggestions, you know what to do!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;You might have heard about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;Levenshtein distance&lt;/a&gt; while in college or 
      
    
    </summary>
    
    
      <category term="programming" scheme="https://vishnubharathi.codes/tags/programming/"/>
    
      <category term="algorithms" scheme="https://vishnubharathi.codes/tags/algorithms/"/>
    
      <category term="open source" scheme="https://vishnubharathi.codes/tags/open-source/"/>
    
  </entry>
  
  <entry>
    <title>Learning to sort</title>
    <link href="https://vishnubharathi.codes/blog/learning-to-sort/"/>
    <id>https://vishnubharathi.codes/blog/learning-to-sort/</id>
    <published>2020-08-16T18:37:42.000Z</published>
    <updated>2020-12-25T11:33:40.246Z</updated>
    
    <content type="html"><![CDATA[<p>I kind of procrastinate over starting to learn about sorting whenever I am preparing for interviews. Mainly because we need to memorize the working of various sorting algorithms. But over time, I have realized that each sorting algorithm is based on some intuition and if we can understand those intuitions, then it becomes easy to remember how they work.</p><p>A fair-warning: This blog post doesn’t contain many images, animations, etc. Just a bunch of text, math, and code - the minimum things just enough for me to get ideas about sorting whenever I feel like!</p><p>One of my earliest attempts at learning about sorting algorithms is by writing <a href="http://node-machine.org/machinepack-sort">machinepack-sort</a></p><p>I am going to do a similar effort here, but this time I am planning to do these steps.</p><ol><li>Understand and visualize how a sorting algorithm works. (by reading blogs, seeing video tutorials and lectures)</li><li>Come up with the time and space complexity for each of them.</li><li>Write code and test the implementation using <a href="https://leetcode.com/problems/sort-an-array/">this leetcode puzzle</a></li><li>Try to find practical use cases for each algorithm. (in the retrospect, wasn’t able to concentrate on this much. Maybe I will update this post, as I discover a usage in a practical use case)</li></ol><p>There are just a lot of different sorting algorithms. This blog contains the most common ones at first and is open to get updated with some more sorting algorithms as I learn/discover them.</p><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>I will try to collect information that might clarify details for understanding the sorting algorithms in this section.</p><h3 id="Trade-off"><a href="#Trade-off" class="headerlink" title="Trade-off"></a>Trade-off</h3><p>I heavily recommend taking a look at <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Comparison_sorts">this comparison table</a> to understand the trade-offs of different kinds of sorting algorithms.</p><p>Pasting a screenshot of the table here. One could use this table to compare and contrast different algorithms and reason about which one to use!</p><p><img src="/images/sorting.png" alt="sorting"></p><h3 id="0-1"><a href="#0-1" class="headerlink" title="0,1"></a>0,1</h3><p>I think it is good to think about the very basic cases first and handle them at first. The very basic case is</p><p>When the list to be sorted has only one or zero elements, we just have to return the list itself (because it is already sorted)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// implement sorting for n elements here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I think that some implementations try to embed this logic in the core logic itself, but anyway I would just like to make things simple and take one thing off from our table right away!</p><h3 id="Stable-Sorting"><a href="#Stable-Sorting" class="headerlink" title="Stable Sorting"></a>Stable Sorting</h3><p>When sorting a collection, what if two items with the same value exist.</p><p>[5 2 1 1 6]</p><p>Notice how 1 is repeated. While sorting, should we leave their relative order the same or should we shift them?</p><p>Well, it is up to you. If your sorting implementation maintains the relative order of equal elements, then it is said to be stable sorting.</p><p>Here is a more practical example. Consider an array of JSON objects that need to be sorted based on marks of students.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;personA&quot;</span>, <span class="attr">&quot;mark&quot;</span>: <span class="number">50</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;personB&quot;</span>, <span class="attr">&quot;mark&quot;</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;personC&quot;</span>, <span class="attr">&quot;mark&quot;</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;personD&quot;</span>, <span class="attr">&quot;mark&quot;</span>: <span class="number">80</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>If the above array is to be sorted using stable sorting, we would get</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;personB&quot;</span>, <span class="attr">&quot;mark&quot;</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;personC&quot;</span>, <span class="attr">&quot;mark&quot;</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;personA&quot;</span>, <span class="attr">&quot;mark&quot;</span>: <span class="number">50</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;personD&quot;</span>, <span class="attr">&quot;mark&quot;</span>: <span class="number">80</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>In case of an unstable sort, we might get</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;personC&quot;</span>, <span class="attr">&quot;mark&quot;</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;personB&quot;</span>, <span class="attr">&quot;mark&quot;</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;personA&quot;</span>, <span class="attr">&quot;mark&quot;</span>: <span class="number">50</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;personD&quot;</span>, <span class="attr">&quot;mark&quot;</span>: <span class="number">80</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Notice how the relative order of two persons with the same mark is disrupted for an unstable sort.</p><p>Further reading: <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability">https://en.wikipedia.org/wiki/Sorting_algorithm#Stability</a></p><h3 id="Comparison-and-non-comparison-sorts"><a href="#Comparison-and-non-comparison-sorts" class="headerlink" title="Comparison and non-comparison sorts"></a>Comparison and non-comparison sorts</h3><p>Woah, just discovered this type of categorization of sorting algorithms: <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Comparison_of_algorithms">https://en.wikipedia.org/wiki/Sorting_algorithm#Comparison_of_algorithms</a></p><p>I think for most of the post here we will focus on Comparison sorts but would like to explore this topic as we explore various algorithms.</p><h2 id="Sorting-Algorithms"><a href="#Sorting-Algorithms" class="headerlink" title="Sorting Algorithms"></a>Sorting Algorithms</h2><h3 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h3><p>A very simple sorting technique. The reason it is called a selection sort is that we will <strong>select</strong> the lowest/highest element at a time and place it in a sorted manner.</p><p>I think this example from <a href="https://en.wikipedia.org/wiki/Selection_sort">Wikipedia</a> makes it clear</p><table><thead><tr><th>Sorted sublist</th><th>Unsorted sublist</th><th>Least element in unsorted list</th></tr></thead><tbody><tr><td>()</td><td>(11, 25, 12, 22, 64)</td><td>11</td></tr><tr><td>(11)</td><td>(25, 12, 22, 64)</td><td>12</td></tr><tr><td>(11, 12)</td><td>(25, 22, 64)</td><td>22</td></tr><tr><td>(11, 12, 22)</td><td>(25, 64)</td><td>25</td></tr><tr><td>(11, 12, 22, 25)</td><td>(64)</td><td>64</td></tr><tr><td>(11, 12, 22, 25, 64)</td><td>()    </td></tr></tbody></table><h4 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h4><p>So the intuition here is to <strong>select</strong> the lowest/highest number from the unsorted sublist and move it to sorted sublist.</p><h4 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h4><p>Finding the the lowest/highest element takes O(n). This search needs to be done n times in-order to get the final answer.</p><p>The number of items to be searched decreases by one each time. First we search n items, then (n-1) items:</p><p>n + (n-1) + (n-2) + …. + 1 </p><p>Now it boils to simple math, “Sum of first n natural numbers” = (n*(n+1))/2 = (n<sup>2</sup> + n) / 2</p><p>Now omitting the constants and lower degree, we arrive at the time complexity.</p><p><strong>O(n<sup>2</sup>)</strong></p><h4 id="Space-complexity"><a href="#Space-complexity" class="headerlink" title="Space complexity"></a>Space complexity</h4><p>We move the lowest/highest element each time to a sorted sublist. The space complexity really depends on the way we allocate this sorted sublist.</p><p>If we create a new list and append the lowest/highest each time, then we will end up with n allocations. So <strong>O(n)</strong>.</p><p>But if we implement our code in a way to just swap the (n-1)<sup>th</sup> index for the n<sup>th</sup> lowest/highest element, we would end up doing everything in-place. So <strong>O(1)</strong>.</p><h4 id="Step-by-step-code"><a href="#Step-by-step-code" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>First we try to write down the logic for finding the lowest number (assume we need to do ascending order sort).</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findSmallest</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    smallest := nums[<span class="number">0</span>]</span><br><span class="line">    smallestIdx := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &lt; smallest &#123;</span><br><span class="line">            smallest = nums[i]</span><br><span class="line">            smallestIdx = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> smallestIdx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we execute this n times, we will get back the same index. Our idea here is to reduce the length of the unsorted sublist being passed into the array, so that we get back the index of n<sup>th</sup> lowest item. So building up on that.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findSmallest</span><span class="params">(nums []<span class="keyword">int</span>, start <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    smallest := nums[start]</span><br><span class="line">    smallestIdx := start</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := start; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &lt; smallest &#123;</span><br><span class="line">            smallest = nums[i]</span><br><span class="line">            smallestIdx = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> smallestIdx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, we just call the <code>findSmallest</code> procedure n times and do a swap everytime to construct the sorted sublist.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;    </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        smallestIdx := findSmallest(nums, i)</span><br><span class="line">        nums[i], nums[smallestIdx] = nums[smallestIdx], nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Full-code"><a href="#Full-code" class="headerlink" title="Full code"></a>Full code</h4><p>Now, we have a Space = O(1) and Time = O(n<sup>2</sup>) implementation here!</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;    </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        smallestIdx := findSmallest(nums, i)</span><br><span class="line">        nums[i], nums[smallestIdx] = nums[smallestIdx], nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findSmallest</span><span class="params">(nums []<span class="keyword">int</span>, start <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    smallest := nums[start]</span><br><span class="line">    smallestIdx := start</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := start; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &lt; smallest &#123;</span><br><span class="line">            smallest = nums[i]</span><br><span class="line">            smallestIdx = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> smallestIdx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><ul><li><a href="https://en.wikipedia.org/wiki/Selection_sort">Wikipedia</a></li><li><a href="https://learning.oreilly.com/library/view/grokking-algorithms-an/9781617292231/kindle_split_008.html">Book: Grokking Algorithms: An illustrated guide for programmers and other curious people</a></li></ul><h3 id="Bubble-Sort"><a href="#Bubble-Sort" class="headerlink" title="Bubble Sort"></a>Bubble Sort</h3><p>Values are bubbled up while sorting using Bubble sort. Lets see what we mean by “bubbling up”.</p><p>The way bubble sort works is, we compare i and i+1 elements and swap them if i<sup>th</sup> element is greater than (i+1)<sup>th</sup> element. If we do this repeatedly for ~n times, the greater elements would start bubbling up at the end of the list and the list will be sorted at the end.</p><p>Consider the example of sorting: [5, 4, 6, 2, 1] (into an ascending order list)</p><p><code>i=0</code>; First we compare 5 and 4. Since <code>5 &gt; 4</code>, we swap.</p><p>4 5 6 2 1</p><p><code>i=1</code>; We compare 5 and 6. Since <code>5 &lt; 6</code>, no swap.</p><p>4 5 6 2 1</p><p><code>i=2</code>; We compare 6 and 2. Since <code>6 &gt; 2</code>, we swap.</p><p>4 5 2 6 1</p><p><code>i=3</code>; We compare 6 and 1. Since <code>6 &gt; 1</code>, we swap.</p><p>4 5 2 1 6</p><p>That’s it! Notice how 6 (the highest number) got <strong>bubbled up</strong> at the end of the list.</p><p>If we perform the same procedure n times, we will end up bubbling all the n highest numbers, thus resulting in sorted order.</p><h4 id="Intuition-1"><a href="#Intuition-1" class="headerlink" title="Intuition"></a>Intuition</h4><p>Bubble up the highest number to the last and build up the sorted list from backwards.</p><h4 id="Time-Complexity-1"><a href="#Time-Complexity-1" class="headerlink" title="Time Complexity"></a>Time Complexity</h4><p>We are performing in-memory swaps upto the n-1<sup>th</sup> index in the first iteration. At this point, the highest number is bubbled up at the <code>n-1</code><sup>th</sup> index.</p><p>In the second iteration, we perform swapping upto the n-2<sup>th</sup> index. At this point, the highest number is bubbled up at the <code>n-2</code><sup>th</sup> index.</p><p>This iteration happens n times and for each iteration the length of the unsorted list goes down by one.</p><p>n + (n-1) + (n-2) + …. + 1 </p><p>Again it boils to simple math, “Sum of first n natural numbers” = (n*(n+1))/2 = (n<sup>2</sup> + n) / 2</p><p>Now omitting the constants and lower degree, we arrive at the time complexity.</p><p><strong>O(n<sup>2</sup>)</strong></p><h4 id="Space-Complexity"><a href="#Space-Complexity" class="headerlink" title="Space Complexity"></a>Space Complexity</h4><p>This is easy to figure out because we are not allocating any new structures during the process. We are just doing a bunch of in-memory swaps.</p><p>So, <strong>O(1)</strong></p><h4 id="Step-by-step-code-1"><a href="#Step-by-step-code-1" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>First, we will handle for the case where array is of size 0 or 1. In that case, we just need to return back the same array.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, we will try to get the “bubble up” code done. This part of the code will just bubble the highest element. Once we have this logic, we just perform the logic for n times to bubble up all the elements.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= (<span class="built_in">len</span>(nums)<span class="number">-2</span>); i++ &#123;</span><br><span class="line">    <span class="keyword">if</span> nums[i] &gt; nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">        nums[i], nums[i+<span class="number">1</span>] = nums[i+<span class="number">1</span>], nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cool, we will wrap up the bubble up code with a loop running n times.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; <span class="built_in">len</span>(nums); n++ &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= (<span class="built_in">len</span>(nums)<span class="number">-2</span>); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &gt; nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">            nums[i], nums[i+<span class="number">1</span>] = nums[i+<span class="number">1</span>], nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That’s it, we should now have nums sorted in-memory. We can try to do one optimisation here. Since we bubble up the highest element, we can avoid trying the swapping logic on already bubbled up values. So, instead of iterating up to <code>len(nums)-2</code> index, we will iterate up to <code>(len(nums)-2)-n)</code> index, so that we avoid the index of already bubbled up values.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; <span class="built_in">len</span>(nums); n++ &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= ((<span class="built_in">len</span>(nums)<span class="number">-2</span>)-n) ; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &gt; nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">            nums[i], nums[i+<span class="number">1</span>] = nums[i+<span class="number">1</span>], nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Full-code-1"><a href="#Full-code-1" class="headerlink" title="Full code"></a>Full code</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; <span class="built_in">len</span>(nums); n++ &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= ((<span class="built_in">len</span>(nums)<span class="number">-2</span>)-n) ; i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">                nums[i], nums[i+<span class="number">1</span>] = nums[i+<span class="number">1</span>], nums[i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources-1"><a href="#Resources-1" class="headerlink" title="Resources"></a>Resources</h4><ul><li><a href="https://www.youtube.com/watch?v=6Gv8vg0kcHc">Hackerrank Youtube</a></li></ul><h3 id="Insertion-sort"><a href="#Insertion-sort" class="headerlink" title="Insertion sort"></a>Insertion sort</h3><p>At first, it felt similar to selection sort and made me wonder what actually is the difference between them.</p><p>I would say that insertion sort is little bit intelligent than both of the above algorithms: selection sort and bubble sort. This is because when we feed an already sorted array or an <em>almost</em> sorted array to those algorithms, they don’t understand that it is an already/almost sorted array and run for O(n<sup>2</sup>) time, no matter what.</p><p>But in that case, insertion sort seem to run just for O(n) time. <a href="https://www.youtube.com/watch?v=eTvQIbB-AuE">This video</a> gave an example of where we might get an already/almost sorted database: think of a database where keys are already sorted.</p><h4 id="Intuition-2"><a href="#Intuition-2" class="headerlink" title="Intuition"></a>Intuition</h4><p>Given an array, consider the first element to be sorted already. Start from the next element and <em>insert</em> it at the right position in the sorted array. If the element is already in the right position of the sorted array, we just move to the next position.</p><p>(I recommend you to watch the video resources below to get more idea about this technique)</p><h4 id="Time-complexity"><a href="#Time-complexity" class="headerlink" title="Time complexity"></a>Time complexity</h4><p>Worst and Average case: O(n<sup>2</sup>) because it would take (n(n+1))/2 swaps in these cases.</p><p>Best case: When the array is already sorted, insertion sort just takes O(n) times. If you compare this with selection sort and bubble sort, they both take O(n<sup>2</sup>). Hence insertion sort is a better choice.</p><h4 id="Space-complexity-1"><a href="#Space-complexity-1" class="headerlink" title="Space complexity"></a>Space complexity</h4><p>Swaps are done in-place.</p><p>So <strong>O(n)</strong></p><h4 id="Step-by-step-code-2"><a href="#Step-by-step-code-2" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>First we start with the second item in the array.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">1</span> ; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">    <span class="comment">// take i-th element and insert it in the right position of the sorted sub-array</span></span><br><span class="line">    <span class="comment">// and index in sorted sub-array obeys 0 &lt;= idx &lt; i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, we just insert the i-th element at the right place of the array.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">1</span> ; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">    <span class="keyword">for</span> j := i; (j &gt; <span class="number">0</span>) &amp;&amp; (nums[j] &lt; nums[j<span class="number">-1</span>]); j-- &#123;</span><br><span class="line">        nums[j], nums[j<span class="number">-1</span>] = nums[j<span class="number">-1</span>], nums[j]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Full-code-2"><a href="#Full-code-2" class="headerlink" title="Full code"></a>Full code</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span> ; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := i; (j &gt; <span class="number">0</span>) &amp;&amp; (nums[j] &lt; nums[j<span class="number">-1</span>]); j-- &#123;</span><br><span class="line">            nums[j], nums[j<span class="number">-1</span>] = nums[j<span class="number">-1</span>], nums[j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources-2"><a href="#Resources-2" class="headerlink" title="Resources"></a>Resources</h4><ul><li><a href="https://www.youtube.com/watch?v=O0VbBkUvriI">CS50 Insertion sort</a></li><li>:star: <a href="https://www.youtube.com/watch?v=eTvQIbB-AuE">San Diego State University - Rob Edwards - Insertion Sort</a></li><li><a href="https://en.wikipedia.org/wiki/Insertion_sort">Insertion Sort Wikipedia</a></li></ul><h3 id="Merge-sort"><a href="#Merge-sort" class="headerlink" title="Merge sort"></a>Merge sort</h3><p>Merge sort is a good example for divide and conquer algorithm. It is easy to solve this problem by thinking in recursion. To give a mental model of what a merge sort looks like, I am going to use a nice picture that I found in <a href="https://en.wikipedia.org/wiki/Merge_sort">Wikipedia</a></p><p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e6/Merge_sort_algorithm_diagram.svg" alt="mergesort"></p><p>Found this insight in <a href="http://www.algorist.com/">The Algorithm Design Manual book</a>,</p><blockquote><p>Mergesort is a great algorithm for sorting linked lists, because it does not rely on random access to elements as does heapsort or quicksort.</p></blockquote><h4 id="Intution"><a href="#Intution" class="headerlink" title="Intution"></a>Intution</h4><p>Split the array to be sorted into two, sort those individually, and merge them back together. Repeatedly apply this on the divided arrays. When the divided array has only one element, it is already sorted. (That’s the point where we stop splitting and merging back starts!)</p><h4 id="Time-complexity-1"><a href="#Time-complexity-1" class="headerlink" title="Time complexity"></a>Time complexity</h4><p>Recommending the <a href="https://youtu.be/Kg4bqzAqRBM?t=1487">MIT 6.006 Merge Sort video</a> to figure out how this is done.</p><p>At each level of splitted arrays, we access <code>n</code> items and we would have a total of <code>log n</code> levels. Hence, time complexity is <strong>O(n log n)</strong></p><h4 id="Space-complexity-2"><a href="#Space-complexity-2" class="headerlink" title="Space complexity"></a>Space complexity</h4><p>I tried implementing merge sort with the help of “Top Down Split Merge” + “Two queues” like mentioned in <a href="http://www.algorist.com/">The Algorithm Design Manual book</a>. I think the space for this method is also <strong>O(n log n)</strong>.</p><p>But if we follow the algorithm where we use a temporary array instead of allocating two queues everytime , we can get an <strong>O(n)</strong> space complexity.</p><h4 id="Step-by-step-code-3"><a href="#Step-by-step-code-3" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>We will try to code the temp array method here! Two queue method is relatively easy. You should try doing the two queue method first if you are not sure. (I have provided the two queue technique in the full code section below.</p><p>Prepare for a recursive ride! haha. Merge sort has two parts: Split and Merge (remember the diagram).</p><p>first, we make a temporary array (which we use to merge) and call merge sort procedure from index <code>0</code> to <code>n-1</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    temp := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">    ms(nums, temp, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>ms</code> call does the split. then we call a merge function to perform the merge.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ms</span><span class="params">(nums, temp []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">        mid := (low + high) / <span class="number">2</span></span><br><span class="line">        ms(nums, temp, low, mid)</span><br><span class="line">        ms(nums, temp, mid+<span class="number">1</span>, high)</span><br><span class="line">        merge(nums, temp, low, mid, high)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now the merge part:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(nums, temp []<span class="keyword">int</span>, low, mid, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    i1 := low</span><br><span class="line">    i2 := mid+<span class="number">1</span></span><br><span class="line">    i := low</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i1 &lt;= mid) &amp;&amp; (i2 &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i1] &lt;= nums[i2] &#123;</span><br><span class="line">            temp[i] = nums[i1]</span><br><span class="line">            i1++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[i] = nums[i2]</span><br><span class="line">            i2++</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i1 &lt;= mid &#123;</span><br><span class="line">        temp[i] = nums[i1]</span><br><span class="line">        i++</span><br><span class="line">        i1++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i2 &lt;= high &#123;</span><br><span class="line">        temp[i] = nums[i2]</span><br><span class="line">        i++</span><br><span class="line">        i2++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := low; i &lt;= high; i++ &#123;</span><br><span class="line">        nums[i] = temp[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The thing that I miss out is the last section of the merge where we copy the temp array to the source array.</p><h4 id="Full-code-3"><a href="#Full-code-3" class="headerlink" title="Full code"></a>Full code</h4><h5 id="Two-queues"><a href="#Two-queues" class="headerlink" title="Two queues"></a>Two queues</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    ms(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ms</span><span class="params">(nums []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">        mid := (low + high) / <span class="number">2</span></span><br><span class="line">        ms(nums, low, mid)</span><br><span class="line">        ms(nums, mid+<span class="number">1</span>, high)</span><br><span class="line">        merge(nums, low, mid, high)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Queue <span class="keyword">struct</span> &#123;</span><br><span class="line">    qList *list.List</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewQueue</span><span class="params">()</span> *<span class="title">Queue</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Queue&#123;</span><br><span class="line">        qList: list.New(),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Enqueue</span><span class="params">(item <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    q.qList.PushBack(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Dequeue</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> q.qList.Remove(q.qList.Front()).(<span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Empty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> q.qList.Len() == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Top</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> q.qList.Front().Value.(<span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(nums []<span class="keyword">int</span>, low, mid, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> q1 = NewQueue()</span><br><span class="line">    <span class="keyword">var</span> q2 = NewQueue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := low; i &lt;= mid; i++ &#123;</span><br><span class="line">        q1.Enqueue(nums[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := mid+<span class="number">1</span>; i &lt;= high; i++ &#123;</span><br><span class="line">        q2.Enqueue(nums[i])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    i := low</span><br><span class="line">    <span class="keyword">for</span> !q1.Empty() &amp;&amp; !q2.Empty() &#123;</span><br><span class="line">        <span class="keyword">if</span> q1.Top() &lt; q2.Top() &#123;</span><br><span class="line">            nums[i] = q1.Dequeue()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums[i] = q2.Dequeue()</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> !q1.Empty() &#123;</span><br><span class="line">        nums[i] = q1.Dequeue()</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> !q2.Empty() &#123;</span><br><span class="line">        nums[i] = q2.Dequeue()</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Temporary-array"><a href="#Temporary-array" class="headerlink" title="Temporary array"></a>Temporary array</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    temp := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">    ms(nums, temp, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ms</span><span class="params">(nums, temp []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">        mid := (low + high) / <span class="number">2</span></span><br><span class="line">        ms(nums, temp, low, mid)</span><br><span class="line">        ms(nums, temp, mid+<span class="number">1</span>, high)</span><br><span class="line">        merge(nums, temp, low, mid, high)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(nums, temp []<span class="keyword">int</span>, low, mid, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    i1 := low</span><br><span class="line">    i2 := mid+<span class="number">1</span></span><br><span class="line">    i := low</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i1 &lt;= mid) &amp;&amp; (i2 &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i1] &lt;= nums[i2] &#123;</span><br><span class="line">            temp[i] = nums[i1]</span><br><span class="line">            i1++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[i] = nums[i2]</span><br><span class="line">            i2++</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i1 &lt;= mid &#123;</span><br><span class="line">        temp[i] = nums[i1]</span><br><span class="line">        i++</span><br><span class="line">        i1++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i2 &lt;= high &#123;</span><br><span class="line">        temp[i] = nums[i2]</span><br><span class="line">        i++</span><br><span class="line">        i2++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := low; i &lt;= high; i++ &#123;</span><br><span class="line">        nums[i] = temp[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources-3"><a href="#Resources-3" class="headerlink" title="Resources"></a>Resources</h4><ul><li><a href="https://en.wikipedia.org/wiki/Merge_sort">Merge Sort Wikipedia</a></li><li><a href="https://youtu.be/Kg4bqzAqRBM?t=1487">MIT 6.006 Merge Sort</a></li><li><a href="http://www.algorist.com/">The Algorithm Design Manual Book</a></li><li>:star: <a href="https://www.youtube.com/watch?v=jr10xrAFSEg">San Diego State University - Rob Edwards - Merge Sort</a> (Despite the black screen problem in the video, I still think the video did a good job of explaining the merge part)</li></ul><h3 id="Quick-sort"><a href="#Quick-sort" class="headerlink" title="Quick sort"></a>Quick sort</h3><p>Quicksort is one of the sorting algorithms that I have noticed in practice often. For example, I remember noticing <code>QSORT</code> while reading <a href="https://github.com/git/git/search?q=QSORT&amp;unscoped_q=QSORT">git’s source code</a> on how git suggests commands when we make a mistake while typing a git command.</p><p>Also, I have read that quick sort seems to be a choice for standard library implementation of sorting in some programming languages. Example: <a href="https://golang.org/src/sort/sort.go?s=8174:8200#L183">Go’s sort package</a></p><p>There are different flavors of qsort and one needs to consider the tradeoffs to choose the one that suits their needs. For example, <a href="https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme">Lomuto Partition Scheme</a> chooses the pivot point as the last element of the array and performs qsort, whereas </p><h4 id="Intuition-3"><a href="#Intuition-3" class="headerlink" title="Intuition"></a>Intuition</h4><p>Choose a pivot point (probably the last element of the array) and partition lesser and higher elements based on the pivot. Perform the pivot and partition logic recursively for the partitions.</p><h4 id="Time-complexity-2"><a href="#Time-complexity-2" class="headerlink" title="Time complexity"></a>Time complexity</h4><p>If the pivot point we choose is approximately the middle of the sorted list, then the list is divided equally (like merge sort). So quick sort has a time complexity of <strong>O(n log n)</strong> for the best and average case.</p><p>For the worst case, (where we choose the pivot point as the first or last element of the sorted array as the first pivot), the algorithm performs O(n<sup>2</sup>).</p><h4 id="Space-complexity-3"><a href="#Space-complexity-3" class="headerlink" title="Space complexity"></a>Space complexity</h4><p>For the best and average case, the space complexity would be <strong>(log n)</strong> (because of the call stack used for recursion). In the worst case, that would become <strong>O(n)</strong></p><h4 id="Step-by-step-code-4"><a href="#Step-by-step-code-4" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>First, we write the recursive logic of partition and qsort.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qsort</span><span class="params">(nums []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">        p := part(nums, low, high)</span><br><span class="line">        qsort(nums, low, p<span class="number">-1</span>)</span><br><span class="line">        qsort(nums, p+<span class="number">1</span>, high)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, we implement the partitioning logic. I am using the <a href="https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme">Lomuto Partition Scheme</a> here.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">part</span><span class="params">(nums []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    pivot := nums[high]</span><br><span class="line">    i := low</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j := low; j &lt;= high; j++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[j] &lt; pivot &#123;</span><br><span class="line">            nums[j], nums[i] = nums[i], nums[j]</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nums[i], nums[high] = nums[high], nums[i]</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Full-code-4"><a href="#Full-code-4" class="headerlink" title="Full code"></a>Full code</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    qsort(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qsort</span><span class="params">(nums []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">        p := part(nums, low, high)</span><br><span class="line">        qsort(nums, low, p<span class="number">-1</span>)</span><br><span class="line">        qsort(nums, p+<span class="number">1</span>, high)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">part</span><span class="params">(nums []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    pivot := nums[high]</span><br><span class="line">    i := low</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j := low; j &lt;= high; j++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[j] &lt; pivot &#123;</span><br><span class="line">            nums[j], nums[i] = nums[i], nums[j]</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nums[i], nums[high] = nums[high], nums[i]</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources-4"><a href="#Resources-4" class="headerlink" title="Resources"></a>Resources</h4><ul><li>:star: <a href="https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme">Quick sort Wikipedia</a></li><li><a href="https://www.youtube.com/watch?v=ZHVk2blR45Q">San Diego State University - Rob Edwards - Quick sort</a></li><li><a href="https://www.youtube.com/watch?v=auclbmnm4iA">San Diego State University - Rob Edwards - Quick sort worst case</a></li><li><a href="https://www.youtube.com/watch?v=4IE3wIXFVPc">San Diego State University - Rob Edwards - Quicksort code</a></li></ul><h3 id="Heap-sort"><a href="#Heap-sort" class="headerlink" title="Heap sort"></a>Heap sort</h3><p>The most important idea behind heap sort is to first build a heap out of the given array. A heap is just a common way of implementing a priority queue. A priority queue is just a data-structure, where we could request for an element with either the largest or smallest priority at a given point of time.</p><p>With that Intuition, the implementation could be pretty simple. Consider a language with a priority queue implementation built into the standard library like C++. In this case, we could write something like,</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sortArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="comment">// build a min-heap</span></span><br><span class="line">        <span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, <span class="built_in">std</span>::greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">            q.push(n);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            result.push_back(q.top());</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>We just create a min-heap and extract the minimum element each time and append it to a list. While this approach involves allocating space, there is a way to achieve this in-memory if the input is an array.</p><h4 id="Intuition-4"><a href="#Intuition-4" class="headerlink" title="Intuition"></a>Intuition</h4><p>Construct a max-heap and pick the largest element using it, one at a time to fill it at the end of the sorted list.</p><h4 id="Time-complexity-3"><a href="#Time-complexity-3" class="headerlink" title="Time complexity"></a>Time complexity</h4><p>I recommend watching the <a href="https://www.youtube.com/watch?v=B7hVxCmfPtM">MIT 6.006 Heaps and Heap sort</a> lecture for deriving the time complexity. It seems like building a heap from scratch is O(n) and extracting a min/max element seems to be O(log n) since we extract the min/max n times, the time complexity would be <strong>O(n log n)</strong></p><h4 id="Space-complexity-4"><a href="#Space-complexity-4" class="headerlink" title="Space complexity"></a>Space complexity</h4><p>A naive implementation of constructing a priority queue from scratch (like with standard library code or any other library) might lead to O(n).</p><p>But we will be using a binary heap (just represented in-place in the given array), there is no extra space allocated. So the space complexity would be <strong>O(1)</strong>.</p><p>This might seem to be the best algorithm so far, but there should be something that we are losing, right? It is the stableness. Seems like heap sort is not stable.</p><h4 id="Step-by-step-code-5"><a href="#Step-by-step-code-5" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>We need to learn and remember about a few array-tree math before trying to code it. First binary heaps are array representation of a binary tree.</p><p>[0 1 2 3 4]</p><p>Value at 0 is the root node. values at 1 and 2 are children of the root node (0). The children of 1 would be 3 and 4.</p><p>This leads to arriving at the following formulae.</p><p>the left child of a node at index i is given by <code>(2 * i) + 1</code> and right child of a node at index i is given by <code>(2 * i) + 2</code>.</p><p>If there are n nodes, <code>(n/2) - 1</code>th index will give the node whose children will all be leaf nodes. This is a very useful insight that I got from <a href="https://www.youtube.com/watch?v=B7hVxCmfPtM">MIT 6.006 Heaps and Heap sort</a>. This means that, since its children are leaf nodes, they already satisfy the heap property and it might be the right place to start recursion procedure for building up the heap from bottom up.</p><p>Ok, let’s start writing this! First, we call the <code>heapify</code> procedure from <code>(n/2)-1</code>th index to <code>0</code>th index</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := (<span class="built_in">len</span>(nums)/<span class="number">2</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">    heapify(nums, <span class="built_in">len</span>(nums), i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With this, the root node is guaranteed to have the largest element. So, we start filling up the array from back by extracting the max element. Every time we extract the max element, the heap becomes dirty. So we could just call heapify for only the unsorted sub-array at the beginning.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="built_in">len</span>(nums)<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">    nums[i], nums[<span class="number">0</span>] = nums[<span class="number">0</span>], nums[i]</span><br><span class="line">    heapify(nums, i, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ok, now we start implementing the heapify function.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">heapify</span><span class="params">(nums []<span class="keyword">int</span>, n, idx <span class="keyword">int</span>)</span></span> &#123;    </span><br><span class="line">    largest := idx</span><br><span class="line">    left := (<span class="number">2</span> * idx) + <span class="number">1</span></span><br><span class="line">    right := (<span class="number">2</span> * idx) + <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> left &lt; n &amp;&amp; nums[largest] &lt; nums[left] &#123;</span><br><span class="line">        largest = left</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> right &lt; n &amp;&amp; nums[largest] &lt; nums[right] &#123;</span><br><span class="line">        largest = right</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> largest != idx &#123;</span><br><span class="line">        nums[idx], nums[largest] = nums[largest], nums[idx]</span><br><span class="line">        </span><br><span class="line">        heapify(nums, n, largest)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Full-code-5"><a href="#Full-code-5" class="headerlink" title="Full code"></a>Full code</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := (<span class="built_in">len</span>(nums)/<span class="number">2</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        heapify(nums, <span class="built_in">len</span>(nums), i)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(nums)<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        nums[i], nums[<span class="number">0</span>] = nums[<span class="number">0</span>], nums[i]</span><br><span class="line">        heapify(nums, i, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">heapify</span><span class="params">(nums []<span class="keyword">int</span>, n, idx <span class="keyword">int</span>)</span></span> &#123;    </span><br><span class="line">    largest := idx</span><br><span class="line">    left := (<span class="number">2</span> * idx) + <span class="number">1</span></span><br><span class="line">    right := (<span class="number">2</span> * idx) + <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> left &lt; n &amp;&amp; nums[largest] &lt; nums[left] &#123;</span><br><span class="line">        largest = left</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> right &lt; n &amp;&amp; nums[largest] &lt; nums[right] &#123;</span><br><span class="line">        largest = right</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> largest != idx &#123;</span><br><span class="line">        nums[idx], nums[largest] = nums[largest], nums[idx]</span><br><span class="line">        </span><br><span class="line">        heapify(nums, n, largest)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources-5"><a href="#Resources-5" class="headerlink" title="Resources"></a>Resources</h4><ul><li><a href="https://www.youtube.com/watch?v=B7hVxCmfPtM">MIT 6.006 Heaps and Heap sort</a></li><li><a href="https://www.geeksforgeeks.org/heap-sort/">GeeksForGeeks solution</a> (this closely follows the ideas behind the MIT 6.006 lecture)</li></ul><h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p>Leaving the space for this blog post to get updated. Some interesting sorting algorithms to watch out for are</p><ul><li>BST sort</li><li>AVL sort</li><li>Shell sort</li><li>Counting sort</li><li>Radix sort</li></ul><p>( you <a href="https://twitter.com/scriptnull">tell me</a> )</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I kind of procrastinate over starting to learn about sorting whenever I am preparing for interviews. Mainly because we need to memorize t
      
    
    </summary>
    
    
      <category term="programming" scheme="https://vishnubharathi.codes/tags/programming/"/>
    
      <category term="data structures" scheme="https://vishnubharathi.codes/tags/data-structures/"/>
    
      <category term="algorithms" scheme="https://vishnubharathi.codes/tags/algorithms/"/>
    
      <category term="tech interviews" scheme="https://vishnubharathi.codes/tags/tech-interviews/"/>
    
      <category term="go" scheme="https://vishnubharathi.codes/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Paper notes: Key-Value Storage Engines</title>
    <link href="https://vishnubharathi.codes/blog/paper-notes-key-value-storage-engines/"/>
    <id>https://vishnubharathi.codes/blog/paper-notes-key-value-storage-engines/</id>
    <published>2020-08-11T03:18:16.000Z</published>
    <updated>2020-12-25T11:33:40.250Z</updated>
    
    <content type="html"><![CDATA[<p>These are my notes and thoughts that came up while reading this research paper called <a href="https://stratos.seas.harvard.edu/files/stratos/files/keyvaluestorageengines.pdf">Key-Value Storage Engines</a>.</p><p>I first came across this paper in <a href="https://tikv-wg.slack.com/archives/CGQ6VFATU/p1589836557016600">TiKV’s slack</a>. I have been wanting to read it ever since! (and pulled it off early morning yesterday). I think the paper is a short one compared to any of the papers that I have read. It was published recently and so it contains notes about the latest key-value stores.</p><blockquote><p>we survey the state-of-the-art approaches on how the core storage engine of a key-value store system is designed.</p></blockquote><p>On the side: I was wondering how to discover new research papers to read about in topics of interest. My current interest is in databases (more specifically key-value stores and hybrid stores). Seems like one efficient way is to take on an introductory paper (like the one we are going to discuss here), read it, and see how it aligns with the goals. If you got what you want, go and check the other works of the author(s) of the paper. I did the same for this and ended up amazed by the work <a href="https://stratos.seas.harvard.edu/">the authors</a> of this paper.</p><p>Speaking of authors, let me put up the ACM reference format here to give credit to the authors and the paper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stratos Idreos and Mark Callaghan. 2020. Key-Value Storage En-</span><br><span class="line">gines. In Proceedings of the 2020 ACM SIGMOD International Con-</span><br><span class="line">ference on Management of Data (SIGMOD’20), June 14–19, 2020,</span><br><span class="line">Portland, OR, USA. ACM, New York, NY, USA, 6 pages. https:&#x2F;&#x2F;doi.</span><br><span class="line">org&#x2F;10.1145&#x2F;3318464.3383133</span><br></pre></td></tr></table></figure><h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><p>The main contents of the paper are divided into three parts</p><ol><li>Key-value storage engines and applications</li><li>State of art engine design</li><li>Self-Designing NoSQL storage</li></ol><h2 id="Key-value-storage-engines-and-applications"><a href="#Key-value-storage-engines-and-applications" class="headerlink" title="Key-value storage engines and applications"></a>Key-value storage engines and applications</h2><p>Key-value stores could be used in a lot of places.</p><blockquote><p>graph processing in social media [9, 14], to event log processing in cybersecurity [15], application data caching [51], NoSQL stores [57], flash translation layer design [21], time-series management [42, 43], and online transaction processing [26].</p></blockquote><p>One interesting take in this section: <strong>Key Value Stores are used in SQL systems</strong></p><p>I have mostly viewed tables in SQL systems as “tables” (you get me!). This paper lays the base work of thinking about SQL tables in terms of key-value stores.</p><blockquote><p>FoundationDB is a core part of Snowflake, while My-Rocks integrates RockDB in MySQL as its back-end storage.</p></blockquote><p>It seems like modern databases seem to use a distributed key-value store as a building block. I have noticed this pattern recently in “TiKV being used as the underlying store as TiDB”.</p><p>Apart from the applications, the section introduces properties like read, update, and memory amplification. Each key-value store has different properties and it is up to the users to choose a store based on their workloads.</p><p>By reading this section, I mostly understood this:</p><blockquote><p>There is no Perfect Design.</p></blockquote><p>If we are trying to build a key-value store from scratch, we must first understand and accept the trade-offs. Ask questions and arrive at answers like</p><p>Q: What kind of workload will be suited the most for the store?</p><p>A: It suits the most for frequent reads and in-frequent bulk inserts.</p><p>An example mentioned in this paper is <a href="https://github.com/spotify/sparkey">sparkey</a>, a key-value storage library from Spotify which does that tradeoff.</p><h2 id="State-of-art-engine-design"><a href="#State-of-art-engine-design" class="headerlink" title="State of art engine design"></a>State of art engine design</h2><p>Before this paper, I usually took the time to think about the outer-most layers of key-value stores like the communication protocols, how are we going to store data in-memory. This paper jumps right into the core - how data is stored on the disk? How data is first stored in memory and moved to disk afterward?</p><h3 id="Big-three"><a href="#Big-three" class="headerlink" title="Big three"></a>Big three</h3><p>The paper introduces about three data-structures to be at the core of the state of art storage designs.</p><ol><li>B+ tree</li><li>Log-structures merge-tree (LSM tree)</li><li>Log and Index (LSH table)</li></ol><p>That’s it! If I just learn about them, then I should have a basic idea about what’s going on in most databases.</p><h4 id="B-tree"><a href="#B-tree" class="headerlink" title="B+ tree"></a>B+ tree</h4><blockquote><p>B+ tree is the backbone design of the BerkeleyDB key-value store [53], now owned by Oracle, and the backbone of the WiredTiger key-value store [66], now used as the primary storage engine in MongoDB [52]. FoundationDB [8] also relies on a B+ tree.</p></blockquote><h4 id="LSM-tree"><a href="#LSM-tree" class="headerlink" title="LSM tree"></a>LSM tree</h4><p>This is usually augmented with some-other things like:</p><blockquote><p>In-memory structures such as Bloom filters, fence pointers and Tries help filter queries to avoid disk I/O [19, 67].</p></blockquote><p>In practice: </p><blockquote><p> This design has been adopted in numerous industrial settings including LevelDB [30] and BigTable [17] at Google, RocksDB [27] at Facebook, Cassandra [45], HBase [33] and Accumulo [7] at Apache, Voldemort [47] at LinkedIn, Dynamo [24] at Amazon, WiredTiger [66] at MongoDB, and bLSM [61] and cLSM [29] at Yahoo, and more designs in research such as SlimDB [58], WiscKey [49], Monkey [19, 20], Dostoevsky [22], and LSM-bush [23].</p></blockquote><h4 id="Log-and-index"><a href="#Log-and-index" class="headerlink" title="Log and index"></a>Log and index</h4><blockquote><p>This Log and Index design is employed by BitCask [62] at Riak, Sparkey [64] at Spotify, FASTER [16] at Microsoft, and many more systems in research [2, 46, 59].</p></blockquote><p>I guess that the concrete implementation of this technique is called Log-Structured Hash tables.</p><blockquote><p>Most systems use a hash table as the index over the log.</p></blockquote><h3 id="Design-Descisions"><a href="#Design-Descisions" class="headerlink" title="Design Descisions"></a>Design Descisions</h3><p>The remainder of this section deals with various design considerations that we need to be aware of while building a key-value store. </p><ol><li>Memory management</li><li>Compactions and Splits</li><li>Concurrency control</li><li>Time travel queries</li><li>CPU vs I/O Cost</li><li>Adaptive Indexing and layouts</li></ol><h4 id="Memory-management"><a href="#Memory-management" class="headerlink" title="Memory management"></a>Memory management</h4><blockquote><p>One of the most critical decisions in key-value stores is how to distribute the available bits across the various in-memory components. For example, in an LSM-tree like design, it is common to have numerous Bloom-filters in memory and other helper structures to help skip disk reads.</p></blockquote><h4 id="Compaction-and-Splits"><a href="#Compaction-and-Splits" class="headerlink" title="Compaction and Splits"></a>Compaction and Splits</h4><blockquote><p>Depending on the exact design a NoSQL engine will need to frequently reorganize data such as to maintain certain performance invariants. For example, an LSM-tree like design needs to perform compactions as new data arrives such as to maintain order and remove past invalid values that have been updated out of place.</p></blockquote><p>Compactions can happen in two ways: in-place and out-of-place compactions. Out-of-place compaction allows queries to be served while the compaction is happening. The way it does it is by having a duplicated in-memory copy from which the query could be served while the actual data is undergoing compaction. For in-place compactions, the query will block.</p><p>So, we know one new thing about LSM trees from this section: They don’t block queries while undergoing compactions.</p><h4 id="Concurrency-control"><a href="#Concurrency-control" class="headerlink" title="Concurrency control"></a>Concurrency control</h4><blockquote><p>LSM-trees are inherently more able to process concurrent requests compared to a typical B-tree design because they update data out of place. Similarly, a log-structured hash table design goes a step further by performing much fewer compactions and thus creating fewer conflicts for reads and writes (at the expense of read cost). B-tree designs can also adopt an out of place approach by stacking updates in leaf nodes like BW-tree or across any node like Bε tree.)</p></blockquote><h4 id="Time-travel-queries"><a href="#Time-travel-queries" class="headerlink" title="Time travel queries"></a>Time travel queries</h4><p>Key-value stores might be designed to store timestamps along with key-value pairs. This choice opens up the possibility for implementation of features like</p><ol><li>Multiple versions of the same key could be stored</li><li>TTL (Ability to automatically remove the key-value pair after certain amount of time)</li></ol><blockquote><p>if timestamps are stored inline with the base date, then this can lead to significant overheads for all queries (since timestamps will need to be read along with the base data).</p></blockquote><h4 id="CPU-vs-I-O-Cost"><a href="#CPU-vs-I-O-Cost" class="headerlink" title="CPU vs I/O Cost"></a>CPU vs I/O Cost</h4><blockquote><p>using compression leads to increased CPU costs and the exact form of compression used defines the balance of I/O saved versus CPU sacrificed.</p></blockquote><p>So if we are trying to build a database, we need to decide whether if we are going to support compression of data and have to get an idea about various types of compression.</p><h4 id="Adaptive-Indexing-and-Layouts"><a href="#Adaptive-Indexing-and-Layouts" class="headerlink" title="Adaptive Indexing and Layouts"></a>Adaptive Indexing and Layouts</h4><blockquote><p>Adaptive indexing [36] is a lightweight approach in self-tuning databases. Adaptive indexing addresses the limitations of offline and online indexing for dynamic workloads; it reacts to workload changes by building or refining indices partially and incrementally as part of query processing.</p></blockquote><p>Before going on to adaptive indexing, we need to think about just “indexing”. How are we going to store the index of keys in-memory? What if there are a lot of keys? Is it possible to index only a partial set of keys and swap out the partial to load the parts that we need? Things like these!</p><p>Now we are allowed to get excited about newer research on adaptive indexing - what if the key-value store automatically figures out what to index based on the access patterns of the workload? - exciting, huh?</p><h2 id="Self-Designing-NoSQL-storage"><a href="#Self-Designing-NoSQL-storage" class="headerlink" title="Self-Designing NoSQL storage"></a>Self-Designing NoSQL storage</h2><p>This section of the paper mostly deals with the special interest of the authors - Self-tuning databases. You can read up this section of the paper if you are interested. I didn’t understand much, but in simple terms, they are trying to describe data systems that self-tune it’s configuration <em>near instantly</em> (ah, interesting!) on live workloads.</p><p>That leads me to a project written by one of the authors of this paper called CrimsonDB - <a href="https://demosubmitter.github.io/">https://demosubmitter.github.io/</a></p><p>If this sounds exciting, the next step for this is exploring the <a href="https://stratos.seas.harvard.edu/files/stratos/files/datacalculator.pdf">Data Calculator</a> paper which gives an idea about “how we can synthesize more data structures than stars on the sky to pick the right one for a given problem”.</p><h2 id="Questions-to-work-on"><a href="#Questions-to-work-on" class="headerlink" title="Questions to work on"></a>Questions to work on</h2><p>Arrived at a list of questions by reading this paper: </p><p>(I believe each one has the potential to become a blog post on its own)</p><ol><li>What is a B+ tree?</li><li>What is an LSM tree?</li><li>What is an LSH table?</li><li>What is a B<sup>ε</sup> tree?</li><li>What is a BW-tree?</li><li>What is a Bloom filter? (probabilistic data structure)</li><li>What is a fence pointer? (I think it is something that supports an LSM tree)</li><li>What other ways of storing timestamps for KV pairs are there? (apart from storing it inline with the kv-pair itself)</li><li>What kind of compression techniques are employed by various key-value stores?</li></ol><p>~ ~ ~</p><p>If you want to discuss about any of the above things, feel free to <a href="https://twitter.com/scriptnull">say hi</a> to me!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;These are my notes and thoughts that came up while reading this research paper called &lt;a href=&quot;https://stratos.seas.harvard.edu/files/str
      
    
    </summary>
    
    
      <category term="research papers" scheme="https://vishnubharathi.codes/tags/research-papers/"/>
    
      <category term="recurse center" scheme="https://vishnubharathi.codes/tags/recurse-center/"/>
    
      <category term="databases" scheme="https://vishnubharathi.codes/tags/databases/"/>
    
  </entry>
  
</feed>
