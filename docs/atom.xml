<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vishnu Bharathi</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vishnubharathi.codes/"/>
  <updated>2021-02-28T03:27:30.234Z</updated>
  <id>https://vishnubharathi.codes/</id>
  
  <author>
    <name>Vishnu Bharathi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mental Models</title>
    <link href="https://vishnubharathi.codes/blog/mental-models/"/>
    <id>https://vishnubharathi.codes/blog/mental-models/</id>
    <published>2021-02-25T23:49:27.000Z</published>
    <updated>2021-02-28T03:27:30.234Z</updated>
    
    <content type="html"><![CDATA[<p>This post is inspired by <a href="https://www.julian.com/blog/mental-model-examples">Julian’s Mental Models</a>. I will use the explanation in that blog post to explain what it is: </p><blockquote><p>Mental models do two things: they help you assess how things work and they help you make better decisions.</p></blockquote><p>Good! Secretly I have been using mental models for a long long time. It’s just that I have never formalized and called it a name and probably forget about a model and move on to using/experimenting with some other model periodically. If you have a set of thoughts that you base your actions upon, then that is a mental model for you. I would like to think about Mental models as predicates in discrete mathematics (sorry for the math-y reference, but just couldn’t resist adding it here :D)</p><p>I used to not care about mental models when there was a trend on Twitter where people write threads about it. I think it was mostly because of the theoretical explanations. So, I am going to stop explaining what mental models and try to write about some mental models that I use/trying-to-use/like.</p><h2 id="Five-Whys"><a href="#Five-Whys" class="headerlink" title="Five Whys"></a>Five Whys</h2><p>This mental model even has a <a href="https://en.wikipedia.org/wiki/Five_whys">Wikipedia page</a> that describes it nicely.</p><blockquote><p>The technique was originally developed by Sakichi Toyoda and was used within the Toyota Motor Corporation during the evolution of its manufacturing methodologies. It is a critical component of problem-solving training, delivered as part of the induction into the Toyota Production System.</p></blockquote><p>I learned this technique from when I was working for <a href="https://www.shippable.com/">shippable.com</a> - a lot of work and how things operate inside the company was based on Toyota’s manufacturing process. They used to even refer to the term “Software Manufacturing” for the vision of what they want the product to do for software development.</p><p>Often I have found myself get to the answer to a problem in less than 5 whys. Sometimes going and fixing all the whys may not be in your control. So, chillax and fix what is within your control.</p><p>The technique is simple: Just ask the question “why” five times when you are faced with a problem to find out the root-cause/real problem.</p><p>I use this technique to date to debug software. In fact, we used it just yesterday at work to debug <a href="https://github.com/hasura/graphql-engine/issues/6600">this issue</a>.</p><p>Why did the UI show the wrong version number? Because the base docker image sets an older version number.</p><p>Why is the base docker image setting an older version number? Because the CI build failed but continued anyway with a cached older image.</p><p>Why did the CI build fail but continue anyway? (found the bug in CI script that does not short-circuit on failure.)</p><p>Also did a parallel why based on the second answer.</p><p>Why did the CI build fail? Because there a command-line program that we used in the script was not found.</p><p>Why was the command-line program not found? Because the base image of the build image in CI changed to not have it.</p><p>……</p><p>I can go all day asking why. haha - but I should say that I kind of abuse this technique most of the time like stopping with 3 whys in the interest of time and control. But that is fine and we just have to find peace somewhere, so this might as well be.</p><h2 id="First-Principles"><a href="#First-Principles" class="headerlink" title="First Principles"></a>First Principles</h2><p>This was mentioned in <a href="https://www.julian.com/blog/mental-model-examples">Julian’s post</a> and is famously used by Elon Musk. I am sure that there is a good chance that you might be using it too. Because I had been quite a while.</p><p>Remember those moments at work where you feel nothing is working out. Then this one of the models to be used at those times.</p><p>“What if nothing existed about this problem and you were to build a solution for it completely from scratch?” </p><p>Example: This software library does not have a feature or does not have the extensibility to add this feature. Ok! What if you wrote this library from scratch? What are your design decisions like in that case? Will your design accommodate the extensibility for the feature that you are aiming for?</p><p>This will try to sink you in deep thoughts - I mean the ones that you think about in the shower and make you “forget if you applied soap to your legs” level of thought.</p><h2 id="Last-Principles"><a href="#Last-Principles" class="headerlink" title="Last Principles"></a>Last Principles</h2><p>First of all, I made up this name “Last Principles” - because this is the opposite of the first principles mental model.</p><p>But very often useful. You are doing this when you are googling for something.</p><p>When faced with a problem, asking how will I solve it if I were to start from scratch is the first principles approach. Instead, asking how has this problem been solved in various ways and using one of the ways is the last principles approach.</p><p>The last principles are a very critical mental model to have. Because that’s where the learning and experience happens. You get to see these awesome ways various people are solving the problem you have at hand. It might teach you the best practices and the knowledge that the field has accrued over time. </p><p>oh! and probably save you a ton of time.</p><p>Reading a research paper is last principles. I love the way those papers build upon the knowledge from their reference papers. That reference section is last principles. Getting what I mean? :D </p><h2 id="Regret-Minimization"><a href="#Regret-Minimization" class="headerlink" title="Regret Minimization"></a>Regret Minimization</h2><p>Popularised by Jeff Bezos - also has been mentioned in <a href="https://www.julian.com/blog/mental-model-examples">Julian’s post</a>. </p><p>Particularly helpful for making big decisions. </p><p>It is as simple as asking this question before undertaking big things:</p><p>“Will I regret not doing this when I am old?”</p><h2 id="Minus-Five"><a href="#Minus-Five" class="headerlink" title="Minus Five"></a>Minus Five</h2><p>This is a mental model that I learned sometime back from <a href="https://en.wikipedia.org/wiki/Sridhar_Vembu">Sridhar Vembhu</a>. He has this advice for people wanting to bootstrap their own company, “Start from -5 years” - meaning start working for what you want to build 5 years before actually starting to build it. This includes saving up money for such a long period, gathering skillsets that you need for the business, etc.</p><p>The core idea that I understand from the minus five mindset is that in order to do anything substantially big in life, try to plan and save up for those times. Because you don’t want to enter the war zone unarmed.</p><h2 id="Measure-them"><a href="#Measure-them" class="headerlink" title="Measure them"></a>Measure them</h2><p>Picked up this mental model from Vinod Khosla. Been using this for a few weeks now and I feel good about it.</p><p>I am linking the awesome talk below from where I learned this.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/HZcXup7p5-8" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>The talk ends where he discusses work-life balance. He firmly believes that it is achievable but we just have to be disciplined about it. Vinod Khosla seems to schedule his time into 15 minutes slots. Early on he had 20 main categories and each 15-minute time slot can belong to one of those categories. One of the important categories for him was “having dinner with family/kids” and he started by setting an impossible goal of 25 times per month and eventually achieved it in a year.</p><p>The key part is measuring how he spent his time to make time for something he thinks is very important.</p><p>So, if you are having this problem of “not finding enough time”, start by measuring time. Once you measure how you spend time, it is way simpler to identify the fluff and be very self-aware about how you are spending time.</p><p>Bonus: I use 1-hour slots, as that is easy to track and gives me more focus by avoiding context switching often.</p><h2 id="Lookout"><a href="#Lookout" class="headerlink" title="Lookout"></a>Lookout</h2><p>Alright, I am going to end this blog up here. I am always on the lookout for life lessons and mental models that make me better and help me. So if you have some mental models based on which you operate, send them my way. I will be happy to learn about them and possibly use them.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This post is inspired by &lt;a href=&quot;https://www.julian.com/blog/mental-model-examples&quot;&gt;Julian’s Mental Models&lt;/a&gt;. I will use the explanati
      
    
    </summary>
    
    
      <category term="life" scheme="https://vishnubharathi.codes/tags/life/"/>
    
      <category term=" career advice" scheme="https://vishnubharathi.codes/tags/career-advice/"/>
    
  </entry>
  
  <entry>
    <title>Speeding up git clone</title>
    <link href="https://vishnubharathi.codes/blog/speeding-up-git-clone/"/>
    <id>https://vishnubharathi.codes/blog/speeding-up-git-clone/</id>
    <published>2021-02-03T02:23:04.000Z</published>
    <updated>2021-02-28T03:27:30.238Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine that you need to take the latest source code of a project and deploy it somewhere by creating some artifacts with it. If it is a git project with a few commits, a simple <code>git clone .....</code> would do it. But if it is a project with thousands of commits, then you might be bored of your time waiting for the git clone to complete. This is often the case in CI/CD pipelines - that is where I ultimately learned this trick from :D</p><p>I recently discovered something called shallow clones in git. The idea is simple: instead of getting all the commits of a git repo, the shallow clone only gets the latest commit. The <code>--depth=N</code> flag seems to enable shallow cloning in git where N is the number of latest commits to be fetched.</p><p>Here is an example for comparing how much time you can save:</p><p>I tried cloning the Redis project - <a href="https://github.com/redis/redis">https://github.com/redis/redis</a> which had 10,009 commits while cloning.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ time git clone git@github.com:redis&#x2F;redis.git</span><br><span class="line">Cloning into &#39;redis&#39;...</span><br><span class="line">remote: Enumerating objects: 29, done.</span><br><span class="line">remote: Counting objects: 100% (29&#x2F;29), done.</span><br><span class="line">remote: Compressing objects: 100% (21&#x2F;21), done.</span><br><span class="line">remote: Total 71995 (delta 11), reused 17 (delta 8), pack-reused 71966</span><br><span class="line">Receiving objects: 100% (71995&#x2F;71995), 91.10 MiB | 375.00 KiB&#x2F;s, done.</span><br><span class="line">Resolving deltas: 100% (51230&#x2F;51230), done.</span><br><span class="line"></span><br><span class="line">real4m15.938s</span><br><span class="line">user0m13.796s</span><br><span class="line">sys0m2.875s</span><br></pre></td></tr></table></figure><p>So normal clone took <code>4 minutes and 15 seconds</code> to complete.</p><p>Here is the same thing but with a shallow clone</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ time git clone --depth&#x3D;1 git@github.com:redis&#x2F;redis.git</span><br><span class="line">Cloning into &#39;redis&#39;...</span><br><span class="line">remote: Enumerating objects: 937, done.</span><br><span class="line">remote: Counting objects: 100% (937&#x2F;937), done.</span><br><span class="line">remote: Compressing objects: 100% (843&#x2F;843), done.</span><br><span class="line">remote: Total 937 (delta 105), reused 568 (delta 70), pack-reused 0</span><br><span class="line">Receiving objects: 100% (937&#x2F;937), 2.58 MiB | 390.00 KiB&#x2F;s, done.</span><br><span class="line">Resolving deltas: 100% (105&#x2F;105), done.</span><br><span class="line"></span><br><span class="line">real0m12.802s</span><br><span class="line">user0m0.621s</span><br><span class="line">sys0m0.167s</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Just <code>12 seconds</code></p><p>So fast!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine that you need to take the latest source code of a project and deploy it somewhere by creating some artifacts with it. If it is a 
      
    
    </summary>
    
    
      <category term="devops" scheme="https://vishnubharathi.codes/tags/devops/"/>
    
      <category term="productivity" scheme="https://vishnubharathi.codes/tags/productivity/"/>
    
      <category term="tools" scheme="https://vishnubharathi.codes/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>My blub study syllabus</title>
    <link href="https://vishnubharathi.codes/blog/my-blub-study-syllabus/"/>
    <id>https://vishnubharathi.codes/blog/my-blub-study-syllabus/</id>
    <published>2021-01-22T14:15:45.000Z</published>
    <updated>2021-02-28T03:27:30.234Z</updated>
    
    <content type="html"><![CDATA[<p>Few days back, I happened to read this blog post <a href="https://www.benkuhn.net/blub/">“In defense of blub studies”</a> by <a href="https://www.benkuhn.net/">Benkuhn</a> (one of my favorite bloggers). It introduced me to a new term called “blub studies”. In case if you are not aware of it, I am going to copy paste a few lines from Ben’s post here.</p><blockquote><p>Blub studies is a never-ending treadmill of engineering know-how. It’s the fiddly technical details of how Git stores data, or how Postgres locking semantics caused your migration to bring down prod, or why pip install failed this time. It’s what goes on inside the boiler rooms of your computer.</p></blockquote><p>To put it simply - it is usually the boring stuff that you get away by googling and arriving at stack overflow. The idea is to learn things that help in day to day task instead of chasing the shiny new thing that got released yesterday on HN. we have underrated blub studies for a long time. I find it more satisfying to learn about them these days because they improve my workflow and speed in getting stuff done.</p><p>So, I am listing down my blub study syllabus below.</p><h2 id="Utils"><a href="#Utils" class="headerlink" title="Utils"></a>Utils</h2><ul><li style="list-style: none"><input type="checkbox"></input> <a href="https://www-users.york.ac.uk/~mijp1/teaching/2nd_year_Comp_Lab/guides/grep_awk_sed.pdf">grep, awk and sed – three VERY useful command-line utilities</a></li><li style="list-style: none"><input type="checkbox"></input> <a href="https://www.gnu.org/software/sed/manual/sed.html">sed, a stream editor</a> - GNU software manual</li><li style="list-style: none"><input type="checkbox"></input> <a href="https://www.gnu.org/software/make/manual/make.html">GNU make</a> - GNU software manual</li></ul><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><ul><li style="list-style: none"><input type="checkbox"></input> <a href="https://golang.org/doc/modules/managing-dependencies">Managing dependencies</a></li><li style="list-style: none"><input type="checkbox"></input> <a href="https://golang.org/doc/modules/developing">Developing and publishing modules</a></li></ul><p>(To be continued….)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Few days back, I happened to read this blog post &lt;a href=&quot;https://www.benkuhn.net/blub/&quot;&gt;“In defense of blub studies”&lt;/a&gt; by &lt;a href=&quot;htt
      
    
    </summary>
    
    
      <category term="programming" scheme="https://vishnubharathi.codes/tags/programming/"/>
    
      <category term="tools" scheme="https://vishnubharathi.codes/tags/tools/"/>
    
      <category term="reading" scheme="https://vishnubharathi.codes/tags/reading/"/>
    
      <category term="wishlist" scheme="https://vishnubharathi.codes/tags/wishlist/"/>
    
  </entry>
  
  <entry>
    <title>Learning to SWIM</title>
    <link href="https://vishnubharathi.codes/blog/learning-to-swim/"/>
    <id>https://vishnubharathi.codes/blog/learning-to-swim/</id>
    <published>2021-01-03T03:52:20.000Z</published>
    <updated>2021-02-28T03:27:30.234Z</updated>
    
    <content type="html"><![CDATA[<p>I finished reading a research paper called “SWIM: Scalable Weakly-consistent Infection-style Process Group Membership Protocol” last night. This post is going to be about it. If you are here to read my experience about real-world swimming, I have disappointed you - I still don’t know to swim in waters, haha.</p><p>First, I started by reading the Raft paper and was trying to go through a few open-source RAft implementation libraries and see how those libraries are used in software that is currently used in production. The exploration included the following places:</p><ul><li><a href="https://github.com/hashicorp/raft">https://github.com/hashicorp/raft</a></li><li><a href="https://github.com/hashicorp/consul">https://github.com/hashicorp/consul</a></li><li><a href="https://github.com/hashicorp/nomad">https://github.com/hashicorp/nomad</a></li><li><a href="https://github.com/hashicorp/raft-mdb">https://github.com/hashicorp/raft-mdb</a></li></ul><p>Halfway through my Raft journey, I understood that Raft is a consensus algorithm - It is about making a few machines (a cluster) agree on something. But it does not deal with how machines could be added/removed in the cluster. So we need to handle cluster membership outside it. So I started digging the above libraries, I arrived at how cluster membership is done in some of the practical systems (mostly the Hashicorp stack).</p><p>Hashicorp seems to have <a href="https://github.com/hashicorp/serf">Serf</a> which could be used for performing cluster membership. More specifically it uses this <a href="https://github.com/hashicorp/memberlist">memberlist</a> library to do it which is based on this awesome research paper.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. Das, I. Gupta and A. Motivala, &quot;SWIM: scalable weakly-consistent infection-style process group membership protocol,&quot; Proceedings International Conference on Dependable Systems and Networks, Washington, DC, USA, 2002, pp. 303-312, doi: 10.1109&#x2F;DSN.2002.1028914.</span><br></pre></td></tr></table></figure><p>Here are some of my notes on the SWIM paper. The SWIM paper starts with this nice quote:</p><blockquote><p>As you swim lazily through the milieu,</p><p>The secrets of the world will infect you.</p></blockquote><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>The main motivation behind the SWIM paper is</p><blockquote><p>The SWIM effort is motivated by the unscalability of traditional heart-beating protocols, which either impose network loads that grow quadratically with group size, or compromise response times or false positive frequency w.r.t. detecting process crashes.</p></blockquote><p>Before SWIM, the norm is to use a simple many-to-many heart-beating protocol to propagate cluster membership in the cluster. Consider this example:</p><p>If the cluster has n nodes, then it needs to send a message to all the other (n-1) nodes. Hence we end up sending n*(n-1) messages across the network when we want to exchange information about cluster membership. This means that our network load (number of communications that happen on the cluster network) grows quadratically (n<sup>2</sup>) for a group of n nodes in the cluster.</p><p>Example of what we are dealing with here:</p><p>When there are 5 nodes, we will end up making 5<sup>2</sup> = 25 network communications. For 10, it will be 100 and for 100, it will be 10,000. Remember this is just for sharing the knowledge of what nodes are in the cluster. That’s too much and impractical.</p><p>SWIM avoids this quadratic growth.</p><h2 id="Performance-metrics"><a href="#Performance-metrics" class="headerlink" title="Performance metrics"></a>Performance metrics</h2><p>If we are designing a membership system for a cluster, the following performance metrics could be considered:</p><ul><li>Membership propagation speed (should be high)</li><li>Message load on the network (should be low)</li><li>Computation load on the process (should be low)</li><li>False failure detections (should be low)</li></ul><p>Typically we might want to have this in our monitoring system to figure out if something is going wrong with our membership system.</p><p>SWIM tries to give the following performance metrics:</p><blockquote><p>(1) imposes a constant message load per group member;</p><p>(2) detects a process failure in an (expected) constant time at some non-faulty process in the group;</p><p>(3) provides a deterministic bound (as a function of group size) on the local time that a non-faulty process takes to detect failure of another process;</p><p>(4) propagates membership updates, including information about failures, in infection-style (also gossip-style or epidemic-style [2, 8]); the dissemination latency in the group grows slowly (logarithmically) with the number of members;</p><p>(5) provides a mechanism to reduce the rate of false positives by “suspecting” a process before “declaring” it as failed within the group.</p></blockquote><h2 id="Swimming"><a href="#Swimming" class="headerlink" title="Swimming"></a>Swimming</h2><p>I started describing the internal workings of SWIM here to get a deep understanding, but I kind of thought it to be a long-running note that might be lacking good diagrams and so I am adding some awesome sources that I am using to learn about SWIM. (that frees up my time to try to build some cool thing with it)</p><p>The first resource would be the <a href="https://www.cs.cornell.edu/projects/Quicksilver/public_pdfs/SWIM.pdf">SWIM paper</a> itself.</p><p>The second link would be the <a href="https://github.com/hashicorp/memberlist">hashicorp/memberlist</a> library source code that implements SWIM.</p><p>The next is one of the best ways to quickly get a taste for SWIM. It is a “papers we love” video presentation of the SWIM paper by Armon Dadgar from HashiCorp. (linked below) </p><iframe width="560" height="315" src="https://www.youtube.com/embed/bkmbWsDz8LM" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>In the presentation, they mention the missing pieces of SWIM and arrive at improvements to SWIM which makes it production-ready. For example, SWIM implementation by the original paper authors was using 56 nodes, but Hashicorp’s implementation was tested in a production use-case having 2000+ nodes. In those massive number of node environments, we need to deal with rejoins efficiently, encryption, etc.</p><p>They took all these improvements and present a paper named <a href="https://arxiv.org/abs/1707.00788">Lifeguard: Local Health Awareness for More Accurate Failure Detection</a>. Furthermore, they created this project called <a href="https://www.serf.io">Serf</a> which builds on top of the memberlist library that can be tuned to have a raw SWIM implementation. So if we need a production-ready SWIM implementation, we might just use the Serf library.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I finished reading a research paper called “SWIM: Scalable Weakly-consistent Infection-style Process Group Membership Protocol” last nigh
      
    
    </summary>
    
    
      <category term="databases" scheme="https://vishnubharathi.codes/tags/databases/"/>
    
      <category term="research papers" scheme="https://vishnubharathi.codes/tags/research-papers/"/>
    
  </entry>
  
  <entry>
    <title>Expense sheets</title>
    <link href="https://vishnubharathi.codes/blog/expense-sheets/"/>
    <id>https://vishnubharathi.codes/blog/expense-sheets/</id>
    <published>2020-12-28T14:39:26.000Z</published>
    <updated>2021-02-28T03:27:30.230Z</updated>
    
    <content type="html"><![CDATA[<p>As the end of the year approaches, I just realized that I was able to consistently track my expenses with an Excel sheet.</p><p><img src="/images/excel-expenses.png" alt="excel expenses"></p><p>I usually start a month by copy-pasting the “Template” (that contains my mandatory expenses like bills payments, EMIs, etc.) and naming the sheet to the current month’s name. This has helped me to keep track of “things I have to pay” and “things I already paid” the current month.</p><p>I recently discovered <a href="https://julian.digital">Julian’s blog</a> where he <a href="https://julian.digital/?s=media+consumption">tracks media consumption every month</a>. That’s a nice way to build up a collection of quality things over time.</p><p>While I always thought that it is difficult to achieve such a level of consistency, I just surprisingly found out that I had consistently done my expense tracking for more than 2 years now.</p><p>I started this habit when I was trying out <a href="https://www.notion.so/">notion</a> in 2018.</p><p><img src="/images/notion-expenses.png" alt="notion expenses"></p><p>But around August 2019, I hit my max space limit on the notion free tier and I was not able to upgrade to a paid plan at that time. So, I thought I should just use an excel sheet in google drive for tracking this.</p><p>A lesson that I can infer from this activity just while writing this blog post is “we can achieve consistency while trying to be consistent in something that is really useful to us”. The expense tracking was useful to me because without the tracking I might miss paying out bills on time :D So, I think I was able to be consistent with it.</p><p>I am thinking of some modifications to my process</p><ul><li>Track non-mandatory expenses (like a one-time purchase). I haven’t done this yet because having them in my sheet didn’t prove to be helpful when I tried doing them) previously.</li><li>Use one excel workbook for all money-related stuff. I had been using one excel workbook per year but I just figured out that we could do excel formula across different sheets in one workbook. This helps to arrive at useful results like “total expenses for a year” - feels much like how companies move toward monorepo while maintaining source code :D</li><li>Leverage the data more. We will try to squeeze out more information by analyzing the data.</li></ul><p>Personal finance is becoming a topic of interest to me more and more these days. If you track your expenses or have some productivity tips about personal finance, do share them with me :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As the end of the year approaches, I just realized that I was able to consistently track my expenses with an Excel sheet.&lt;/p&gt;
&lt;p&gt;&lt;img src
      
    
    </summary>
    
    
      <category term="personal finance" scheme="https://vishnubharathi.codes/tags/personal-finance/"/>
    
      <category term="life" scheme="https://vishnubharathi.codes/tags/life/"/>
    
      <category term="productivity" scheme="https://vishnubharathi.codes/tags/productivity/"/>
    
  </entry>
  
</feed>
