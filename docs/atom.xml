<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vishnu Bharathi</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vishnubharathi.codes/"/>
  <updated>2020-08-11T09:07:10.760Z</updated>
  <id>https://vishnubharathi.codes/</id>
  
  <author>
    <name>Vishnu Bharathi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Paper notes: Key-Value Storage Engines</title>
    <link href="https://vishnubharathi.codes/blog/paper-notes-key-value-storage-engines/"/>
    <id>https://vishnubharathi.codes/blog/paper-notes-key-value-storage-engines/</id>
    <published>2020-08-11T03:18:16.000Z</published>
    <updated>2020-08-11T09:07:10.760Z</updated>
    
    <content type="html"><![CDATA[<p>These are my notes and thoughts that came up while reading this research paper called <a href="https://stratos.seas.harvard.edu/files/stratos/files/keyvaluestorageengines.pdf" target="_blank" rel="noopener">Key-Value Storage Engines</a>.</p><p>I first came across this paper in <a href="https://tikv-wg.slack.com/archives/CGQ6VFATU/p1589836557016600" target="_blank" rel="noopener">TiKV’s slack</a>. I have been wanting to read it ever since! (and pulled it off early morning yesterday). I think the paper is a short one compared to any of the papers that I have read. It was published recently and so it contains notes about the latest key-value stores.</p><blockquote><p>we survey the state-of-the-art approaches on how the core storage engine of a key-value store system is designed.</p></blockquote><p>On the side: I was wondering how to discover new research papers to read about in topics of interest. My current interest is in databases (more specifically key-value stores and hybrid stores). Seems like one efficient way is to take on an introductory paper (like the one we are going to discuss here), read it, and see how it aligns with the goals. If you got what you want, go and check the other works of the author(s) of the paper. I did the same for this and ended up amazed by the work <a href="https://stratos.seas.harvard.edu/" target="_blank" rel="noopener">the authors</a> of this paper.</p><p>Speaking of authors, let me put up the ACM reference format here to give credit to the authors and the paper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stratos Idreos and Mark Callaghan. 2020. Key-Value Storage En-</span><br><span class="line">gines. In Proceedings of the 2020 ACM SIGMOD International Con-</span><br><span class="line">ference on Management of Data (SIGMOD’20), June 14–19, 2020,</span><br><span class="line">Portland, OR, USA. ACM, New York, NY, USA, 6 pages. https://doi.</span><br><span class="line">org/10.1145/3318464.3383133</span><br></pre></td></tr></table></figure><h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><p>The main contents of the paper are divided into three parts</p><ol><li>Key-value storage engines and applications</li><li>State of art engine design</li><li>Self-Designing NoSQL storage</li></ol><h2 id="Key-value-storage-engines-and-applications"><a href="#Key-value-storage-engines-and-applications" class="headerlink" title="Key-value storage engines and applications"></a>Key-value storage engines and applications</h2><p>Key-value stores could be used in a lot of places.</p><blockquote><p>graph processing in social media [9, 14], to event log processing in cybersecurity [15], application data caching [51], NoSQL stores [57], flash translation layer design [21], time-series management [42, 43], and online transaction processing [26].</p></blockquote><p>One interesting take in this section: <strong>Key Value Stores are used in SQL systems</strong></p><p>I have mostly viewed tables in SQL systems as “tables” (you get me!). This paper lays the base work of thinking about SQL tables in terms of key-value stores.</p><blockquote><p>FoundationDB is a core part of Snowflake, while My-Rocks integrates RockDB in MySQL as its back-end storage.</p></blockquote><p>It seems like modern databases seem to use a distributed key-value store as a building block. I have noticed this pattern recently in “TiKV being used as the underlying store as TiDB”.</p><p>Apart from the applications, the section introduces properties like read, update, and memory amplification. Each key-value store has different properties and it is up to the users to choose a store based on their workloads.</p><p>By reading this section, I mostly understood this:</p><blockquote><p>There is no Perfect Design.</p></blockquote><p>If we are trying to build a key-value store from scratch, we must first understand and accept the trade-offs. Ask questions and arrive at answers like</p><p>Q: What kind of workload will be suited the most for the store?</p><p>A: It suits the most for frequent reads and in-frequent bulk inserts.</p><p>An example mentioned in this paper is <a href="https://github.com/spotify/sparkey" target="_blank" rel="noopener">sparkey</a>, a key-value storage library from Spotify which does that tradeoff.</p><h2 id="State-of-art-engine-design"><a href="#State-of-art-engine-design" class="headerlink" title="State of art engine design"></a>State of art engine design</h2><p>Before this paper, I usually took the time to think about the outer-most layers of key-value stores like the communication protocols, how are we going to store data in-memory. This paper jumps right into the core - how data is stored on the disk? How data is first stored in memory and moved to disk afterward?</p><h3 id="Big-three"><a href="#Big-three" class="headerlink" title="Big three"></a>Big three</h3><p>The paper introduces about three data-structures to be at the core of the state of art storage designs.</p><ol><li>B+ tree</li><li>Log-structures merge-tree (LSM tree)</li><li>Log and Index (LSH table)</li></ol><p>That’s it! If I just learn about them, then I should have a basic idea about what’s going on in most databases.</p><h4 id="B-tree"><a href="#B-tree" class="headerlink" title="B+ tree"></a>B+ tree</h4><blockquote><p>B+ tree is the backbone design of the BerkeleyDB key-value store [53], now owned by Oracle, and the backbone of the WiredTiger key-value store [66], now used as the primary storage engine in MongoDB [52]. FoundationDB [8] also relies on a B+ tree.</p></blockquote><h4 id="LSM-tree"><a href="#LSM-tree" class="headerlink" title="LSM tree"></a>LSM tree</h4><p>This is usually augmented with some-other things like:</p><blockquote><p>In-memory structures such as Bloom filters, fence pointers and Tries help filter queries to avoid disk I/O [19, 67].</p></blockquote><p>In practice: </p><blockquote><p> This design has been adopted in numerous industrial settings including LevelDB [30] and BigTable [17] at Google, RocksDB [27] at Facebook, Cassandra [45], HBase [33] and Accumulo [7] at Apache, Voldemort [47] at LinkedIn, Dynamo [24] at Amazon, WiredTiger [66] at MongoDB, and bLSM [61] and cLSM [29] at Yahoo, and more designs in research such as SlimDB [58], WiscKey [49], Monkey [19, 20], Dostoevsky [22], and LSM-bush [23].</p></blockquote><h4 id="Log-and-index"><a href="#Log-and-index" class="headerlink" title="Log and index"></a>Log and index</h4><blockquote><p>This Log and Index design is employed by BitCask [62] at Riak, Sparkey [64] at Spotify, FASTER [16] at Microsoft, and many more systems in research [2, 46, 59].</p></blockquote><p>I guess that the concrete implementation of this technique is called Log-Structured Hash tables.</p><blockquote><p>Most systems use a hash table as the index over the log.</p></blockquote><h3 id="Design-Descisions"><a href="#Design-Descisions" class="headerlink" title="Design Descisions"></a>Design Descisions</h3><p>The remainder of this section deals with various design considerations that we need to be aware of while building a key-value store. </p><ol><li>Memory management</li><li>Compactions and Splits</li><li>Concurrency control</li><li>Time travel queries</li><li>CPU vs I/O Cost</li><li>Adaptive Indexing and layouts</li></ol><h4 id="Memory-management"><a href="#Memory-management" class="headerlink" title="Memory management"></a>Memory management</h4><blockquote><p>One of the most critical decisions in key-value stores is how to distribute the available bits across the various in-memory components. For example, in an LSM-tree like design, it is common to have numerous Bloom-filters in memory and other helper structures to help skip disk reads.</p></blockquote><h4 id="Compaction-and-Splits"><a href="#Compaction-and-Splits" class="headerlink" title="Compaction and Splits"></a>Compaction and Splits</h4><blockquote><p>Depending on the exact design a NoSQL engine will need to frequently reorganize data such as to maintain certain performance invariants. For example, an LSM-tree like design needs to perform compactions as new data arrives such as to maintain order and remove past invalid values that have been updated out of place.</p></blockquote><p>Compactions can happen in two ways: in-place and out-of-place compactions. Out-of-place compaction allows queries to be served while the compaction is happening. The way it does it is by having a duplicated in-memory copy from which the query could be served while the actual data is undergoing compaction. For in-place compactions, the query will block.</p><p>So, we know one new thing about LSM trees from this section: They don’t block queries while undergoing compactions.</p><h4 id="Concurrency-control"><a href="#Concurrency-control" class="headerlink" title="Concurrency control"></a>Concurrency control</h4><blockquote><p>LSM-trees are inherently more able to process concurrent requests compared to a typical B-tree design because they update data out of place. Similarly, a log-structured hash table design goes a step further by performing much fewer compactions and thus creating fewer conflicts for reads and writes (at the expense of read cost). B-tree designs can also adopt an out of place approach by stacking updates in leaf nodes like BW-tree or across any node like Bε tree.)</p></blockquote><h4 id="Time-travel-queries"><a href="#Time-travel-queries" class="headerlink" title="Time travel queries"></a>Time travel queries</h4><p>Key-value stores might be designed to store timestamps along with key-value pairs. This choice opens up the possibility for implementation of features like</p><ol><li>Multiple versions of the same key could be stored</li><li>TTL (Ability to automatically remove the key-value pair after certain amount of time)</li></ol><blockquote><p>if timestamps are stored inline with the base date, then this can lead to significant overheads for all queries (since timestamps will need to be read along with the base data).</p></blockquote><h4 id="CPU-vs-I-O-Cost"><a href="#CPU-vs-I-O-Cost" class="headerlink" title="CPU vs I/O Cost"></a>CPU vs I/O Cost</h4><blockquote><p>using compression leads to increased CPU costs and the exact form of compression used defines the balance of I/O saved versus CPU sacrificed.</p></blockquote><p>So if we are trying to build a database, we need to decide whether if we are going to support compression of data and have to get an idea about various types of compression.</p><h4 id="Adaptive-Indexing-and-Layouts"><a href="#Adaptive-Indexing-and-Layouts" class="headerlink" title="Adaptive Indexing and Layouts"></a>Adaptive Indexing and Layouts</h4><blockquote><p>Adaptive indexing [36] is a lightweight approach in self-tuning databases. Adaptive indexing addresses the limitations of offline and online indexing for dynamic workloads; it reacts to workload changes by building or refining indices partially and incrementally as part of query processing.</p></blockquote><p>Before going on to adaptive indexing, we need to think about just “indexing”. How are we going to store the index of keys in-memory? What if there are a lot of keys? Is it possible to index only a partial set of keys and swap out the partial to load the parts that we need? Things like these!</p><p>Now we are allowed to get excited about newer research on adaptive indexing - what if the key-value store automatically figures out what to index based on the access patterns of the workload? - exciting, huh?</p><h2 id="Self-Designing-NoSQL-storage"><a href="#Self-Designing-NoSQL-storage" class="headerlink" title="Self-Designing NoSQL storage"></a>Self-Designing NoSQL storage</h2><p>This section of the paper mostly deals with the special interest of the authors - Self-tuning databases. You can read up this section of the paper if you are interested. I didn’t understand much, but in simple terms, they are trying to describe data systems that self-tune it’s configuration <em>near instantly</em> (ah, interesting!) on live workloads.</p><p>That leads me to a project written by one of the authors of this paper called CrimsonDB - <a href="https://demosubmitter.github.io/" target="_blank" rel="noopener">https://demosubmitter.github.io/</a></p><p>If this sounds exciting, the next step for this is exploring the <a href="https://stratos.seas.harvard.edu/files/stratos/files/datacalculator.pdf" target="_blank" rel="noopener">Data Calculator</a> paper which gives an idea about “how we can synthesize more data structures than stars on the sky to pick the right one for a given problem”.</p><h2 id="Questions-to-work-on"><a href="#Questions-to-work-on" class="headerlink" title="Questions to work on"></a>Questions to work on</h2><p>Arrived at a list of questions by reading this paper: </p><p>(I believe each one has the potential to become a blog post on its own)</p><ol><li>What is a B+ tree?</li><li>What is an LSM tree?</li><li>What is an LSH table?</li><li>What is a B<sup>ε</sup> tree?</li><li>What is a BW-tree?</li><li>What is a Bloom filter? (probabilistic data structure)</li><li>What is a fence pointer? (I think it is something that supports an LSM tree)</li><li>What other ways of storing timestamps for KV pairs are there? (apart from storing it inline with the kv-pair itself)</li><li>What kind of compression techniques are employed by various key-value stores?</li></ol><p>~ ~ ~</p><p>If you want to discuss about any of the above things, feel free to <a href="https://twitter.com/scriptnull" target="_blank" rel="noopener">say hi</a> to me!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;These are my notes and thoughts that came up while reading this research paper called &lt;a href=&quot;https://stratos.seas.harvard.edu/files/str
      
    
    </summary>
    
    
      <category term="research papers" scheme="https://vishnubharathi.codes/tags/research-papers/"/>
    
      <category term="recurse center" scheme="https://vishnubharathi.codes/tags/recurse-center/"/>
    
      <category term="databases" scheme="https://vishnubharathi.codes/tags/databases/"/>
    
  </entry>
  
  <entry>
    <title>Recurse</title>
    <link href="https://vishnubharathi.codes/blog/recurse/"/>
    <id>https://vishnubharathi.codes/blog/recurse/</id>
    <published>2020-08-08T23:09:39.000Z</published>
    <updated>2020-08-11T09:07:10.760Z</updated>
    
    <content type="html"><![CDATA[<p>I am happy to announce that I got accepted into <a href="https://www.recurse.com/" target="_blank" rel="noopener">The Recurse Center</a> center for the Fall 1 ‘20 batch. It’s quite a life event because attending RC was one of my dreams for about a year and a half now.</p><p>Trying to share a few things about my journey.</p><h2 id="What-is-RC"><a href="#What-is-RC" class="headerlink" title="What is RC?"></a>What is RC?</h2><p>For those who haven’t heard of it yet:</p><blockquote><p>The Recurse Center is a self-directed, community-driven educational retreat for programmers based in New York City and currently operating online.</p></blockquote><p>Retreats happen in batches and the batches run for varying length: Full (12 weeks), Half (6 weeks) and Mini (1 week). It is self-directed, so we pick what to learn during that time. We will be working along-side a <a href="https://www.recurse.com/diversity" target="_blank" rel="noopener">diverse</a> group of people, so there is much to learn from them.</p><p>I won’t steal the fun of knowing about RC for the first time from you! haha, When I heard of RC for the first time - I spent like an hour reading all their contents at <a href="https://www.recurse.com" target="_blank" rel="noopener">https://www.recurse.com</a> - so go ahead and enjoy the link!</p><h2 id="Why-is-it-a-dream"><a href="#Why-is-it-a-dream" class="headerlink" title="Why is it a dream?"></a>Why is it a dream?</h2><p>I mentioned earlier that it has been a dream of mine to attend the RC. Why so?</p><p>RC has a nice application/interview process (you should apply if you are in doubt). Even though I cleared the interviews, there were still uncertainties lurking in, and the odds of me getting a chance to attend it was very low. I will tell you why!</p><p>The first one is financial situations: Had been a software engineer for the past 5 years and always committed to going to work! With the <a href="https://en.wikipedia.org/wiki/Coronavirus_disease_2019" target="_blank" rel="noopener">current pandemic situation</a>, I lost my job 2 months back and got moratorium for EMIs of loan repayment. So the stress about “have to go to work to pay loans” is not there for months. Which means I can do whatever I like to do right now! Just have to make sure that I figure out a way to make money before I spend all the money I have.</p><p>Apart from that, I have very little chances of affording travel + accommodation in the USA. Flight tickets, cost of living there for 12 weeks. Probably I would have to get a loan or sponsorship to be able to afford it or at least have to save up for year(s) to be able to do it! (Just see the conversion rate of INR to USD). Now that the batches are online, it is totally affordable!</p><p>The next uncertainty is a travel visa - I don’t know much about it, because I haven’t traveled much! (know what I have never visited North India itself, haha). In one of my previous jobs, most of my team people flew from Bangalore to Delhi for getting a travel visa to a place for attending the annual meetup of the company, guess what - not a single person got the visa (except the ones who had already visited some countries). I remember reading that Daniel (the creator of curl) has a live timer counting the time since he applied for a visa; if you are wondering, the timer <a href="https://daniel.haxx.se/us-visa.html" target="_blank" rel="noopener">is still running</a>. Since we have people already attend RC from India before, so it is not a complete impossibility but I guess it could still be a roadblock. Now that RC is running online, the visa I need is here - my internet connection, haha.</p><p>Clearing the interview and overcoming all these uncertainties should happen in an aligned timeline. (not trying to scare you off from applying, but these are just some things that I thought might be a problem for me personally. Despite that, I was hoping to attend RC somehow even when they were running only physical batches. Hope is a beautiful thing - have it!)</p><p>So that makes it seem like attending RC is almost a dream for me and as <a href="https://twitter.com/riturajcse" target="_blank" rel="noopener">my friend</a> said over a Whatsapp text</p><blockquote><p>Dreams do come true</p></blockquote><h2 id="First-attempt"><a href="#First-attempt" class="headerlink" title="First attempt"></a>First attempt</h2><p>My first attempt to apply to RC dates back to the end of 2018. I got so excited to apply for it that I started writing a lisp parse ( <a href="https://github.com/scriptnull/yali" target="_blank" rel="noopener">https://github.com/scriptnull/yali</a> ) inspired by a task in their <a href="https://www.recurse.com/pairing-tasks" target="_blank" rel="noopener">pair programming tasks</a>. I had started filling <a href="https://www.recurse.com/apply/retreat" target="_blank" rel="noopener">the written application for RC</a> a couple of times and I would stop right after “Code CracklePop”. When I want to get back to it, life happened - like one of my employers getting acquired by another company and there is no way to take a sabbatical right after it.</p><h2 id="Inspiration"><a href="#Inspiration" class="headerlink" title="Inspiration"></a>Inspiration</h2><p>I should say that two people inspired me a lot to attend the Recurse Center.</p><ul><li><a href="https://jvns.ca/" target="_blank" rel="noopener">Julia Evans</a> : I often end up reading her amazing blog posts and it kind of fostered me to blog more.</li><li><a href="https://andrewkelley.me/" target="_blank" rel="noopener">Andrew Kelley</a> : Reason is these three little letters “Zig”. It was super interesting to see his presentation in RC’s <a href="https://www.recurse.com/events/localhost-andrew-kelley" target="_blank" rel="noopener">localhost</a></li></ul><p>Both of them are alums of RC who have done cool stuff! Apart from that, there is a lot of cool stuff that people (who have attended and are attending) seem to do. I follow those updates usually on twitter and <a href="https://joy.recurse.com/" target="_blank" rel="noopener">Joy of Computing</a>.</p><h2 id="How-I-applied-now"><a href="#How-I-applied-now" class="headerlink" title="How I applied now?"></a>How I applied now?</h2><p>hmm, well after losing my job I was taking that long-needed break and preparing for my next adventure. I was learning and learning most of the time - with the fear of not passing interviews, etc. These are uncertain times and it has been a little rough. I was slowly starting to get out of the fear zone and become productive.</p><p>The thing with me is I don’t usually apply for a lot of jobs. I apply selectively to the jobs that I really like to have because even if it is a rejection it has to mean something and I don’t want to waste the time of the people who are giving an interview chance to me! In these two months, I just applied and attended only one interview. Earlier I blogged about the interview and the <a href="/blog/first-feedback/">feedback</a> I got out of it. I was gradually making my steps to get better by acting on the feedback.</p><p>At the same time, I was trying to explore the latest trends that I haven’t been able to catch up like paying a little visit to the frontend ecosystem - React &amp; Redux. During one such day, <a href="https://twitter.com/theonlynabarun" target="_blank" rel="noopener">Nabarun</a> (we used to work together) messaged me on twitter asking what I am up to these days. I said that I was mostly learning and experimenting with things to figure out if I should be trying out for backend or full-stack roles. Then he said,</p><blockquote><p>It is nice to experiment and identify what one really likes. If you want to experiment more for some time, try Recurse Center. They are doing all cohorts online this year.</p></blockquote><p>It was good to hear it! I was actually thinking of applying to Recurse Center in these 2 months and as usual, wrote CracklePop one more time and never made it to the end, haha. I went on to think about what he told over the next few days and worked on the pair programming task (Database server) over a weekend. Then there I was writing my application for one full Sunday. The next day, I reviewed and submitted my application.</p><h2 id="The-interviews"><a href="#The-interviews" class="headerlink" title="The interviews"></a>The interviews</h2><p>The entire process took up to 2 weeks. The interviewers were super helpful in having a good conversation. The conversational interview was more of a technical chat with a friend. I watched a <a href="https://www.ted.com/playlists/352/talks_to_watch_before_a_job_in" target="_blank" rel="noopener">few TED talks</a> earlier that day to kind of get me into the zone. Because the last time I had a technical interview before that interview, I completely panicked in the middle. So I wanted to improve myself by just talking with new people without any fear or stress. Those videos did help me and I recommend them if you are trying to overcome interview fears.</p><p>For the pair programming interview, I have never pair programmed in a formal setup. It seems like there shouldn’t be a formal setup after all, haha. In my previous workplaces, I have paired with engineers, in a way that we don’t even know that we were pairing - just two people sitting together and discussing and coding a part of microservice. So, with less formal knowledge on pair programming, I decided to just understand what it is about. So the first preparation I did was just reading through this <a href="https://martinfowler.com/articles/on-pair-programming.html" target="_blank" rel="noopener">article on pair programming</a>. During the pair programming interview, the interviewer followed me through the coding and gave helpful feedback at the right spots.</p><p>Overall, the interview experience is smooth and I encourage anyone wanting to apply for it to give it a go!</p><h2 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h2><p>Now that I am attending the RC, you might ask what am I planning to do there? So, I will try to answer that here.</p><p>Get better with distributed systems and databases in general. Trying to read up the internals of databases and build a distributed key-value store from scratch. I would like to read research papers, books, and source code. Write blogs to solidify my understanding and write code to improve my coding skills. Example: What is the difference between a B+ tree and an LSM tree? How does Postgres do row-level locking? What are the different protocols used by different datastores for communication between server and client?</p><p>I am building the project in the hope that it might become production-ready someday! There are already a lot of innovations going on in this space and it would be great if we end up building something in the sweet spot!</p><p>Apart from that, I plan on just having more conversations with people in the RC community. Being a non-native speaker of English, it would greatly help me in just getting my thought and speech up to speed. Also, it is fun getting to know people.</p><p>Next one: prepare for my interviews. This involves data-structure and algorithm stuff + system design.</p><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>I hope this post gave you an idea about my journey to the Recurse Center. You can follow up on the rest of my journey here in this blog and on <a href="https://twitter.com/scriptnull" target="_blank" rel="noopener">my twitter</a>. If you are thinking to attend it, I encourage you to apply!</p><p>By the way, my batch starts tomorrow. (yay! excited!) </p><p>Looking forward to recursing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I am happy to announce that I got accepted into &lt;a href=&quot;https://www.recurse.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Recurse Center&lt;/a&gt; 
      
    
    </summary>
    
    
      <category term="life" scheme="https://vishnubharathi.codes/tags/life/"/>
    
      <category term="recurse center" scheme="https://vishnubharathi.codes/tags/recurse-center/"/>
    
  </entry>
  
  <entry>
    <title>No more zero days</title>
    <link href="https://vishnubharathi.codes/blog/no-more-zero-days/"/>
    <id>https://vishnubharathi.codes/blog/no-more-zero-days/</id>
    <published>2020-07-23T03:48:09.000Z</published>
    <updated>2020-08-11T09:07:10.760Z</updated>
    
    <content type="html"><![CDATA[<p>When I was feeling down and less productive towards the end of 2018, I used to search the web for motivation. In that process I happened to discover one of the golds of the internet. </p><p>It is this amazing comment on redit by <a href="https://www.reddit.com/user/ryans01/" target="_blank" rel="noopener">u/ryans01</a>. (A million thanks to this human)</p><p><a class="embedly-card" href="https://www.reddit.com/r/getdisciplined/comments/1q96b5/i_just_dont_care_about_myself/cdah4af" target="_blank" rel="noopener">Card</a></p><script async src="//embed.redditmedia.com/widgets/platform.js" charset="UTF-8"></script><p>A little graphic that is linked in that comment to summarize the idea of zero days.</p><p><img src="https://i.imgur.com/7xsp7hJ.png" alt=""></p><p>It gave a great momentum - I read books followed by books everynight, practiced a lot of coding, and even got very active on this blog at that time only. The last 2 months of 2018 were very productive. At that time, I was able to crack the interview of one of my dream companies and wrote a very successful blog post that went on to the top of Hackernews (which completely proved the point that people really find some of my writings useful).</p><p>After that, I just went on to being normal. In short, a lot happened. A lot of zero days.</p><p>After losing my job, these days I am trying to be productive everyday. But even then, I am hitting zero days. That’s weird! No work, but how did the day turn zero? I am feeling anxious all the time with questions like “Will I get a job that I love?”, “What if I fail an interview at a dream company after applying?” (this is totally making me to not apply in the first place), “What do I learn now?”….</p><p>hmmmm, after being stuck like this, I re-opened ryan’s comment once again today morning, just before writing this blog post and re-read it!</p><p>Well, it seems like, I just have to forgive my past self and concentrate on having a non-zero day! (a gift for future from the present)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When I was feeling down and less productive towards the end of 2018, I used to search the web for motivation. In that process I happened 
      
    
    </summary>
    
    
      <category term="career advice" scheme="https://vishnubharathi.codes/tags/career-advice/"/>
    
  </entry>
  
  <entry>
    <title>First feedback</title>
    <link href="https://vishnubharathi.codes/blog/first-feedback/"/>
    <id>https://vishnubharathi.codes/blog/first-feedback/</id>
    <published>2020-07-20T07:57:19.000Z</published>
    <updated>2020-08-11T09:07:10.756Z</updated>
    
    <content type="html"><![CDATA[<p>I just got off from a call where I gathered feedback about my interview with a company. I didn’t pass the interview, but the feedback of why I failed is making have an immense smile in my face for the past hour.</p><p>This is the first company that I applied after I lost my job a few days back. So, this is the <em>first feedback</em> that I got in that sense. I think writing it down here would give me a solid place to refer to on a regular basis to up my game!</p><p>The feedback call was between me and the CTO of the company. Whenever I find myself talking to CEOs, CTOs and VPs (and some Engineers), I seem to get immense amount of “You are playing a different game, so game on!” level of energy from the conversation. This is nonetheless different. The way things were put infront of me is actually something helpful that I could act upon.</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>To give background, here is how the interview process went. It is an early-stage startup, recently funded, super-interesting to me (as it is in the Reliability, Observability space). I saw their CTO’s tweet that they are hiring.</p><p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">We (<a href="https://twitter.com/last9inc?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@last9inc</a>) are looking for a Software Engineer who can <em>own</em> our Reliability + Customer Integration pipeline. <br><br>Key requisites are: Strong *nix skills, and being able to think ahead and automate mundane / repetitive work.<br><br>If that&#39;s not you, help spread the word 🙏</p>&mdash; Piyush Verma (@realmeson10) <a href="https://twitter.com/realmeson10/status/1273551418448740352?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">June 18, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p><p>After doing my homework on what they are trying to do, I arrived at one of their interesting projects which is open source - <a href="https://github.com/last9/k8stream" target="_blank" rel="noopener">https://github.com/last9/k8stream</a></p><p>Now I am fully convinced that I should definitely apply to them! <code>k8stream</code> was written in Go, which I am currently focusing on. So I thought it might be good to contribute a feature to the project, that way I get a little bit better in Go programming and also it would help me break the ice with them while applying!</p><p>It is a project that uploads various kuberenetes events to AWS S3. It had this notion of Sink, which lets you store the data. For example, there was file sink and AWS sink. You can choose the sink in which your events should get stored. My initial idea was to add a GCS sink, which would enable storing events in Google Cloud storage. During the “exploring by reading the code” phase, I happened to notice a <code>TODO</code> comment in the code base and I felt it would be more valuable to address it rather than sending code for feature that I wasn’t sure if they are interested in having in the software. So, here it is: <a href="https://github.com/last9/k8stream/pull/38" target="_blank" rel="noopener">https://github.com/last9/k8stream/pull/38</a> - a PR to validate input in file sink!</p><p>One of the other reasons for not going with GCS feature is that I didn’t have clear idea about how to use <code>context</code> package in Go (this package was used extensively by the google cloud Go library). So, I did spin off understanding it parallely during the process and ended up <a href="/blog/go-contexts/">digging deep into the source code of context package and writing a blog post about it</a></p><p>After sending in a hello email with a pointer to my PR, I was able to get an interview from them. It involved a introduction/get-to-know-each-other call followed by a take home assignment.</p><p>The call went well. Then I wrote and submitted the take-home assignment in a week. I chose Go as my programming language (as I was learning it and I thought it would be a fun exercise).</p><p>I learnt that I was rejected in some days after the assignment and after a week, I was able to get the CTO on call for a feedback session. </p><h2 id="Good-things"><a href="#Good-things" class="headerlink" title="Good things"></a>Good things</h2><p>Always start with the good things! A few things that they thought I was good at.</p><ul><li>Good hands on coding skills</li><li>Willing to accept feedback and act on it.</li><li>Passionate and enthusiastic.</li></ul><h2 id="Things-that-went-wrong"><a href="#Things-that-went-wrong" class="headerlink" title="Things that went wrong"></a>Things that went wrong</h2><p>The following were somethings that went wrong. </p><ul><li>Overly engineered solution.</li><li>Lagging in design principles.</li><li>Parts of the solution was lacking in testability.</li></ul><h2 id="To-be-Improved"><a href="#To-be-Improved" class="headerlink" title="To be Improved"></a>To be Improved</h2><p>So, from the feedback, I understood that the following things need to be improved.</p><ul><li>Sense and knowledge of design patterns. (Totally agree with this!)</li><li>Knowledge on basic functional programming constructs like Pure function, idompotence etc.</li><li>Knowledge on system design and architecture.</li></ul><h2 id="But-how"><a href="#But-how" class="headerlink" title="But, how?"></a>But, how?</h2><p>Now that I know what needs to be improved. I am laying down what can I do to start seeing the results.</p><p>I also asked questions to the CTO like “If I were to apply back again, what are some action items that I can take to improve myself?” hoping that I could get some suggestions on improving.</p><p>First thing was,</p><blockquote><p>Code more, a lot more.</p></blockquote><p>Woah! that’s super straight forward. I love this. I just have to write a lot more code everyday. I had been missing it for a while. When I was in college, I could dump these mountains of code everyday that would teach me things I never knew of. So I want to get back on “that level of coding more”.</p><p>Next was my very favorite part in the entire of the conversation. It was about how to get good at design patterns. I find it very practical advice.</p><blockquote><p>Build something with some assumptions and maintain it till you see your assumptions fail</p></blockquote><p>This case naturally leads to refactoring of code and helps you understand why your code didn’t scale. In other words, it will get us started with thinking what kind of design pattern might have saved us from having to refactor.</p><h2 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it"></a>That’s it</h2><p>That’s pretty much of what happened. In the end, I also got the suggestion of what kind of companies I should be applying for (got 3 names). They encouraged me in a manner that convinced me that I should definitely go (prepare and) apply at those “3 names” after this. The entire feedback session gave me a moral boost - “I got this!” attitude++.</p><p>With high hopes of working towards improving myself, I am signing this off with this wonder statement: “I really wonder how the tech interview process has evolved in the industry. From not getting any answer back in case of rejection to requesting and getting feedback in case of a rejection.” - I am really glad to see more companies adopt this style of interviewing.</p><p>~ ~ ~ ~ </p><p>Also if you have some suggestions on how I can level up, do let me know. It would be great if you could point me to opportunities that you find interesting these days!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I just got off from a call where I gathered feedback about my interview with a company. I didn’t pass the interview, but the feedback of 
      
    
    </summary>
    
    
      <category term="interviewing" scheme="https://vishnubharathi.codes/tags/interviewing/"/>
    
      <category term="tech interviews" scheme="https://vishnubharathi.codes/tags/tech-interviews/"/>
    
  </entry>
  
  <entry>
    <title>Migrated my old blog posts from Medium</title>
    <link href="https://vishnubharathi.codes/blog/migrated-my-old-blog-posts-from-medium/"/>
    <id>https://vishnubharathi.codes/blog/migrated-my-old-blog-posts-from-medium/</id>
    <published>2020-07-19T14:30:04.000Z</published>
    <updated>2020-08-11T09:07:10.760Z</updated>
    
    <content type="html"><![CDATA[<p>Today I spent an hour or so in migrating my old blog posts present at medium.com to this site. Medium gave me a good playground to start blogging. I really appreciate it. But as time passed on, I understood that it is good to have control over our data and host it ourself.</p><p>Medium is free to use. I mean, what really is free to use! The price I needed to pay for hosting my content on medium was to accept the big “sign up to medium” wall that they put on all of the blog posts. Also, they encourage content creators to add a paywall to their content, which is fine for people who are looking to monetize their content.</p><p>But at least for me, the reason I write these blog post is for fun. So I intend to keep it free by hosting it myself. This is a migration that I wanted to do for a long time, and finally I am able to partially complete it.</p><p>Why partially? because there is still some images on this blog, which are hosted on some other sites like medium CDN or Github CDN. That is still remaining.</p><p>At least, I was able give my old content it’s real shelter today! (Most of them were from 2017)</p><p>Thanks to this amazing project - <a href="https://github.com/xdamman/mediumexporter" target="_blank" rel="noopener">https://github.com/xdamman/mediumexporter</a> ; that helped me in this migration!</p><p>Also, <code>sblog</code> ( <a href="https://github.com/scriptnull/sblog" target="_blank" rel="noopener">https://github.com/scriptnull/sblog</a> ) helped in some level of automation in the process. lol, becoming useful already :D</p><p>EDIT: oops, I just missed one point - The reason I did this migation is same as the reason why I would not sign up for <a href="https://substack.com/" target="_blank" rel="noopener">https://substack.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today I spent an hour or so in migrating my old blog posts present at medium.com to this site. Medium gave me a good playground to start 
      
    
    </summary>
    
    
      <category term="blogging" scheme="https://vishnubharathi.codes/tags/blogging/"/>
    
  </entry>
  
</feed>
