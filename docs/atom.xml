<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vishnu Bharathi</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vishnubharathi.codes/"/>
  <updated>2021-01-23T07:12:12.091Z</updated>
  <id>https://vishnubharathi.codes/</id>
  
  <author>
    <name>Vishnu Bharathi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Learning to SWIM</title>
    <link href="https://vishnubharathi.codes/blog/learning-to-swim/"/>
    <id>https://vishnubharathi.codes/blog/learning-to-swim/</id>
    <published>2021-01-03T03:52:20.000Z</published>
    <updated>2021-01-23T07:12:12.091Z</updated>
    
    <content type="html"><![CDATA[<p>I finished reading a research paper called “SWIM: Scalable Weakly-consistent Infection-style Process Group Membership Protocol” last night. This post is going to be about it. If you are here to read my experience about real-world swimming, I have disappointed you - I still don’t know to swim in waters, haha.</p><p>First, I started by reading the Raft paper and was trying to go through a few open-source RAft implementation libraries and see how those libraries are used in software that is currently used in production. The exploration included the following places:</p><ul><li><a href="https://github.com/hashicorp/raft">https://github.com/hashicorp/raft</a></li><li><a href="https://github.com/hashicorp/consul">https://github.com/hashicorp/consul</a></li><li><a href="https://github.com/hashicorp/nomad">https://github.com/hashicorp/nomad</a></li><li><a href="https://github.com/hashicorp/raft-mdb">https://github.com/hashicorp/raft-mdb</a></li></ul><p>Halfway through my Raft journey, I understood that Raft is a consensus algorithm - It is about making a few machines (a cluster) agree on something. But it does not deal with how machines could be added/removed in the cluster. So we need to handle cluster membership outside it. So I started digging the above libraries, I arrived at how cluster membership is done in some of the practical systems (mostly the Hashicorp stack).</p><p>Hashicorp seems to have <a href="https://github.com/hashicorp/serf">Serf</a> which could be used for performing cluster membership. More specifically it uses this <a href="https://github.com/hashicorp/memberlist">memberlist</a> library to do it which is based on this awesome research paper.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. Das, I. Gupta and A. Motivala, &quot;SWIM: scalable weakly-consistent infection-style process group membership protocol,&quot; Proceedings International Conference on Dependable Systems and Networks, Washington, DC, USA, 2002, pp. 303-312, doi: 10.1109&#x2F;DSN.2002.1028914.</span><br></pre></td></tr></table></figure><p>Here are some of my notes on the SWIM paper. The SWIM paper starts with this nice quote:</p><blockquote><p>As you swim lazily through the milieu,</p><p>The secrets of the world will infect you.</p></blockquote><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>The main motivation behind the SWIM paper is</p><blockquote><p>The SWIM effort is motivated by the unscalability of traditional heart-beating protocols, which either impose network loads that grow quadratically with group size, or compromise response times or false positive frequency w.r.t. detecting process crashes.</p></blockquote><p>Before SWIM, the norm is to use a simple many-to-many heart-beating protocol to propagate cluster membership in the cluster. Consider this example:</p><p>If the cluster has n nodes, then it needs to send a message to all the other (n-1) nodes. Hence we end up sending n*(n-1) messages across the network when we want to exchange information about cluster membership. This means that our network load (number of communications that happen on the cluster network) grows quadratically (n<sup>2</sup>) for a group of n nodes in the cluster.</p><p>Example of what we are dealing with here:</p><p>When there are 5 nodes, we will end up making 5<sup>2</sup> = 25 network communications. For 10, it will be 100 and for 100, it will be 10,000. Remember this is just for sharing the knowledge of what nodes are in the cluster. That’s too much and impractical.</p><p>SWIM avoids this quadratic growth.</p><h2 id="Performance-metrics"><a href="#Performance-metrics" class="headerlink" title="Performance metrics"></a>Performance metrics</h2><p>If we are designing a membership system for a cluster, the following performance metrics could be considered:</p><ul><li>Membership propagation speed (should be high)</li><li>Message load on the network (should be low)</li><li>Computation load on the process (should be low)</li><li>False failure detections (should be low)</li></ul><p>Typically we might want to have this in our monitoring system to figure out if something is going wrong with our membership system.</p><p>SWIM tries to give the following performance metrics:</p><blockquote><p>(1) imposes a constant message load per group member;</p><p>(2) detects a process failure in an (expected) constant time at some non-faulty process in the group;</p><p>(3) provides a deterministic bound (as a function of group size) on the local time that a non-faulty process takes to detect failure of another process;</p><p>(4) propagates membership updates, including information about failures, in infection-style (also gossip-style or epidemic-style [2, 8]); the dissemination latency in the group grows slowly (logarithmically) with the number of members;</p><p>(5) provides a mechanism to reduce the rate of false positives by “suspecting” a process before “declaring” it as failed within the group.</p></blockquote><h2 id="Swimming"><a href="#Swimming" class="headerlink" title="Swimming"></a>Swimming</h2><p>I started describing the internal workings of SWIM here to get a deep understanding, but I kind of thought it to be a long-running note that might be lacking good diagrams and so I am adding some awesome sources that I am using to learn about SWIM. (that frees up my time to try to build some cool thing with it)</p><p>The first resource would be the <a href="https://www.cs.cornell.edu/projects/Quicksilver/public_pdfs/SWIM.pdf">SWIM paper</a> itself.</p><p>The second link would be the <a href="https://github.com/hashicorp/memberlist">hashicorp/memberlist</a> library source code that implements SWIM.</p><p>The next is one of the best ways to quickly get a taste for SWIM. It is a “papers we love” video presentation of the SWIM paper by Armon Dadgar from HashiCorp. (linked below) </p><iframe width="560" height="315" src="https://www.youtube.com/embed/bkmbWsDz8LM" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>In the presentation, they mention the missing pieces of SWIM and arrive at improvements to SWIM which makes it production-ready. For example, SWIM implementation by the original paper authors was using 56 nodes, but Hashicorp’s implementation was tested in a production use-case having 2000+ nodes. In those massive number of node environments, we need to deal with rejoins efficiently, encryption, etc.</p><p>They took all these improvements and present a paper named <a href="https://arxiv.org/abs/1707.00788">Lifeguard: Local Health Awareness for More Accurate Failure Detection</a>. Furthermore, they created this project called <a href="https://www.serf.io">Serf</a> which builds on top of the memberlist library that can be tuned to have a raw SWIM implementation. So if we need a production-ready SWIM implementation, we might just use the Serf library.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I finished reading a research paper called “SWIM: Scalable Weakly-consistent Infection-style Process Group Membership Protocol” last nigh
      
    
    </summary>
    
    
      <category term="databases" scheme="https://vishnubharathi.codes/tags/databases/"/>
    
      <category term="research papers" scheme="https://vishnubharathi.codes/tags/research-papers/"/>
    
  </entry>
  
  <entry>
    <title>Expense sheets</title>
    <link href="https://vishnubharathi.codes/blog/expense-sheets/"/>
    <id>https://vishnubharathi.codes/blog/expense-sheets/</id>
    <published>2020-12-28T14:39:26.000Z</published>
    <updated>2021-01-23T07:12:12.091Z</updated>
    
    <content type="html"><![CDATA[<p>As the end of the year approaches, I just realized that I was able to consistently track my expenses with an Excel sheet.</p><p><img src="/images/excel-expenses.png" alt="excel expenses"></p><p>I usually start a month by copy-pasting the “Template” (that contains my mandatory expenses like bills payments, EMIs, etc.) and naming the sheet to the current month’s name. This has helped me to keep track of “things I have to pay” and “things I already paid” the current month.</p><p>I recently discovered <a href="https://julian.digital">Julian’s blog</a> where he <a href="https://julian.digital/?s=media+consumption">tracks media consumption every month</a>. That’s a nice way to build up a collection of quality things over time.</p><p>While I always thought that it is difficult to achieve such a level of consistency, I just surprisingly found out that I had consistently done my expense tracking for more than 2 years now.</p><p>I started this habit when I was trying out <a href="https://www.notion.so/">notion</a> in 2018.</p><p><img src="/images/notion-expenses.png" alt="notion expenses"></p><p>But around August 2019, I hit my max space limit on the notion free tier and I was not able to upgrade to a paid plan at that time. So, I thought I should just use an excel sheet in google drive for tracking this.</p><p>A lesson that I can infer from this activity just while writing this blog post is “we can achieve consistency while trying to be consistent in something that is really useful to us”. The expense tracking was useful to me because without the tracking I might miss paying out bills on time :D So, I think I was able to be consistent with it.</p><p>I am thinking of some modifications to my process</p><ul><li>Track non-mandatory expenses (like a one-time purchase). I haven’t done this yet because having them in my sheet didn’t prove to be helpful when I tried doing them) previously.</li><li>Use one excel workbook for all money-related stuff. I had been using one excel workbook per year but I just figured out that we could do excel formula across different sheets in one workbook. This helps to arrive at useful results like “total expenses for a year” - feels much like how companies move toward monorepo while maintaining source code :D</li><li>Leverage the data more. We will try to squeeze out more information by analyzing the data.</li></ul><p>Personal finance is becoming a topic of interest to me more and more these days. If you track your expenses or have some productivity tips about personal finance, do share them with me :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As the end of the year approaches, I just realized that I was able to consistently track my expenses with an Excel sheet.&lt;/p&gt;
&lt;p&gt;&lt;img src
      
    
    </summary>
    
    
      <category term="personal finance" scheme="https://vishnubharathi.codes/tags/personal-finance/"/>
    
      <category term="life" scheme="https://vishnubharathi.codes/tags/life/"/>
    
      <category term="productivity" scheme="https://vishnubharathi.codes/tags/productivity/"/>
    
  </entry>
  
  <entry>
    <title>Jio</title>
    <link href="https://vishnubharathi.codes/blog/jio/"/>
    <id>https://vishnubharathi.codes/blog/jio/</id>
    <published>2020-11-01T18:28:00.000Z</published>
    <updated>2021-01-23T07:12:12.091Z</updated>
    
    <content type="html"><![CDATA[<p>This might be a silly and short blog post :D I am writing this to let the world know that I got a new “Jio” SIM card today. I was struggling with poor internet speeds and network problems on Airtel. So, I finally took the plunge to get on the Jio network. I should have done this ages ago.</p><p>I was planning to get a <a href="https://www.jio.com/shop/en-in/router-m2-black/p/491193575">Router M2 Black JioFI</a>, but it is out of stock everywhere. So, just got the SIM card and using via mobile.</p><p>For people who don’t have context about what Jio is: It is a popular mobile network that changed a lot of things in India. I totally love what Jio is doing to India.</p><p>It is one of the first networks to charge only for the mobile data and give calls for free. It is the network that is helping a lot of people in India to get access to the internet. The internet speeds used to crawl and still crawls in many other networks. But Jio is super-fast and very very decent.</p><p>When Jio came out first, I didn’t take it much seriously. I wasn’t even as excited as when Videocon introduced a mobile network. In fact, they seemed sketchy for me just after my experience with Videocon (introduce unbelievable plans and charge high after sometime and eventually cease operation - that’s Videocon’s story in short.)</p><p>Super speed at dirt cheap prices; not many brands give these. Jio does this awesomely and at scale. How do I know? Almost all the people in my family have Jio ( except for me - not true anymore :D ) I have used their mobile networks via wifi hotspots because my network gave problems and everything it solves problems for me.</p><p>Anyways, I felt quiet here and I thought I will just share away this update :D With an upgrade in my internet speed, I just feel like half of my problems are gone :D</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This might be a silly and short blog post :D I am writing this to let the world know that I got a new “Jio” SIM card today. I was struggl
      
    
    </summary>
    
    
      <category term="life" scheme="https://vishnubharathi.codes/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Rejections</title>
    <link href="https://vishnubharathi.codes/blog/rejections/"/>
    <id>https://vishnubharathi.codes/blog/rejections/</id>
    <published>2020-10-09T19:32:18.000Z</published>
    <updated>2021-01-23T07:12:12.095Z</updated>
    
    <content type="html"><![CDATA[<p>This post is inspired by <a href="https://blog.jabid.in/2016/11/30/rejections.html">Jaseem Abid’s original post</a> (Thanks to him). I found it helpful and motivating. Hence I am doing my version of it. Alright, so here is the idea.</p><blockquote><p>Why do we not talk about our failures?</p></blockquote><p>Jaseem’s original post was about a few companies that rejected him outright without even an interview. But my version would be slightly different. It will include outright rejections, ghosted rejections, and rejection after interviewing.</p><p>Also, quoting Jaseem one more time to state the purpose of this blog post:</p><blockquote><p>This might be the motivation someone needs to keep trying and hence I believe is worth sharing</p></blockquote><p>I hope that reading this helps you a little bit in your job search! I want you to know that job search might be stressful (at times), but you got this! Prepare yourself and go out there; Don’t get hurt by rejection.</p><blockquote><p>No challenges are roadblocks. They are just speed bumps.</p><p>– Devin’s mom (The Kicks S1E01)</p></blockquote><p>Ok, let me start the show!</p><h2 id="Paytm"><a href="#Paytm" class="headerlink" title="Paytm"></a>Paytm</h2><p>The year was 2015. I was fresh out of college! Never applied/attended an interview before because I was not allowed to attend the campus interviews happening in college due to low marks.</p><p>So, there I was browsing through <a href="https://hasjob.co/">Hasjob</a> (one of my favorite job portals) every day. I then noticed this job listing saying that <a href="https://paytm.com/">Paytm</a> is hiring for software engineers who do node.js.</p><p>I got very excited. I had started using Paytm (a digital money wallet) sometime back and was amazed by this new way of handling money.</p><p>So, I went on and just applied for it. I think this was my first ever job application.</p><p>Luckily, I got back a response. They wanted to do a phone call. I didn’t even think about what they would ask on the phone. I was so happy that I was even considered for a phone call. haha :D</p><p>Then the phone call came. It was so fast - we said hi and maybe a very little intro. Then this happened</p><p>interviewer: do you have a paper and pen right now?</p><p>me: no</p><p>interviewer: Ok, take those and get ready?</p><p>me: (running around to get a paper and pen) ok, got it.</p><p>interviewer: which language are you comfortable in?</p><p>me: JavaScript</p><p>interviewer: Ok, write a program to reverse a linked list.</p><p>me: (stunned, because the last time I wrote a linked list was years ago for data structure exam) ummmm, (tried so hard to think of a solution)</p><p>(after a few mins)</p><p>interviewer: Did you write it?</p><p>me: I just wrote the linked list structure and function signature</p><p>interviewer: never mind, just read out what you had written in the paper.</p><p>(me, reading in breaking voice)</p><p>interviewer: Kbye</p><p>[Ghosted &amp;&amp; Rejected]</p><p>Short while, I called my friend who had been preparing for interviews and he introduced me to the fact that asking data structure questions is normal. That’s when I got the taste of how the interviewing world is :D </p><h2 id="DoSelect"><a href="#DoSelect" class="headerlink" title="DoSelect"></a>DoSelect</h2><p>It was the same year and just after the Paytm rejection, I came across <a href="https://doselect.com/">DoSelect</a>. It is a coding assessment platform like <a href="https://www.hackerrank.com/">Hackerrank</a>. Those kind of sites were gaining a lot of traction at that time. Remotely executing your code and evaluating solutions from a website is pretty cool.</p><p>Earlier as a student, I released one of my successful projects called <a href="https://github.com/scriptnull/compilex">compilex</a> which is a library useful for building such kind of sites. So I was so much interested in working on such a product. Hence I applied.</p><p>The first round was using the DoSelect platform itself. Simple algorithm and data structure style questions (I think I answered 2 out of 3 correctly; the other one partially accepting solution). They asked for a Google hangout video chat. But I had a very poor internet connection at that time and openly mailed them about it and asked if it is ok to do an in-person interview instead.</p><p>They said ok! At that time, they were based out of <a href="https://www.inmobi.com/">InMobi</a> office. I took a “500D” BMTC to arrive at their office (used google map to track the right bus stop, but got down early in the previous bus stop. haha). Thankfully, there are a lot of 500D buses and so I hopped on the next one and arrived at the right spot. This was the first time I entered a tech park and a big office. I was WOWed!</p><p>I was nervous and thinking about what they will be asking me. There was a technical discussion. The thing that went wrong there was “I wasn’t confident while telling my answer”. They asked me something like “how to get realtime updates in the browser?”, I knew that WebSockets are used for them but I didn’ confidently put that in front of them. I said about long polling and was a bit reluctant about starting the conversation about web sockets. Because I wasn’t sure if WebSockets were a proper standard. So the conversation went a little bit weird.</p><p>After that, I spoke with the founders. I was so naive throughout the entire conversation both in-person and mail. I was so new to a lot of things - tech, speaking with people, etc. I am sure that I looked like a fool at some point in time. haha. The conversation ended in a good note. I very much appreciate their time.</p><p>Got back home. I was very happy and even naively told my grand-mother that I might be getting an offer anytime soon. We waited for their email (lol, she still keeps a check on me whenever I start a job search - even after 5 years). Waited and waited…. haha. Even mailed them back 10 days after to follow up. (I read through that mail to get the feel of nostalgia and how naive I was - it felt like I was so desperate for the job)</p><p>[Ghosted &amp;&amp; Rejected]</p><p>At this point, I already learned a couple of things about job search</p><ol><li>Don’t be desperate. Just accept who you are and try to find people who are willing to accept who you are and help you improve.</li><li>Never say that you are getting an offer to others before receiving the actual offer letter. That way we avoid embarrassment in front of family and friends. hahahaha.</li></ol><h2 id="Mozilla"><a href="#Mozilla" class="headerlink" title="Mozilla"></a>Mozilla</h2><p>I think this was 2 years after that. I was so interested in open source communities, side projects, etc. Mozilla was doing cool stuff like rust. Also, it’s presence in India was increasing more and more.</p><p>I think I loved Mozilla as a company because of these reasons:</p><p>Firefox was one of the coolest browsers back when I was in school. It was amazing to notice all the improvements Mozilla bring in after every new update. Those days Opera and Firefox were two of my favorite browsers (until Chrome came along).</p><p>The second reason is MDN Web Docs - Mozilla Developer Network documentation for JavaScript. I love these docs and these have huge respect from me even now.</p><p>I saw a really different role on their career page. It wasn’t particular about any tech stack, but it was more like a research/prototyping engineer. I also think that it was a remote role. I just applied away to see if they would even consider me for such a role.</p><p>Then I received this nicely written rejection email. I am copying and pasting the full email because I love the way they used the word “Web” in there!</p><p>~ ~ ~ ~ </p><p>Hi Vishnu,</p><p>Thank you for your time and interest in Mozilla and our Staff Experiments Integration Full Stack Developer position. We have looked at your resume and, although we appreciate your background and experience, we are choosing not to move forward at this time.</p><p>This isn’t necessarily the end! We know that people are always learning and growing and we have new jobs opening all the time. We do keep you in mind and will contact you if we think we have an opening here that you would be well-suited to.  Also, every position we open is posted to our twitter feed, so follow us at @mozilla to keep an eye out for other positions that would be a good fit for you!</p><p>We’re sorry that we were unable to make it work this time, but we hope that we see you around the Web.</p><p>Thank you!</p><p>The Mozilla Recruiting Team</p><p>~ ~ ~ ~</p><p>I wrote back happily saying,</p><p>~ ~ ~ ~</p><p>Thanks for taking the time to look into my application and giving notification on the status of it. I hope to see you around!</p><p>~ ~ ~ ~</p><p>[Rejected]</p><h2 id="Cohesity"><a href="#Cohesity" class="headerlink" title="Cohesity"></a>Cohesity</h2><p>These were the times when I was having questions like “What do I want to focus and specialize on? Do I want to concentrate on frontend, backend, or DevOps?” - kind of like adolescence. I think a recruiter from Cohesity reached out to me. They said that there was a position open for Frontend engineer. I thought of trying out for it (just to know if people trust me for a frontend role) - I had been mostly doing full-stack stuff for a while.</p><p>There was an on-site interview. I went in super-delayed for that - who knew there will be that much traffic on outer ring road of Bangalore and also I was the first rider for the Uber driver that I had got that day (I mean like the first-ever rider in his uber driver career). Spend quite some time helping him out with Google maps, Uber driver-partner app, and what not, android and phones in general!</p><p>When I arrived, I was introduced to the interviewers. I think there were 2 technical rounds - needed to write JavaScript in both of them. Questions like implement a debounce function were asked. I think I did it well. But I might have troubled a bit while speaking with one of the interviewers.</p><p>Then in the afternoon, one of the interviewers took me to their team lunch and introduced me to a bunch of team members. I had lunch with them. For the most part, they were all speaking in Hindi (a language that I don’t know). Then I said that I am sorry and I don’t understand Hindi. Then they also said it’s ok (and sorry).</p><p>I was notified that the recruiter would contact me for the results. The recruiter reached out to me over the phone and said, “we were looking for people who are already very specialized in frontend and you are more aligned towards the backend. So it didn’t work out, but we will let you know once those positions open up.”</p><p>[Rejected]</p><p>When discussing this interview experience with one of my friends, he said that the part where I went in for lunch with the team was also part of the interview to evaluate culture fit. haha :D</p><h2 id="Amazon"><a href="#Amazon" class="headerlink" title="Amazon"></a>Amazon</h2><p>This was one of the turning points for me. I never interviewed with big co. at that point and this was the first time. A recruiter reached out to me via LinkedIn and I sent my resume back showing interest.</p><p>Why was I interested? AWS was the main reason. After that is Kindle, haha :D Apart from those, I felt good about Amazon’s growth inside India. I was interested in how these big co. operate (spent most of the time working at startups at that point in time). I was in the hiring drive for their newly established Amazon Pay team. After a few rounds, I met with someone who said that I might be part of an internal team. Not sure, if those two were the same roles :D</p><p>The interview experience was so much energy-consuming. I first took a few weeks preparing Data Structure and Algorithms. I think I just went through <a href="https://en.wikipedia.org/wiki/List_of_data_structures">the list of data structures</a>. At this point, I didn’t do much puzzle questions and my point of view was if I am just good at knowing these data structures and coding basic operations in them, I might be able to answer whatever was thrown at me!</p><p>The first day was fully data structure and algorithm puzzle questions. There was a written round. After that, there were two more rounds with Amazon Engineers. I enjoyed the conversation I had with both of the engineers.</p><p>The next rounds were about system design. This is where things went wrong with me. I think I was over-confident and didn’t prepare well. The over-confidence is mostly due to me thinking like “system design, right? I already do a good job at work while designing stuff. So it should be easy peasy.”</p><p>They asked me some pretty common design questions in multiple rounds - I was told to draw the class diagram and stuff. They were checking on the Object-oriented design skills. They probably expected me to be writing Singletons and Abstract Factories there, haha. At that time, I was working with JavaScript at work and wasn’t ready for it!</p><p>Also one of the rounds was about testing knowledge on concurrent programming. I was expected to write code involving 2 threads etc. I tried answering that thing in Go but it didn’t go well. I should have just told them upfront that I work mostly with Node.js and it is single-threaded.</p><p>[Rejected]</p><p>The HR called me over the phone and shared that I wasn’t strong enough in my system design skills and apply back in 6 months. Some good things here: they didn’t ghost. They shared the feedback and encouraged to reapply. Also, I didn’t have to pay for cabs and food during these interviews :D haha.</p><p>Jokes apart, I think I learned a few things in here:</p><ul><li>If you don’t know something, accept that you don’t know and come clean with the interviewer.</li><li>Don’t be over-confident.</li><li>Go in prepared!</li><li>Choose the right tech while preparing for interviews. If not choose the interview where they ask you about the tech you know of. For example: probably choosing some Object-Oriented Language like Java or C++ might have been more suitable for answering the design part of the interview here or I should have tried out for roles like Web developer or something that deals with JavaScript.</li></ul><h2 id="IBM"><a href="#IBM" class="headerlink" title="IBM"></a>IBM</h2><p>A recruiter reached out via LinkedIn and I sent back the resume showing interest. They called for a hiring fair - 100s of people were there.</p><p>We were asked to dress formally I think (I went in wearing a white shirt, black pants, and formal shoes). First-round was written (write programs on a paper). Followed by an in-person round.</p><p>interviewer: Are you experienced in python?</p><p>me: No. I am experienced in JavaScript and Node.js</p><p>interviewer: (looking confused) but the role we are interviewing for is for someone who is experienced in python</p><p>me: oh, ok.</p><p>interviewer: asked a question just for the sake of it (but hugely confused about how they allowed me in there)</p><p>me: (answered the question)</p><p>It was so short. Then I was asked to wait and the HR spoke to me asking “did you tell that you were in for node.js to the interviewer?”. I said yes. Then they were like “oops, sorry, we are looking for python and the node.js role might open up afterward”</p><p>hmmmmm, ok!</p><p>I regret most part of doing this. But there is a good thing. I discovered a good milkshake shop near their office. The milkshake that I had there was so awesome and I made it a habit to drop by that shop whenever I was nearby. haha, sweet!</p><p>[Rejected]</p><h2 id="Schneider-Electric"><a href="#Schneider-Electric" class="headerlink" title="Schneider Electric"></a>Schneider Electric</h2><p>Felt very similar to IBM type interview. Both of these were optimized for filtering out from a large number of people.</p><p>First-round was written MCQ or fill in the blanks style questions. Forgot exactly. But I had noted down that I got 23 out of 30 in that. haha!</p><p>Two rounds with engineers.</p><p>One round was a discussion regarding previous work experience.</p><p>In another round, I was asked a puzzle SQL question - couldn’t answer it.</p><p>[Rejected]</p><p>Preparation and a little luck of getting asked what you know in play here!</p><h2 id="Grab"><a href="#Grab" class="headerlink" title="Grab"></a>Grab</h2><p>Got a referral for this! (thanks to the friend who referred me)</p><p>Initially there was a small phone call with the HR and showed up on-site.</p><p>Two rounds:</p><ol><li>Whiteboard an algorithm question</li><li>Design question - picked up from an actual work problem that they had solved.</li></ol><p>I wrote a sub-optimal solution for the coding question. Also didn’t do the design round well.</p><p>[Rejected]</p><p>But I got the chance to meet up with the friend who referred me at the end of the interviews and felt encouraged in the job search process :)</p><h2 id="Uber"><a href="#Uber" class="headerlink" title="Uber"></a>Uber</h2><p>I was using Uber almost every day around that time. This was when ride-sharing apps were booming!</p><p>Also, I like reading through their engineering blog etc. So I was excited to apply for a position there.</p><p>I applied via their careers portal on a weekend and received this mail first thing on a Monday morning!</p><p>~ ~ ~ ~ </p><p>Hi Vishnu, </p><p>Thank you so much for giving us the opportunity to consider you for the Software Engineer II role. We know it takes a lot to submit an application, and we want you to know how much we truly appreciate your interest in Uber! We’ve carefully reviewed your application, and unfortunately it isn’t a match for what we’re looking for this time around.</p><p>Please do not hesitate to keep in touch and reach out if we have another role you think could be a fit in the future. We wish you all the best. </p><p>Regards,</p><p>The Uber Recruiting Team</p><p>~ ~ ~ ~</p><p>[Rejected]</p><h2 id="Donut"><a href="#Donut" class="headerlink" title="Donut"></a>Donut</h2><p>I was interested in building a slack bot and read through the entire of slack’s documentation. I was amazed by all the slack bots out there.</p><p>One such slack bot is Donut. So I applied to them.</p><p>~ ~ ~ ~</p><p>Hi Vishnu,</p><p>Thank you for your application to Donut. We recently filled the role you applied for and are no longer actively recruiting for this position. That being said, we’d love to keep your resume on file as our team continues to grow and stay in touch about future opportunities that may be a good fit.</p><p>We appreciate your interest in Donut and wish you success in your job search.</p><p>Best,<br>The Donut Team</p><p>~ ~ ~ </p><p>[Rejected]</p><h2 id="Last9"><a href="#Last9" class="headerlink" title="Last9"></a>Last9</h2><p>Startup in initial stages. The small team focused on an interesting problem space (observability) - also remote first.</p><p>Almost got ghosted, but I messaged them asking if I was still being considered; if not at least a simple feedback.</p><p>They were generous enough to spend some time over a call to give me feedback. I wrote an <a href="/blog/first-feedback/">entire blog post about this</a>.</p><p>[Rejected]</p><h2 id="Juspay"><a href="#Juspay" class="headerlink" title="Juspay"></a>Juspay</h2><p>I love <a href="https://juspay.in/">Juspay</a> while making payments on mobile. I spoke with their founders back in 2015 in a JavaScript conference.</p><p>The founder started an email conversation with someone in the company CCing me and their careers email - asking to co-ordinate a coding test. That person never got back and ghosted.</p><p>While that was in 2015, I happened to apply back again after 5 years. They posted in “Ask HN: Who is hiring?” thread.</p><p>HR spoke with me and told me that they will send a coding test.</p><p>Never got the coding test.</p><p>[ (Ghosted &amp;&amp; Rejected) x2 ]</p><h2 id="PhonePe"><a href="#PhonePe" class="headerlink" title="PhonePe"></a>PhonePe</h2><p>I tried reaching out to a recruiter on LinkedIn (after seeing their LinkedIn posts), but they never responded back with a message.</p><p>It felt like writing to /dev/null.</p><p>[Ghosted &amp;&amp; Rejected]</p><h2 id="epiFi"><a href="#epiFi" class="headerlink" title="epiFi"></a>epiFi</h2><p>Already missed the UPI wave and didn’t want to miss out on the Neo bank wave in India.</p><p>Applied via their careers page. Got back this email.</p><p>~ ~ ~ ~ </p><p>Hi Vishnu,</p><p>Thank you for your interest in epiFI Technologies! We wanted to let you know we received your application for DevOps Engineer, and we are delighted that you would consider joining our team.</p><p>Our team will review your application and will be in touch if your qualifications match our needs for the role. If you are not selected for this position, keep an eye on our jobs page as we’re growing and adding openings.</p><p>Best,<br>The epiFI Technologies Team</p><p>~ ~ ~ ~</p><p>Never got back a review.</p><p>[Ghosted &amp;&amp; Rejected]</p><h2 id="Raksul"><a href="#Raksul" class="headerlink" title="Raksul"></a>Raksul</h2><p><a href="https://corp.raksul.com/en/about/">Raksul</a> is a Japanese company that was trying to hire for building a fresh development center in India. A recruiter reached out to me regarding the opportunity. First was a general webinar kind of session where the CTO spoke about the culture etc. They seemed cool. The idea of building a fresh team from scratch kind of attracted me. So, I decided to interview further. Also, they were hiring for Go Engineers - so it kind of aligned with me.</p><p>The first round was 1 day take-home assignment. It went well. Next was a 1hr chat with leadership. It went good as well. Then there was a coding assignment for which 7 days time was given. I was busy with other commitments around that time and couldn’t complete it properly - barely spent 2 days on the assignment.</p><p>I enjoyed the conversation and coding assignments. They helped me in honing my Go skills. I even got a thorough code-review on the assignments. Thanks for that! But unfortunately, I never received an official mail intimation from them about the rejection. So I will have to consider this ghosting.</p><p>[Ghosted &amp;&amp; Rejected]</p><h2 id="Walmart-labs"><a href="#Walmart-labs" class="headerlink" title="Walmart labs"></a>Walmart labs</h2><p>Received a call from HR saying that they are interested in the profile. They said the first round will be data structure and algorithms. They asked if I am prepared for it. I should have just said yes, but I said “prepared but not sure if I am at the level to crack Walmart labs”. lol, rookie mistake!</p><p>They said that they will send the ds and algo online round to email. But never received one.</p><p>[Ghosted &amp;&amp; Rejected]</p><h2 id="Zoom"><a href="#Zoom" class="headerlink" title="Zoom"></a>Zoom</h2><p>Applied via their job portal. Received an email:</p><p>~ ~ ~ ~ </p><p>Hi Vishnu Bharathi P,</p><p>Thank you for your application to our Web DevOps Engineer position. We appreciate the time you took to consider opportunities at Zoom Video Communications. At this time, we are not seeing exact alignment with the current team needs.</p><p>……………………..</p><p>~ ~ ~ ~</p><p>[Rejected]</p><h2 id="Rejections"><a href="#Rejections" class="headerlink" title="Rejections"></a>Rejections</h2><p>I hope that this post helped you a little bit or at least served as relaxation in your job search :D Sometimes you get a job and sometimes you get an adventure - like in my case of discovering a good milkshake shop in the worst possible interview experience.</p><p>Focus on preparation and getting better! That’s probably something in our control.</p><p>Also, note how common ghosting is! I wish that we get better at not ghosting people as an Industry.</p><p>Just in case if you are searching for a job: Stay cool, search strong!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This post is inspired by &lt;a href=&quot;https://blog.jabid.in/2016/11/30/rejections.html&quot;&gt;Jaseem Abid’s original post&lt;/a&gt; (Thanks to him). I fo
      
    
    </summary>
    
    
      <category term="interviewing" scheme="https://vishnubharathi.codes/tags/interviewing/"/>
    
      <category term=" tech interviews" scheme="https://vishnubharathi.codes/tags/tech-interviews/"/>
    
  </entry>
  
  <entry>
    <title>The Levenshtein distance in production</title>
    <link href="https://vishnubharathi.codes/blog/levenshtein-distance/"/>
    <id>https://vishnubharathi.codes/blog/levenshtein-distance/</id>
    <published>2020-08-22T17:41:29.000Z</published>
    <updated>2021-01-23T07:12:12.091Z</updated>
    
    <content type="html"><![CDATA[<p>You might have heard about the <a href="https://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein distance</a> while in college or while preparing for tech interviews. It is the famous <a href="https://leetcode.com/problems/edit-distance/">edit distance problem</a>. It is one of those must-try <a href="https://en.wikipedia.org/wiki/Dynamic_programming">Dynamic Programming</a> challenges.</p><p>You still there? even after I said the words “Dynamic Programming”? haha. Good! Because unlike you, I am good at running away from it; most of the time. But I am kind of sitting down to learn + practice this stuff now.</p><p><a href="https://www.manning.com/books/grokking-algorithms">This amazing book</a> played a major role in making this topic a little less scary for me. What intrigued me the most is the spot where the author tries to explain some practical applications for dynamic programming.</p><p>Among all the applications I read there, two of them were practical and in-fact something that I use almost every day. One is in diff tools like <code>git diff</code> to compare text and another one is in spell checkers to figure out the closest matching words to the spelling we typed.</p><p>That’s great! Those are some “open up and read the source code” kind of things. Guess what, I love those kinds of things. Instead of sinking into interview prep materials one after another, I might take this as a fun chance to learn some code that is used in the wild!</p><p><img src="https://media.giphy.com/media/xT1R9YSHqTHAuD9FyU/giphy.gif" alt="missed hi5"></p><p>So let us learn about the problem, the way it is implemented in some open-source software (which are used by a lot of people - like a really really big number).</p><h2 id="Problem-statement"><a href="#Problem-statement" class="headerlink" title="Problem statement"></a>Problem statement</h2><p>I am going to copy-paste from Wikipedia to help me here.</p><blockquote><p> the Levenshtein distance is a string metric for measuring the difference between two sequences</p></blockquote><p>Basically, it is a way of comparing two strings.</p><blockquote><p>Informally, the Levenshtein distance between two words is the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one word into the other.</p></blockquote><p>Consider spell checkers. When you type something, the spell checking software should suggest you which is often a valid English word with a minimal Levenshtein distance.</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>Here is the cool thing: <a href="https://github.com/git/git">Git</a> uses dynamic programming. Apart from the mention in that book regarding <code>git diff</code>, I found an elegant use-case of Levenshtein distance in some other part of git.</p><p>Here is how I found this out. I usually end up typing the git sub-commands wrongly at least once per day. Git would intelligently understand what I am trying to type and output a suggestion like this</p><p><img src="/images/git-status.png" alt="git-status"></p><p>So, what is git doing here? It is just spell-checking the sub-command I typed in by comparing it against all the valid git sub-commands. Cool, at that point in time I was like “I think git might be using the Levenshtein distance to do this”.</p><p>Then I started <a href="https://github.com/git/git/search?q=The+most+similar+commands+are&amp;unscoped_q=The+most+similar+commands+are">greping “The most similar commands are”</a> in the git source code to dig deep into the source code.</p><p>Bingo! Of course it uses the Levenshtein distance :)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">levenshtein</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *string1, <span class="keyword">const</span> <span class="keyword">char</span> *string2,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> swap_penalty, <span class="keyword">int</span> substitution_penalty,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> insertion_penalty, <span class="keyword">int</span> deletion_penalty)</span></span>;</span><br></pre></td></tr></table></figure><p>Here is the <a href="https://github.com/git/git/blob/53f9a3e157dbbc901a02ac2c73346d375e24978c/levenshtein.h">header file</a> that declares the function and the <a href="https://github.com/git/git/blob/53f9a3e157dbbc901a02ac2c73346d375e24978c/levenshtein.c">c implementation of the logic</a>.</p><p>It gets called in <a href="https://github.com/git/git/blob/4f0a8be78499454eac3985b6e7e144b8376ab0a5/help.c#L514-L623">help.c</a>, the source file responsible for showing help message in git.</p><p>The function first loads all the valid sub-commands of git (including the aliases we have - just knew this fact while digging the source).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">load_command_list(<span class="string">&quot;git-&quot;</span>, &amp;main_cmds, &amp;other_cmds);</span><br><span class="line"></span><br><span class="line">add_cmd_list(&amp;main_cmds, &amp;aliases);</span><br><span class="line">add_cmd_list(&amp;main_cmds, &amp;other_cmds);</span><br><span class="line">QSORT(main_cmds.names, main_cmds.cnt, cmdname_compare);</span><br><span class="line">uniq(&amp;main_cmds);</span><br></pre></td></tr></table></figure><p>After that, it computes the Levenshtein distance and decides which command to suggest.</p><p>One interesting thing that I noted is how <em>practical</em> the code is. If we just see it as an interview prep thing, we might just write a recursive implementation and be done with it (which is usually simpler than writing an iterative approach). But in real-world a recursive approach might result in a stack overflow. Hence, an iterative approach to solving this problem is much more desirable.</p><p>Also, see the level of optimization, they do! A comment from the source below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* The idea is to build a distance matrix for the substrings of both</span><br><span class="line">* strings.  To avoid a large space complexity, only the last three rows</span><br><span class="line">* are kept in memory (if swaps had the same or higher cost as one deletion</span><br><span class="line">* plus one insertion, only two rows would be needed).</span><br></pre></td></tr></table></figure><p> At any given point of time, they are just using 3 rows of the memo table to figure out the answer, instead of keeping the entire memo table in memory.</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">levenshtein</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *string1, <span class="keyword">const</span> <span class="keyword">char</span> *string2,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> w, <span class="keyword">int</span> s, <span class="keyword">int</span> a, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(string1), len2 = <span class="built_in">strlen</span>(string2);</span><br><span class="line"><span class="keyword">int</span> *row0, *row1, *row2;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">ALLOC_ARRAY(row0, len2 + <span class="number">1</span>);</span><br><span class="line">ALLOC_ARRAY(row1, len2 + <span class="number">1</span>);</span><br><span class="line">ALLOC_ARRAY(row2, len2 + <span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...........</span></span><br><span class="line"><span class="comment">//...........</span></span><br><span class="line"></span><br><span class="line">i = row1[len2];</span><br><span class="line"><span class="built_in">free</span>(row0);</span><br><span class="line"><span class="built_in">free</span>(row1);</span><br><span class="line"><span class="built_in">free</span>(row2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Where-else"><a href="#Where-else" class="headerlink" title="Where else?"></a>Where else?</h2><p>After a while of staring at git source code today with a little bit of struggle reading C and getting into all the details of the solution, I wanted to read the implementation in some other programs as well. There are lot of command-line tools and I have noticed a lot of the good ones support this spell check feature.</p><p>In fact this kind of functionality should typically be provided by the sub-command parsing cli library so that it is available more easily to cli writers. I was right again! Since I am into Go recently, I tried searching through a famous command line parser library for Go called <a href="https://github.com/spf13/cobra">Cobra</a>.</p><blockquote><p>Cobra is used in many Go projects such as Kubernetes, Hugo, and Github CLI to name a few</p></blockquote><h2 id="Cobra"><a href="#Cobra" class="headerlink" title="Cobra"></a>Cobra</h2><p><a href="https://github.com/spf13/cobra">Cobra</a> contains a reference to Levenshtein distance in the <a href="https://github.com/spf13/cobra#suggestions-when-unknown-command-happens">README file</a>.</p><p><img src="/images/edit-distance-readme.png" alt="edit-distance-readme"></p><p>Cool, it even has the configuration to choose the distance based on which the suggestions should be picked.</p><p>Now, on to the source code. It is written as <a href="https://github.com/spf13/cobra/blob/993cc5372a05240dfd59e3ba952748b36b2cd117/cobra.go#L164">a simple function</a>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ld compares two strings and returns the levenshtein distance between them.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ld</span><span class="params">(s, t <span class="keyword">string</span>, ignoreCase <span class="keyword">bool</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> ignoreCase &#123;</span><br><span class="line">s = strings.ToLower(s)</span><br><span class="line">t = strings.ToLower(t)</span><br><span class="line">&#125;</span><br><span class="line">d := <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="built_in">len</span>(s)+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> d &#123;</span><br><span class="line">d[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(t)+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> d &#123;</span><br><span class="line">d[i][<span class="number">0</span>] = i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> d[<span class="number">0</span>] &#123;</span><br><span class="line">d[<span class="number">0</span>][j] = j</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="built_in">len</span>(t); j++ &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> s[i<span class="number">-1</span>] == t[j<span class="number">-1</span>] &#123;</span><br><span class="line">d[i][j] = d[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">min := d[i<span class="number">-1</span>][j]</span><br><span class="line"><span class="keyword">if</span> d[i][j<span class="number">-1</span>] &lt; min &#123;</span><br><span class="line">min = d[i][j<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> d[i<span class="number">-1</span>][j<span class="number">-1</span>] &lt; min &#123;</span><br><span class="line">min = d[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">d[i][j] = min + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d[<span class="built_in">len</span>(s)][<span class="built_in">len</span>(t)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is an iterative solution. To understand it better, I copy-pasted the function onto the <a href="https://play.golang.org/">Go playground</a> and started playing around with it.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Edit distance = %d&quot;</span>, ld(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;ac&quot;</span>, <span class="literal">true</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The answer correctly came up as 1. (just 1 deletion operation of b)</p><p>Now let me try to go line by line and try to figure out what is happening.</p><p>We accept two input strings <code>s</code> and <code>t</code>. We ignore the cases if the flag is set.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ignoreCase &#123;</span><br><span class="line">s = strings.ToLower(s)</span><br><span class="line">t = strings.ToLower(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After that, we create a two-dimensional array called <code>d</code> to act as the memo table.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d := <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="built_in">len</span>(s)+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> d &#123;</span><br><span class="line">d[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(t)+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now to visualize things, I am adding a little function that prints the memo table.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &quot;  a  c </span><br><span class="line">&quot;  0  0  0 </span><br><span class="line">a  0  0  0 </span><br><span class="line">b  0  0  0 </span><br><span class="line">c  0  0  0 </span><br></pre></td></tr></table></figure><p> Next, we initialize the first column of every row with the value of the row index.</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> d &#123;</span><br><span class="line">d[i][<span class="number">0</span>] = i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now the table becomes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &quot;  a  c </span><br><span class="line">&quot;  0  0  0 </span><br><span class="line">a  1  0  0 </span><br><span class="line">b  2  0  0 </span><br><span class="line">c  3  0  0 </span><br></pre></td></tr></table></figure><p>After that, we initialize the first row of every column to the value of the column index.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> d[<span class="number">0</span>] &#123;</span><br><span class="line">d[<span class="number">0</span>][j] = j</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That yields</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &quot;  a  c </span><br><span class="line">&quot;  0  1  2 </span><br><span class="line">a  1  0  0 </span><br><span class="line">b  2  0  0 </span><br><span class="line">c  3  0  0</span><br></pre></td></tr></table></figure><p>That completes the base case: “When you start with an empty string and start building the strings, the operation count would just increase by one as it involves only one insertion operation.</p><p>Now, we start filling the inner parts of the table.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="built_in">len</span>(t); j++ &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line"><span class="comment">// logic</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ah nice, that felt so easy. If the row and column alphabet value are the same, then we don’t need to perform any operation and hence we get to use the last counted operation value by looking at the diagonal.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> s[i<span class="number">-1</span>] == t[j<span class="number">-1</span>] &#123;</span><br><span class="line">d[i][j] = d[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For example: Here is the final table. Notice how <code>(a,a)</code> is filled up with looking at the diagonal <code>(&quot;,&quot;)</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &quot;  a  c That is because, when the resulting string is already &#96;a&#96; there is no need to perform any </span><br><span class="line">&quot;  0  1  2 </span><br><span class="line">a  1  0  1 </span><br><span class="line">b  2  1  1 </span><br><span class="line">c  3  2  1 </span><br></pre></td></tr></table></figure><p>If the alphabets differ, then we need to perform one of the operations (insert, remove, replace) to arrive at the desired alphabet. It seems like the way we figure out this is by finding the minimum of the adjacent cells (that are already filled) and adding 1 to it (to effectively say that we need to perform one more operation)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">min := d[i<span class="number">-1</span>][j]</span><br><span class="line"><span class="keyword">if</span> d[i][j<span class="number">-1</span>] &lt; min &#123;</span><br><span class="line">min = d[i][j<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> d[i<span class="number">-1</span>][j<span class="number">-1</span>] &lt; min &#123;</span><br><span class="line">min = d[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">d[i][j] = min + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>So, at last, we return the last cell of the matrix.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> d[<span class="built_in">len</span>(s)][<span class="built_in">len</span>(t)]</span><br></pre></td></tr></table></figure><p>It may not be obvious of what is going on especially in the last part of the code explanation above (apologies for not trying to explain that here). The recommendation for it is to watch/read some tutorial on how the memo table is filled up like this. The point of this explanation is to share how cleanly those ideas behind filling up the memo table is implemented in the library code.</p><h2 id="Closing"><a href="#Closing" class="headerlink" title="Closing"></a>Closing</h2><p>The main difficulty I feel here is the arrival of the idea behind the memo table. What should be the columns and rows? What should be the values that should be filled up in the cells? How do we compute the value of each cell?</p><p>Apart from the interview prep point of view, knowing these techniques (just knowing that these kinds of techniques exist in the world) can be a nice addition to one’s problem-solving toolbox. The next time you are working on a cli app or some other app that needs spell check like suggestions, you know what to do!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;You might have heard about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;Levenshtein distance&lt;/a&gt; while in college or 
      
    
    </summary>
    
    
      <category term="programming" scheme="https://vishnubharathi.codes/tags/programming/"/>
    
      <category term="algorithms" scheme="https://vishnubharathi.codes/tags/algorithms/"/>
    
      <category term="open source" scheme="https://vishnubharathi.codes/tags/open-source/"/>
    
  </entry>
  
</feed>
